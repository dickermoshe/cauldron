import 'dart:io';
import 'package:sugar/core.dart';

import 'irs.dart';

const _locationsFile = 'lib/src/time/zone/locations.g.dart';
const _locationFolder = 'lib/src/time/zone/locations';
const _header = '''
// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/main.dart
// **************************************************************************
// 
// ignore_for_file: type=lint

import 'package:sugar/src/time/zone/location.dart';
import 'package:sugar/src/time/offset.dart';
''';

extension Locations on Never {

  static void generate(RootNamespaceIR namespace) => _rootNamespace(namespace);

  static void _rootNamespace(RootNamespaceIR namespace) {
    final buffer = StringBuffer(_header);
    _imports(buffer, namespace.namespaces);
    buffer..writeln()..writeln(namespace.toExtension());

    File(_locationsFile).writeAsStringSync(buffer.toString());
    namespace.namespaces.forEach(_nestedNamespace);
  }

  static void _nestedNamespace(NestedNamespaceIR namespace) {
    final buffer = StringBuffer(_header);
    _imports(buffer, namespace.namespaces, recursive: true);
    buffer.writeln(namespace.toClass());

    File('$_locationFolder/${namespace.name.toSnakeCase()}.g.dart').writeAsStringSync(buffer.toString());
    namespace.namespaces.forEach(_nestedNamespace);
  }

  static void _imports(StringBuffer buffer, List<NestedNamespaceIR> namespaces, {bool recursive = false}) {
    for (final namespace in namespaces) {
      buffer.writeln(namespace.toImport());
      if (recursive) {
        _imports(buffer, namespace.namespaces, recursive: true);
      }
    }
  }

}



