// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/generate_timezones.dart
// **************************************************************************
// 
// ignore_for_file: type=lint

import 'dart:typed_data';

import 'package:sugar/src/time/offset.dart';
import 'package:sugar/src/time/zone/dynamic_timezone.dart';
import 'package:sugar/src/time/zone/fixed_timezone.dart';
import 'package:sugar/src/time/zone/timezone.dart';
import 'package:sugar/src/time/zone/timezone_span.dart';

extension Asia on Never {
  static final Timezone aden = DynamicTimezone(
    'Asia/Aden',
    DynamicTimezoneSpan(
      -1,
      11212000,
      'LMT',
      TimezoneSpan.range.min,
      -719636812,
      dst: false,
    ),
    Int64List.fromList([ -719636812000 ]),
    Int32List.fromList([ 10800000 ]),
    [ '+03' ],
    [ false ],
  );

  static final Timezone almaty = DynamicTimezone(
    'Asia/Almaty',
    DynamicTimezoneSpan(
      -1,
      18468000,
      'LMT',
      TimezoneSpan.range.min,
      -1441170468,
      dst: false,
    ),
    Int64List.fromList([ -1441170468000, -1247547600000, 354909600000, 370717200000, 386445600000, 402253200000, 417981600000, 433789200000, 449604000000, 465336000000, 481060800000, 496785600000, 512510400000, 528235200000, 543960000000, 559684800000, 575409600000, 591134400000, 606859200000, 622584000000, 638308800000, 654638400000, 670363200000, 686091600000, 695768400000, 701812800000, 717537600000, 733262400000, 748987200000, 764712000000, 780436800000, 796161600000, 811886400000, 828216000000, 846360000000, 859665600000, 877809600000, 891115200000, 909259200000, 922564800000, 941313600000, 954014400000, 972763200000, 985464000000, 1004212800000, 1017518400000, 1035662400000, 1048968000000, 1067112000000, 1080417600000, 1099166400000 ]),
    Int32List.fromList([ 18000000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 21600000, 18000000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000 ]),
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone amman = DynamicTimezone(
    'Asia/Amman',
    DynamicTimezoneSpan(
      -1,
      8624000,
      'LMT',
      TimezoneSpan.range.min,
      -1230776624,
      dst: false,
    ),
    Int64List.fromList([ -1230776624000, 108165600000, 118270800000, 136591200000, 149806800000, 168127200000, 181342800000, 199749600000, 215643600000, 231285600000, 244501200000, 262735200000, 275950800000, 481154400000, 496962000000, 512949600000, 528670800000, 544399200000, 560120400000, 575848800000, 592174800000, 610581600000, 623624400000, 641167200000, 655074000000, 671839200000, 685918800000, 702856800000, 717973200000, 733701600000, 749422800000, 765151200000, 779662800000, 797205600000, 811116000000, 828655200000, 843170400000, 860104800000, 874620000000, 891554400000, 906069600000, 930780000000, 938124000000, 954367200000, 970178400000, 985816800000, 1001628000000, 1017352800000, 1033077600000, 1048802400000, 1066946400000, 1080252000000, 1097791200000, 1112306400000, 1128031200000, 1143756000000, 1161900000000, 1175205600000, 1193349600000, 1206655200000, 1225404000000, 1238104800000, 1256853600000, 1269554400000, 1288303200000, 1301608800000, 1319752800000, 1333058400000, 1387486800000, 1395957600000, 1414706400000, 1427407200000, 1446156000000, 1459461600000, 1477605600000, 1490911200000, 1509055200000, 1522360800000, 1540504800000, 1553810400000, 1571954400000, 1585260000000, 1604008800000, 1616709600000, 1635458400000, 1645740000000, 1666908000000 ]),
    Int32List.fromList

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone anadyr = DynamicTimezone(
    'Asia/Anadyr',
    DynamicTimezoneSpan(
      -1,
      42596000,
      'LMT',
      TimezoneSpan.range.min,
      -1441194596,
      dst: false,
    ),
    Int64List.fromList([ -1441194596000, -1247572800000, 354884400000, 370692000000, 386420400000, 402231600000, 417960000000, 433767600000, 449582400000, 465314400000, 481039200000, 496764000000, 512488800000, 528213600000, 543938400000, 559663200000, 575388000000, 591112800000, 606837600000, 622562400000, 638287200000, 654616800000, 670341600000, 686070000000, 695746800000, 701791200000, 717516000000, 733240800000, 748965600000, 764690400000, 780415200000, 796140000000, 811864800000, 828194400000, 846338400000, 859644000000, 877788000000, 891093600000, 909237600000, 922543200000, 941292000000, 953992800000, 972741600000, 985442400000, 1004191200000, 1017496800000, 1035640800000, 1048946400000, 1067090400000, 1080396000000, 1099144800000, 1111845600000, 1130594400000, 1143295200000, 1162044000000, 1174744800000, 1193493600000, 1206799200000, 1224943200000, 1238248800000, 1256392800000, 1269698400000, 1288450800000, 1301151600000 ]),
    Int32List.fromList([ 43200000, 46800000, 50400000, 46800000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 43200000, 39600000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 43200000, 39600000, 43200000 ]),
    [ '+12', '+13', '+14', '+13', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+12', '+11', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+12', '+11', '+12' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone aqtau = DynamicTimezone(
    'Asia/Aqtau',
    DynamicTimezoneSpan(
      -1,
      12064000,
      'LMT',
      TimezoneSpan.range.min,
      -1441164064,
      dst: false,
    ),
    Int64List.fromList([ -1441164064000, -1247544000000, 370724400000, 386445600000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686095200000, 695772000000, 701816400000, 717541200000, 733266000000, 748990800000, 764715600000, 780440400000, 796168800000, 811893600000, 828223200000, 846367200000, 859672800000, 877816800000, 891122400000, 909266400000, 922572000000, 941320800000, 954021600000, 972770400000, 985471200000, 1004220000000, 1017525600000, 1035669600000, 1048975200000, 1067119200000, 1080424800000, 1099173600000 ]),
    Int32List.fromList([ 14400000, 18000000, 21600000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 18000000 ]),
    [ '+04', '+05', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+05' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone aqtobe = DynamicTimezone(
    'Asia/Aqtobe',
    DynamicTimezoneSpan(
      -1,
      13720000,
      'LMT',
      TimezoneSpan.range.min,
      -1441165720,
      dst: false,
    ),
    Int64List.fromList([ -1441165720000, -1247544000000, 354913200000, 370720800000, 386445600000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686095200000, 695772000000, 701816400000, 717541200000, 733266000000, 748990800000, 764715600000, 780440400000, 796165200000, 811890000000, 828219600000, 846363600000, 859669200000, 877813200000, 891118800000, 909262800000, 922568400000, 941317200000, 954018000000, 972766800000, 985467600000, 1004216400000, 1017522000000, 1035666000000, 1048971600000, 1067115600000, 1080421200000, 1099170000000 ]),
    Int32List.fromList([ 14400000, 18000000, 21600000, 21600000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000 ]),
    [ '+04', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone ashgabat = DynamicTimezone(
    'Asia/Ashgabat',
    DynamicTimezoneSpan(
      -1,
      14012000,
      'LMT',
      TimezoneSpan.range.min,
      -1441166012,
      dst: false,
    ),
    Int64List.fromList([ -1441166012000, -1247544000000, 354913200000, 370720800000, 386449200000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686095200000, 695772000000 ]),
    Int32List.fromList([ 14400000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000 ]),
    [ '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone ashkhabad = DynamicTimezone(
    'Asia/Ashkhabad',
    DynamicTimezoneSpan(
      -1,
      14012000,
      'LMT',
      TimezoneSpan.range.min,
      -1441166012,
      dst: false,
    ),
    Int64List.fromList([ -1441166012000, -1247544000000, 354913200000, 370720800000, 386449200000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686095200000, 695772000000 ]),
    Int32List.fromList([ 14400000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000 ]),
    [ '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone atyrau = DynamicTimezone(
    'Asia/Atyrau',
    DynamicTimezoneSpan(
      -1,
      12464000,
      'LMT',
      TimezoneSpan.range.min,
      -1441164464,
      dst: false,
    ),
    Int64List.fromList([ -1441164464000, -1247540400000, 370724400000, 386445600000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686095200000, 695772000000, 701816400000, 717541200000, 733266000000, 748990800000, 764715600000, 780440400000, 796165200000, 811890000000, 828219600000, 846363600000, 859669200000, 877813200000, 891118800000, 909262800000, 922568400000, 941320800000, 954021600000, 972770400000, 985471200000, 1004220000000, 1017525600000, 1035669600000, 1048975200000, 1067119200000, 1080424800000, 1099173600000 ]),
    Int32List.fromList([ 10800000, 18000000, 21600000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 18000000 ]),
    [ '+03', '+05', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+05' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone baghdad = DynamicTimezone(
    'Asia/Baghdad',
    DynamicTimezoneSpan(
      -1,
      10660000,
      'LMT',
      TimezoneSpan.range.min,
      -2524532260,
      dst: false,
    ),
    Int64List.fromList([ -2524532260000, -1641005856000, 389048400000, 402264000000, 417906000000, 433800000000, 449614800000, 465422400000, 481150800000, 496792800000, 512517600000, 528242400000, 543967200000, 559692000000, 575416800000, 591141600000, 606866400000, 622591200000, 638316000000, 654645600000, 670464000000, 686275200000, 702086400000, 717897600000, 733622400000, 749433600000, 765158400000, 780969600000, 796694400000, 812505600000, 828316800000, 844128000000, 859852800000, 875664000000, 891388800000, 907200000000, 922924800000, 938736000000, 954547200000, 970358400000, 986083200000, 1001894400000, 1017619200000, 1033430400000, 1049155200000, 1064966400000, 1080777600000, 1096588800000, 1112313600000, 1128124800000, 1143849600000, 1159660800000, 1175385600000, 1191196800000 ]),
    Int32List.fromList
    [ 'BMT', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone bahrain = DynamicTimezone(
    'Asia/Bahrain',
    DynamicTimezoneSpan(
      -1,
      12368000,
      'LMT',
      TimezoneSpan.range.min,
      -1577935568,
      dst: false,
    ),
    Int64List.fromList([ -1577935568000, 76190400000 ]),
    Int32List.fromList([ 14400000, 10800000 ]),
    [ '+04', '+03' ],
    [ false, false ],
  );

  static final Timezone baku = DynamicTimezone(
    'Asia/Baku',
    DynamicTimezoneSpan(
      -1,
      11964000,
      'LMT',
      TimezoneSpan.range.min,
      -1441163964,
      dst: false,
    ),
    Int64List.fromList([ -1441163964000, -405140400000, 354916800000, 370724400000, 386452800000, 402260400000, 417988800000, 433796400000, 449611200000, 465343200000, 481068000000, 496792800000, 512517600000, 528242400000, 543967200000, 559692000000, 575416800000, 591141600000, 606866400000, 622591200000, 638316000000, 654645600000, 670370400000, 686098800000, 701823600000, 717548400000, 820440000000, 828234000000, 846378000000, 852062400000, 859680000000, 877824000000, 891129600000, 909273600000, 922579200000, 941328000000, 954028800000, 972777600000, 985478400000, 1004227200000, 1017532800000, 1035676800000, 1048982400000, 1067126400000, 1080432000000, 1099180800000, 1111881600000, 1130630400000, 1143331200000, 1162080000000, 1174780800000, 1193529600000, 1206835200000, 1224979200000, 1238284800000, 1256428800000, 1269734400000, 1288483200000, 1301184000000, 1319932800000, 1332633600000, 1351382400000, 1364688000000, 1382832000000, 1396137600000, 1414281600000, 1427587200000, 1445731200000 ]),
    Int32List.fromList
    [ '+03', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+04', '+03', '+04', '+04', '+04', '+05', '+04', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone bangkok = DynamicTimezone(
    'Asia/Bangkok',
    DynamicTimezoneSpan(
      -1,
      24124000,
      'LMT',
      TimezoneSpan.range.min,
      -2840164924,
      dst: false,
    ),
    Int64List.fromList([ -2840164924000, -1570084924000 ]),
    Int32List.fromList([ 24124000, 25200000 ]),
    [ 'BMT', '+07' ],
    [ false, false ],
  );

  static final Timezone barnaul = DynamicTimezone(
    'Asia/Barnaul',
    DynamicTimezoneSpan(
      -1,
      20100000,
      'LMT',
      TimezoneSpan.range.min,
      -1579844100,
      dst: false,
    ),
    Int64List.fromList([ -1579844100000, -1247551200000, 354906000000, 370713600000, 386442000000, 402249600000, 417978000000, 433785600000, 449600400000, 465332400000, 481057200000, 496782000000, 512506800000, 528231600000, 543956400000, 559681200000, 575406000000, 591130800000, 606855600000, 622580400000, 638305200000, 654634800000, 670359600000, 686088000000, 695764800000, 701809200000, 717534000000, 733258800000, 748983600000, 764708400000, 780433200000, 796158000000, 801590400000, 811886400000, 828216000000, 846360000000, 859665600000, 877809600000, 891115200000, 909259200000, 922564800000, 941313600000, 954014400000, 972763200000, 985464000000, 1004212800000, 1017518400000, 1035662400000, 1048968000000, 1067112000000, 1080417600000, 1099166400000, 1111867200000, 1130616000000, 1143316800000, 1162065600000, 1174766400000, 1193515200000, 1206820800000, 1224964800000, 1238270400000, 1256414400000, 1269720000000, 1288468800000, 1301169600000, 1414263600000, 1459022400000 ]),
    Int32List.fromList
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone beirut = DynamicTimezone(
    'Asia/Beirut',
    DynamicTimezoneSpan(
      -1,
      8520000,
      'LMT',
      TimezoneSpan.range.min,
      -2840149320,
      dst: false,
    ),
    Int64List.fromList([ -2840149320000, -1570413600000, -1552186800000, -1538359200000, -1522551600000, -1507514400000, -1490583600000, -1473645600000, -1460948400000, -399866400000, -386650800000, -368330400000, -355114800000, -336794400000, -323578800000, -305172000000, -291956400000, -273636000000, -260420400000, 78012000000, 86734800000, 105055200000, 118270800000, 136591200000, 149806800000, 168127200000, 181342800000, 199749600000, 212965200000, 231285600000, 244501200000, 262735200000, 275950800000, 452210400000, 466722000000, 483746400000, 498258000000, 515282400000, 529794000000, 546818400000, 561330000000, 581119200000, 592952400000, 610754400000, 624488400000, 641512800000, 656024400000, 673048800000, 687560400000, 704671200000, 718146000000, 733269600000, 748990800000, 764719200000, 780440400000, 796168800000, 811890000000, 828223200000, 843944400000, 859672800000, 875394000000, 891122400000, 906843600000, 922572000000, 941317200000, 954021600000, 972766800000, 985471200000, 1004216400000, 1017525600000, 1035666000000, 1048975200000, 1067115600000, 1080424800000, 1099170000000, 1111874400000, 1130619600000, 1143324000000, 1162069200000, 1174773600000, 1193518800000, 1206828000000, 1224968400000, 1238277600000, 1256418000000, 1269727200000, 1288472400000, 1301176800000, 1319922000000, 1332626400000, 1351371600000, 1364680800000, 1382821200000, 1396130400000, 1414270800000, 1427580000000, 1445720400000, 1459029600000, 1477774800000, 1490479200000, 1509224400000, 1521928800000, 1540674000000, 1553983200000, 1572123600000, 1585432800000, 1603573200000, 1616882400000, 1635627600000, 1648332000000, 1667077200000, 1679781600000, 1698526800000, 1711836000000, 1729976400000, 1743285600000, 1761426000000, 1774735200000, 1792875600000, 1806184800000, 1824930000000, 1837634400000, 1856379600000, 1869084000000, 1887829200000, 1901138400000, 1919278800000, 1932588000000, 1950728400000, 1964037600000, 1982782800000, 1995487200000, 2014232400000, 2026936800000, 2045682000000, 2058386400000, 2077131600000, 2090440800000, 2108581200000, 2121890400000, 2140030800000 ]),
    Int32List.fromList

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone bishkek = DynamicTimezone(
    'Asia/Bishkek',
    DynamicTimezoneSpan(
      -1,
      17904000,
      'LMT',
      TimezoneSpan.range.min,
      -1441169904,
      dst: false,
    ),
    Int64List.fromList([ -1441169904000, -1247547600000, 354909600000, 370717200000, 386445600000, 402253200000, 417981600000, 433789200000, 449604000000, 465336000000, 481060800000, 496785600000, 512510400000, 528235200000, 543960000000, 559684800000, 575409600000, 591134400000, 606859200000, 622584000000, 638308800000, 654638400000, 670363200000, 683582400000, 703018800000, 717530400000, 734468400000, 748980000000, 765918000000, 780429600000, 797367600000, 811879200000, 828817200000, 843933600000, 859671000000, 877811400000, 891120600000, 909261000000, 922570200000, 941315400000, 954019800000, 972765000000, 985469400000, 1004214600000, 1017523800000, 1035664200000, 1048973400000, 1067113800000, 1080423000000, 1099168200000, 1111872600000, 1123783200000 ]),
    Int32List.fromList([ 18000000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 21600000 ]),
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+06' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone brunei = DynamicTimezone(
    'Asia/Brunei',
    DynamicTimezoneSpan(
      -1,
      26480000,
      'LMT',
      TimezoneSpan.range.min,
      -1383463280,
      dst: false,
    ),
    Int64List.fromList([ -1383463280000, -1167636600000, -1082448000000, -1074586800000, -1050825600000, -1042964400000, -1019289600000, -1011428400000, -987753600000, -979892400000, -956217600000, -948356400000, -924595200000, -916734000000, -893059200000, -885198000000, -879667200000, -767005200000 ]),
    Int32List.fromList([ 27000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 32400000, 28800000 ]),
    [ '+0730', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone calcutta = DynamicTimezone(
    'Asia/Calcutta',
    DynamicTimezoneSpan(
      -1,
      21208000,
      'LMT',
      TimezoneSpan.range.min,
      -3645237208,
      dst: false,
    ),
    Int64List.fromList([ -3645237208000, -3155694800000, -2019705670000, -891581400000, -872058600000, -862637400000, -764145000000 ]),
    Int32List.fromList([ 21200000, 19270000, 19800000, 23400000, 19800000, 23400000, 19800000 ]),
    [ 'HMT', 'MMT', 'IST', '+0630', 'IST', '+0630', 'IST' ],
    [ false, false, false, true, false, true, false ],
  );

  static final Timezone chita = DynamicTimezone(
    'Asia/Chita',
    DynamicTimezoneSpan(
      -1,
      27232000,
      'LMT',
      TimezoneSpan.range.min,
      -1579419232,
      dst: false,
    ),
    Int64List.fromList([ -1579419232000, -1247558400000, 354898800000, 370706400000, 386434800000, 402242400000, 417970800000, 433778400000, 449593200000, 465325200000, 481050000000, 496774800000, 512499600000, 528224400000, 543949200000, 559674000000, 575398800000, 591123600000, 606848400000, 622573200000, 638298000000, 654627600000, 670352400000, 686080800000, 695757600000, 701802000000, 717526800000, 733251600000, 748976400000, 764701200000, 780426000000, 796150800000, 811875600000, 828205200000, 846349200000, 859654800000, 877798800000, 891104400000, 909248400000, 922554000000, 941302800000, 954003600000, 972752400000, 985453200000, 1004202000000, 1017507600000, 1035651600000, 1048957200000, 1067101200000, 1080406800000, 1099155600000, 1111856400000, 1130605200000, 1143306000000, 1162054800000, 1174755600000, 1193504400000, 1206810000000, 1224954000000, 1238259600000, 1256403600000, 1269709200000, 1288458000000, 1301158800000, 1414252800000, 1459015200000 ]),
    Int32List.fromList
    [ '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+09', '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+08', '+09' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone choibalsan = DynamicTimezone(
    'Asia/Choibalsan',
    DynamicTimezoneSpan(
      -1,
      27480000,
      'LMT',
      TimezoneSpan.range.min,
      -2032933080,
      dst: false,
    ),
    Int64List.fromList([ -2032933080000, 252435600000, 417974400000, 433778400000, 449593200000, 465314400000, 481042800000, 496764000000, 512492400000, 528213600000, 543942000000, 559663200000, 575391600000, 591112800000, 606841200000, 622562400000, 638290800000, 654616800000, 670345200000, 686066400000, 701794800000, 717516000000, 733244400000, 748965600000, 764694000000, 780415200000, 796143600000, 811864800000, 828198000000, 843919200000, 859647600000, 875368800000, 891097200000, 906818400000, 988390800000, 1001692800000, 1017421200000, 1033142400000, 1048870800000, 1064592000000, 1080320400000, 1096041600000, 1111770000000, 1127491200000, 1143219600000, 1159545600000, 1206889200000, 1427479200000, 1443193200000, 1458928800000, 1474642800000 ]),
    Int32List.fromList([ 25200000, 28800000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ '+07', '+08', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+08', '+09', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false ],
  );

  static final Timezone chongqing = DynamicTimezone(
    'Asia/Chongqing',
    DynamicTimezoneSpan(
      -1,
      29143000,
      'LMT',
      TimezoneSpan.range.min,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943000, -1600675200000, -1585904400000, -933667200000, -922093200000, -908870400000, -888829200000, -881049600000, -767869200000, -745833600000, -733827600000, -716889600000, -699613200000, -683884800000, -670669200000, -652348800000, -650019600000, 515527200000, 527014800000, 545162400000, 558464400000, 577216800000, 589914000000, 608666400000, 621968400000, 640116000000, 653418000000, 671565600000, 684867600000 ]),
    Int32List.fromList([ 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone chungking = DynamicTimezone(
    'Asia/Chungking',
    DynamicTimezoneSpan(
      -1,
      29143000,
      'LMT',
      TimezoneSpan.range.min,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943000, -1600675200000, -1585904400000, -933667200000, -922093200000, -908870400000, -888829200000, -881049600000, -767869200000, -745833600000, -733827600000, -716889600000, -699613200000, -683884800000, -670669200000, -652348800000, -650019600000, 515527200000, 527014800000, 545162400000, 558464400000, 577216800000, 589914000000, 608666400000, 621968400000, 640116000000, 653418000000, 671565600000, 684867600000 ]),
    Int32List.fromList([ 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone colombo = DynamicTimezone(
    'Asia/Colombo',
    DynamicTimezoneSpan(
      -1,
      19164000,
      'LMT',
      TimezoneSpan.range.min,
      -2840159964,
      dst: false,
    ),
    Int64List.fromList([ -2840159964000, -2019705572000, -883287000000, -862639200000, -764051400000, 832962600000, 846266400000, 1145039400000 ]),
    Int32List.fromList([ 19172000, 19800000, 21600000, 23400000, 19800000, 23400000, 21600000, 19800000 ]),
    [ 'MMT', '+0530', '+06', '+0630', '+0530', '+0630', '+06', '+0530' ],
    [ false, false, true, true, false, false, false, false ],
  );

  static final Timezone dacca = DynamicTimezone(
    'Asia/Dacca',
    DynamicTimezoneSpan(
      -1,
      21700000,
      'LMT',
      TimezoneSpan.range.min,
      -2524543300,
      dst: false,
    ),
    Int64List.fromList([ -2524543300000, -891582800000, -872058600000, -862637400000, -576138600000, 1245430800000, 1262278800000 ]),
    Int32List.fromList([ 21200000, 23400000, 19800000, 23400000, 21600000, 25200000, 21600000 ]),
    [ 'HMT', '+0630', '+0530', '+0630', '+06', '+07', '+06' ],
    [ false, false, false, false, false, true, false ],
  );

  static final Timezone damascus = DynamicTimezone(
    'Asia/Damascus',
    DynamicTimezoneSpan(
      -1,
      8712000,
      'LMT',
      TimezoneSpan.range.min,
      -1577931912,
      dst: false,
    ),
    Int64List.fromList([ -1577931912000, -1568592000000, -1554080400000, -1537142400000, -1522630800000, -1505692800000, -1491181200000, -1474243200000, -1459126800000, -242265600000, -228877200000, -210556800000, -197427600000, -178934400000, -165718800000, -147398400000, -134269200000, -116467200000, -102646800000, -84326400000, -71110800000, -52704000000, -39488400000, -21168000000, -7952400000, 10368000000, 23583600000, 41904000000, 55119600000, 73526400000, 86742000000, 105062400000, 118278000000, 136598400000, 149814000000, 168134400000, 181350000000, 199756800000, 212972400000, 231292800000, 241916400000, 262828800000, 273452400000, 418694400000, 433810800000, 450316800000, 465433200000, 508896000000, 529196400000, 541555200000, 562633200000, 574387200000, 594255600000, 607305600000, 623199600000, 638928000000, 654649200000, 670456800000, 686264400000, 702684000000, 717886800000, 733096800000, 748904400000, 765151200000, 780958800000, 796687200000, 812494800000, 828309600000, 844117200000, 859759200000, 875653200000, 891208800000, 907189200000, 922917600000, 938725200000, 954540000000, 970347600000, 986076000000, 1001883600000, 1017612000000, 1033419600000, 1049148000000, 1064955600000, 1080770400000, 1096578000000, 1112306400000, 1128114000000, 1143842400000, 1158872400000, 1175205600000, 1193950800000, 1207260000000, 1225486800000, 1238104800000, 1256850000000, 1270159200000, 1288299600000, 1301608800000, 1319749200000, 1333058400000, 1351198800000, 1364508000000, 1382648400000, 1395957600000, 1414702800000, 1427407200000, 1446152400000, 1458856800000, 1477602000000, 1490911200000, 1509051600000, 1522360800000, 1540501200000, 1553810400000, 1571950800000, 1585260000000, 1604005200000, 1616709600000, 1635454800000, 1648159200000, 1666904400000 ]),
    Int32List.fromList

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone dhaka = DynamicTimezone(
    'Asia/Dhaka',
    DynamicTimezoneSpan(
      -1,
      21700000,
      'LMT',
      TimezoneSpan.range.min,
      -2524543300,
      dst: false,
    ),
    Int64List.fromList([ -2524543300000, -891582800000, -872058600000, -862637400000, -576138600000, 1245430800000, 1262278800000 ]),
    Int32List.fromList([ 21200000, 23400000, 19800000, 23400000, 21600000, 25200000, 21600000 ]),
    [ 'HMT', '+0630', '+0530', '+0630', '+06', '+07', '+06' ],
    [ false, false, false, false, false, true, false ],
  );

  static final Timezone dili = DynamicTimezone(
    'Asia/Dili',
    DynamicTimezoneSpan(
      -1,
      30140000,
      'LMT',
      TimezoneSpan.range.min,
      -1830414140,
      dst: false,
    ),
    Int64List.fromList([ -1830414140000, -879152400000, 199897200000, 969120000000 ]),
    Int32List.fromList([ 28800000, 32400000, 28800000, 32400000 ]),
    [ '+08', '+09', '+08', '+09' ],
    [ false, false, false, false ],
  );

  static final Timezone dubai = DynamicTimezone(
    'Asia/Dubai',
    DynamicTimezoneSpan(
      -1,
      13272000,
      'LMT',
      TimezoneSpan.range.min,
      -1577936472,
      dst: false,
    ),
    Int64List.fromList([ -1577936472000 ]),
    Int32List.fromList([ 14400000 ]),
    [ '+04' ],
    [ false ],
  );

  static final Timezone dushanbe = DynamicTimezone(
    'Asia/Dushanbe',
    DynamicTimezoneSpan(
      -1,
      16512000,
      'LMT',
      TimezoneSpan.range.min,
      -1441168512,
      dst: false,
    ),
    Int64List.fromList([ -1441168512000, -1247547600000, 354909600000, 370717200000, 386445600000, 402253200000, 417981600000, 433789200000, 449604000000, 465336000000, 481060800000, 496785600000, 512510400000, 528235200000, 543960000000, 559684800000, 575409600000, 591134400000, 606859200000, 622584000000, 638308800000, 654638400000, 670363200000, 684363600000 ]),
    Int32List.fromList([ 18000000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 21600000, 18000000 ]),
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone famagusta = DynamicTimezone(
    'Asia/Famagusta',
    DynamicTimezoneSpan(
      -1,
      8148000,
      'LMT',
      TimezoneSpan.range.min,
      -1518920148,
      dst: false,
    ),
    Int64List.fromList([ -1518920148000, 166572000000, 182293200000, 200959200000, 213829200000, 228866400000, 243982800000, 260316000000, 276123600000, 291765600000, 307486800000, 323820000000, 338936400000, 354664800000, 370386000000, 386114400000, 401835600000, 417564000000, 433285200000, 449013600000, 465339600000, 481068000000, 496789200000, 512517600000, 528238800000, 543967200000, 559688400000, 575416800000, 591138000000, 606866400000, 622587600000, 638316000000, 654642000000, 670370400000, 686091600000, 701820000000, 717541200000, 733269600000, 748990800000, 764719200000, 780440400000, 796168800000, 811890000000, 828223200000, 843944400000, 859672800000, 875394000000, 891122400000, 909277200000, 922582800000, 941331600000, 954032400000, 972781200000, 985482000000, 1004230800000, 1017536400000, 1035680400000, 1048986000000, 1067130000000, 1080435600000, 1099184400000, 1111885200000, 1130634000000, 1143334800000, 1162083600000, 1174784400000, 1193533200000, 1206838800000, 1224982800000, 1238288400000, 1256432400000, 1269738000000, 1288486800000, 1301187600000, 1319936400000, 1332637200000, 1351386000000, 1364691600000, 1382835600000, 1396141200000, 1414285200000, 1427590800000, 1445734800000, 1459040400000, 1473282000000, 1509238800000, 1521939600000, 1540688400000, 1553994000000, 1572138000000, 1585443600000, 1603587600000, 1616893200000, 1635642000000, 1648342800000, 1667091600000, 1679792400000, 1698541200000, 1711846800000, 1729990800000, 1743296400000, 1761440400000, 1774746000000, 1792890000000, 1806195600000, 1824944400000, 1837645200000, 1856394000000, 1869094800000, 1887843600000, 1901149200000, 1919293200000, 1932598800000, 1950742800000, 1964048400000, 1982797200000, 1995498000000, 2014246800000, 2026947600000, 2045696400000, 2058397200000, 2077146000000, 2090451600000, 2108595600000, 2121901200000, 2140045200000 ]),
    Int32List.fromList

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone gaza = DynamicTimezone(
    'Asia/Gaza',
    DynamicTimezoneSpan(
      -1,
      8272000,
      'LMT',
      TimezoneSpan.range.min,
      -2185409872,
      dst: false,
    ),
    Int64List.fromList([ -2185409872000, -933638400000, -923097600000, -919036800000, -857347200000, -844300800000, -825811200000, -812678400000, -794188800000, -779846400000, -762652800000, -748310400000, -731116800000, -682653600000, -399088800000, -386650800000, -368330400000, -355114800000, -336790800000, -323654400000, -305168400000, -292032000000, -273632400000, -260496000000, -242096400000, -228960000000, -210560400000, -197424000000, -178938000000, -165801600000, -147402000000, -134265600000, -115866000000, -102643200000, -84330000000, -81313200000, 142380000000, 150843600000, 167176800000, 178664400000, 334101600000, 337730400000, 452642400000, 462319200000, 482277600000, 494370000000, 516751200000, 526424400000, 545436000000, 558478800000, 576626400000, 589323600000, 609890400000, 620773200000, 638316000000, 651618000000, 669765600000, 683672400000, 701820000000, 715726800000, 733701600000, 747176400000, 765151200000, 778021200000, 796600800000, 810075600000, 820447200000, 828655200000, 843170400000, 860104800000, 874620000000, 891554400000, 906069600000, 915141600000, 924213600000, 939934800000, 956268000000, 971989200000, 987717600000, 1003438800000, 1019167200000, 1034888400000, 1050616800000, 1066338000000, 1082066400000, 1096581600000, 1113516000000, 1128380400000, 1143842400000, 1158872400000, 1175378400000, 1189638000000, 1206655200000, 1219957200000, 1238104800000, 1252015200000, 1269640860000, 1281474000000, 1301608860000, 1312146000000, 1333058400000, 1348178400000, 1364508000000, 1380229200000, 1395957600000, 1414098000000, 1427493600000, 1445551200000, 1458946800000, 1477692000000, 1490396400000, 1509141600000, 1521846000000, 1540591200000, 1553810400000, 1572037200000, 1585346400000, 1603490400000, 1616796000000, 1635458400000, 1648332000000, 1666998000000, 1682726400000, 1698447600000, 1712966400000, 1729897200000, 1743811200000, 1761346800000, 1774656000000, 1792796400000, 1806105600000, 1824850800000, 1837555200000, 1856300400000, 1869004800000, 1887750000000, 1901059200000, 1919199600000, 1932508800000, 1950649200000, 1963958400000, 1982703600000, 1995408000000, 2014153200000, 2026857600000, 2045602800000, 2058307200000, 2077052400000, 2090361600000, 2107897200000, 2121811200000, 2138742000000, 2153260800000, 2168982000000, 2184710400000, 2199826800000, 2202854400000, 2203455600000, 2216160000000, 2230066800000, 2233699200000, 2234905200000, 2248214400000, 2260911600000, 2263939200000, 2266354800000, 2279664000000, 2291756400000, 2294784000000, 2297804400000, 2311113600000, 2321996400000, 2325628800000, 2329254000000, 2342563200000, 2352841200000, 2355868800000, 2361308400000, 2374012800000, 2383686000000, 2386713600000, 2392758000000, 2405462400000, 2413926000000, 2417558400000, 2424207600000, 2437516800000, 2444770800000, 2447798400000, 2455657200000, 2468966400000, 2475010800000, 2478643200000, 2487106800000, 2500416000000, 2505855600000, 2508883200000, 2519161200000, 2531865600000, 2536700400000, 2539728000000, 2550610800000, 2563315200000, 2566940400000, 2570572800000, 2582060400000, 2595369600000, 2597785200000, 2600812800000, 2613510000000, 2626819200000, 2628025200000, 2631657600000, 2644959600000, 2658268800000, 2658870000000, 2662502400000, 2676409200000, 2692742400000, 2708463600000, 2723587200000, 2739913200000, 2753827200000, 2771362800000, 2784672000000, 2802812400000, 2816121600000, 2834262000000, 2847571200000, 2866316400000, 2879020800000, 2897766000000, 2910470400000, 2929215600000, 2941920000000, 2960665200000, 2973974400000, 2992114800000, 3005424000000, 3023564400000, 3036873600000, 3055618800000, 3068323200000, 3087068400000, 3099772800000, 3117913200000, 3131827200000, 3148758000000, 3163276800000, 3179602800000, 3194726400000, 3209842800000, 3226176000000, 3240687600000, 3243715200000, 3271532400000, 3274560000000, 3301772400000, 3305404800000, 3332617200000, 3335644800000, 3339270000000, 3352579200000, 3362857200000, 3366489600000, 3370719600000, 3384028800000, 3393702000000, 3397334400000, 3402774000000, 3415478400000, 3424546800000, 3427574400000, 3434223600000, 3446928000000, 3454786800000, 3458419200000, 3465673200000, 3478982400000, 3485631600000, 3488659200000, 3497122800000, 3510432000000, 3516476400000, 3519504000000, 3528572400000, 3541881600000, 3546716400000, 3550348800000, 3560022000000, 3573331200000, 3577561200000, 3580588800000, 3592076400000, 3604780800000, 3607801200000, 3611433600000, 3623526000000, 3636230400000, 3638646000000, 3642278400000, 3654975600000, 3668284800000, 3669490800000, 3672518400000, 3686425200000, 3699734400000, 3717874800000, 3731184000000, 3749929200000, 3762633600000, 3781378800000, 3794083200000, 3812828400000, 3825532800000, 3844278000000, 3857587200000, 3875727600000, 3889036800000, 3907177200000, 3920486400000, 3939231600000, 3951936000000, 3970681200000, 3983385600000, 4002130800000, 4015440000000, 4033580400000, 4046889600000, 4065030000000, 4078339200000, 4096479600000, 4109788800000, 4128534000000, 4141238400000, 4159983600000, 4172688000000, 4191433200000, 4204137600000, 4222882800000, 4236192000000, 4254332400000, 4267641600000, 4285782000000, 4299091200000, 4317836400000, 4330540800000, 4349286000000, 4361990400000, 4380735600000, 4394044800000, 4412185200000, 4425494400000, 4443634800000, 4456944000000, 4475084400000, 4488393600000, 4507138800000, 4519843200000, 4538588400000, 4551292800000, 4570038000000, 4583347200000, 4601487600000, 4614796800000, 4632937200000, 4646246400000, 4664991600000, 4677696000000, 4696441200000, 4709145600000, 4727890800000, 4741200000000, 4759340400000, 4772649600000, 4790790000000, 4804099200000, 4822239600000, 4835548800000, 4854294000000, 4866998400000, 4885743600000, 4898448000000, 4917193200000, 4930502400000, 4948642800000, 4961952000000, 4980092400000, 4993401600000, 5012146800000, 5024851200000, 5043596400000, 5056300800000, 5075046000000, 5087750400000, 5106495600000, 5119804800000, 5137945200000, 5151254400000, 5169394800000, 5182704000000, 5201449200000, 5214153600000, 5232898800000, 5245603200000, 5264348400000, 5277657600000, 5295798000000, 5309107200000, 5327247600000, 5340556800000, 5358697200000, 5372006400000, 5390751600000, 5403456000000, 5422201200000, 5434905600000, 5453650800000, 5466960000000, 5485100400000, 5498409600000, 5516550000000, 5529859200000, 5548604400000, 5561308800000, 5580054000000, 5592758400000, 5611503600000, 5624812800000, 5642953200000, 5656262400000, 5674402800000, 5687712000000, 5705852400000, 5719161600000, 5737906800000, 5750611200000, 5769356400000, 5782060800000, 5800806000000, 5814115200000, 5832255600000, 5845564800000, 5863705200000, 5877014400000, 5895759600000, 5908464000000, 5927209200000, 5939913600000, 5958658800000, 5971363200000, 5990108400000, 6003417600000, 6021558000000, 6034867200000, 6053007600000, 6066316800000, 6085062000000, 6097766400000, 6116511600000, 6129216000000, 6147961200000, 6161270400000, 6179410800000, 6192720000000, 6210860400000, 6224169600000, 6242310000000, 6255619200000, 6274364400000, 6287068800000, 6305814000000, 6318518400000, 6337263600000, 6350572800000, 6368713200000, 6382022400000, 6400162800000, 6413472000000, 6432217200000, 6444921600000, 6463666800000, 6476371200000, 6495116400000, 6508425600000, 6526566000000, 6539875200000, 6558015600000, 6571324800000, 6589465200000, 6602774400000, 6621519600000, 6634224000000, 6652969200000, 6665673600000, 6684418800000, 6697728000000, 6715868400000, 6729177600000, 6747318000000, 6760627200000, 6779372400000, 6792076800000, 6810822000000, 6823526400000, 6842271600000, 6854976000000, 6873721200000, 6887030400000, 6905170800000, 6918480000000, 6936620400000, 6949929600000, 6968674800000, 6981379200000, 7000124400000, 7012828800000, 7031574000000, 7044883200000, 7063023600000, 7076332800000, 7094473200000, 7107782400000, 7125922800000, 7139232000000, 7157977200000, 7170681600000, 7189426800000, 7202131200000, 7220876400000, 7234185600000, 7252326000000, 7265635200000, 7283775600000, 7297084800000, 7315225200000, 7328534400000, 7347279600000, 7359984000000, 7378729200000, 7391433600000, 7410178800000, 7423488000000, 7441628400000, 7454937600000, 7473078000000, 7486387200000, 7504527600000, 7517836800000, 7536582000000, 7549286400000, 7568031600000, 7580736000000, 7599481200000, 7612790400000, 7630930800000, 7644240000000, 7662380400000, 7675689600000, 7694434800000, 7707139200000, 7725884400000, 7738588800000, 7757334000000, 7770643200000, 7788783600000, 7802092800000, 7820233200000, 7833542400000, 7851682800000, 7864992000000, 7883737200000, 7896441600000, 7915186800000, 7927891200000, 7946636400000, 7959945600000, 7978086000000, 7991395200000, 8009535600000, 8022844800000, 8041590000000, 8054294400000, 8073039600000, 8085744000000, 8104489200000, 8117193600000, 8135938800000, 8149248000000, 8167388400000, 8180697600000, 8198838000000, 8212147200000, 8230892400000, 8243596800000, 8262342000000, 8275046400000, 8293791600000, 8307100800000, 8325241200000, 8338550400000, 8356690800000, 8370000000000, 8388140400000, 8401449600000, 8420194800000, 8432899200000, 8451644400000, 8464348800000, 8483094000000, 8496403200000, 8514543600000, 8527852800000, 8545993200000, 8559302400000, 8578047600000, 8590752000000, 8609497200000, 8622201600000, 8640946800000, 8654256000000, 8672396400000, 8685705600000, 8703846000000, 8717155200000, 8735295600000, 8748604800000, 8767350000000, 8780054400000, 8798799600000, 8811504000000, 8830249200000, 8843558400000, 8861698800000, 8875008000000, 8893148400000, 8906457600000, 8925202800000, 8937907200000, 8956652400000, 8969356800000, 8988102000000, 9000806400000, 9019551600000, 9032860800000, 9051001200000, 9064310400000, 9082450800000, 9095760000000, 9114505200000, 9127209600000, 9145954800000, 9158659200000, 9177404400000, 9190713600000, 9208854000000, 9222163200000, 9240303600000, 9253612800000, 9271753200000, 9285062400000, 9303807600000, 9316512000000, 9335257200000, 9347961600000, 9366706800000, 9380016000000, 9398156400000, 9411465600000, 9429606000000, 9442915200000, 9461660400000, 9474364800000, 9493110000000, 9505814400000, 9524559600000, 9537868800000, 9556009200000, 9569318400000, 9587458800000, 9600768000000, 9618908400000, 9632217600000, 9650962800000, 9663667200000, 9682412400000, 9695116800000, 9713862000000, 9727171200000, 9745311600000, 9758620800000, 9776761200000, 9790070400000, 9808815600000, 9821520000000, 9840265200000, 9852969600000, 9871714800000, 9884419200000, 9903164400000, 9916473600000, 9934614000000, 9947923200000, 9966063600000, 9979372800000, 9998118000000, 10010822400000, 10029567600000, 10042272000000, 10061017200000, 10074326400000, 10092466800000, 10105776000000, 10123916400000, 10137225600000, 10155366000000, 10168675200000, 10187420400000, 10200124800000, 10218870000000, 10231574400000, 10250319600000, 10263628800000, 10281769200000, 10295078400000, 10313218800000, 10326528000000, 10345273200000, 10357977600000, 10376722800000, 10389427200000, 10408172400000, 10420876800000, 10439622000000, 10452931200000, 10471071600000, 10484380800000, 10502521200000, 10515830400000, 10533970800000, 10547280000000, 10566025200000, 10578729600000, 10597474800000, 10610179200000, 10628924400000, 10642233600000, 10660374000000, 10673683200000, 10691823600000, 10705132800000, 10723878000000, 10736582400000, 10755327600000, 10768032000000, 10786777200000, 10800086400000, 10818226800000, 10831536000000, 10849676400000, 10862985600000, 10881126000000, 10894435200000, 10913180400000, 10925884800000, 10944630000000, 10957334400000, 10976079600000, 10989388800000, 11007529200000, 11020838400000, 11038978800000, 11052288000000, 11071033200000, 11083737600000, 11102482800000, 11115187200000, 11133932400000, 11146636800000, 11165382000000, 11178691200000, 11196831600000, 11210140800000, 11228281200000, 11241590400000, 11260335600000, 11273040000000, 11291785200000, 11304489600000, 11323234800000, 11336544000000, 11354684400000, 11367993600000, 11386134000000, 11399443200000, 11417583600000, 11430892800000, 11449638000000, 11462342400000, 11481087600000, 11493792000000, 11512537200000, 11525846400000, 11543986800000, 11557296000000, 11575436400000, 11588745600000, 11607490800000, 11620195200000, 11638940400000, 11651644800000, 11670390000000, 11683699200000, 11701839600000, 11715148800000, 11733289200000, 11746598400000, 11764738800000, 11778048000000, 11796793200000, 11809497600000, 11828242800000, 11840947200000, 11859692400000, 11873001600000, 11891142000000, 11904451200000, 11922591600000, 11935900800000, 11954646000000, 11967350400000, 11986095600000, 11998800000000, 12017545200000, 12030249600000, 12048994800000, 12062304000000, 12080444400000, 12093753600000, 12111894000000, 12125203200000, 12143948400000, 12156652800000, 12175398000000, 12188102400000, 12206847600000, 12220156800000, 12238297200000, 12251606400000, 12269746800000, 12283056000000, 12301196400000, 12314505600000, 12333250800000, 12345955200000, 12364700400000, 12377404800000, 12396150000000, 12409459200000, 12427599600000, 12440908800000, 12459049200000, 12472358400000, 12491103600000, 12503808000000, 12522553200000, 12535257600000, 12554002800000, 12567312000000, 12585452400000, 12598761600000, 12616902000000, 12630211200000, 12648351600000, 12661660800000, 12680406000000, 12693110400000, 12711855600000, 12724560000000, 12743305200000, 12756614400000, 12774754800000, 12788064000000, 12806204400000, 12819513600000, 12838258800000, 12850963200000, 12869708400000, 12882412800000, 12901158000000, 12913862400000, 12932607600000, 12945916800000, 12964057200000, 12977366400000, 12995506800000, 13008816000000, 13027561200000, 13040265600000, 13059010800000, 13071715200000, 13090460400000, 13103769600000, 13121910000000, 13135219200000, 13153359600000, 13166668800000, 13184809200000, 13198118400000, 13216863600000, 13229568000000, 13248313200000, 13261017600000, 13279762800000, 13293072000000, 13311212400000, 13324521600000, 13342662000000, 13355971200000, 13374716400000, 13387420800000, 13406166000000, 13418870400000, 13437615600000, 13450924800000, 13469065200000, 13482374400000, 13500514800000, 13513824000000, 13531964400000, 13545273600000, 13564018800000, 13576723200000, 13595468400000, 13608172800000, 13626918000000, 13640227200000, 13658367600000, 13671676800000, 13689817200000, 13703126400000, 13721871600000, 13734576000000, 13753321200000, 13766025600000, 13784770800000, 13797475200000, 13816220400000, 13829529600000, 13847670000000, 13860979200000, 13879119600000, 13892428800000, 13911174000000, 13923878400000, 13942623600000, 13955328000000, 13974073200000, 13987382400000, 14005522800000, 14018832000000, 14036972400000, 14050281600000, 14068422000000, 14081731200000, 14100476400000, 14113180800000, 14131926000000, 14144630400000, 14163375600000, 14176684800000, 14194825200000, 14208134400000, 14226274800000, 14239584000000, 14258329200000, 14271033600000, 14289778800000, 14302483200000, 14321228400000, 14334537600000, 14352678000000, 14365987200000, 14384127600000, 14397436800000, 14415577200000, 14428886400000, 14447631600000, 14460336000000, 14479081200000, 14491785600000, 14510530800000, 14523840000000, 14541980400000, 14555289600000, 14573430000000, 14586739200000, 14605484400000, 14618188800000, 14636934000000, 14649638400000, 14668383600000, 14681088000000, 14699833200000, 14713142400000, 14731282800000, 14744592000000, 14762732400000, 14776041600000, 14794786800000, 14807491200000, 14826236400000, 14838940800000, 14857686000000, 14870995200000, 14889135600000, 14902444800000, 14920585200000, 14933894400000, 14952034800000, 14965344000000, 14984089200000, 14996793600000, 15015538800000, 15028243200000, 15046988400000, 15060297600000, 15078438000000, 15091747200000, 15109887600000, 15123196800000, 15141942000000, 15154646400000, 15173391600000, 15186096000000, 15204841200000, 15218150400000, 15236290800000, 15249600000000, 15267740400000, 15281049600000, 15299190000000, 15312499200000, 15331244400000, 15343948800000, 15362694000000, 15375398400000, 15394143600000, 15407452800000, 15425593200000, 15438902400000, 15457042800000, 15470352000000, 15489097200000, 15501801600000, 15520546800000, 15533251200000, 15551996400000, 15564700800000, 15583446000000, 15596755200000, 15614895600000, 15628204800000, 15646345200000, 15659654400000, 15678399600000, 15691104000000, 15709849200000, 15722553600000, 15741298800000, 15754608000000, 15772748400000, 15786057600000, 15804198000000, 15817507200000, 15835647600000, 15848956800000, 15867702000000, 15880406400000, 15899151600000, 15911856000000, 15930601200000, 15943910400000, 15962050800000, 15975360000000, 15993500400000, 16006809600000, 16025554800000, 16038259200000, 16057004400000, 16069708800000, 16088454000000, 16101763200000, 16119903600000, 16133212800000, 16151353200000, 16164662400000, 16182802800000, 16196112000000, 16214857200000, 16227561600000, 16246306800000, 16259011200000, 16277756400000, 16291065600000, 16309206000000 ]),
    Int32List.fromList
    [ 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone harbin = DynamicTimezone(
    'Asia/Harbin',
    DynamicTimezoneSpan(
      -1,
      29143000,
      'LMT',
      TimezoneSpan.range.min,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943000, -1600675200000, -1585904400000, -933667200000, -922093200000, -908870400000, -888829200000, -881049600000, -767869200000, -745833600000, -733827600000, -716889600000, -699613200000, -683884800000, -670669200000, -652348800000, -650019600000, 515527200000, 527014800000, 545162400000, 558464400000, 577216800000, 589914000000, 608666400000, 621968400000, 640116000000, 653418000000, 671565600000, 684867600000 ]),
    Int32List.fromList([ 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone hebron = DynamicTimezone(
    'Asia/Hebron',
    DynamicTimezoneSpan(
      -1,
      8423000,
      'LMT',
      TimezoneSpan.range.min,
      -2185410023,
      dst: false,
    ),
    Int64List.fromList([ -2185410023000, -933638400000, -923097600000, -919036800000, -857347200000, -844300800000, -825811200000, -812678400000, -794188800000, -779846400000, -762652800000, -748310400000, -731116800000, -682653600000, -399088800000, -386650800000, -368330400000, -355114800000, -336790800000, -323654400000, -305168400000, -292032000000, -273632400000, -260496000000, -242096400000, -228960000000, -210560400000, -197424000000, -178938000000, -165801600000, -147402000000, -134265600000, -115866000000, -102643200000, -84330000000, -81313200000, 142380000000, 150843600000, 167176800000, 178664400000, 334101600000, 337730400000, 452642400000, 462319200000, 482277600000, 494370000000, 516751200000, 526424400000, 545436000000, 558478800000, 576626400000, 589323600000, 609890400000, 620773200000, 638316000000, 651618000000, 669765600000, 683672400000, 701820000000, 715726800000, 733701600000, 747176400000, 765151200000, 778021200000, 796600800000, 810075600000, 820447200000, 828655200000, 843170400000, 860104800000, 874620000000, 891554400000, 906069600000, 915141600000, 924213600000, 939934800000, 956268000000, 971989200000, 987717600000, 1003438800000, 1019167200000, 1034888400000, 1050616800000, 1066338000000, 1082066400000, 1096581600000, 1113516000000, 1128380400000, 1143842400000, 1158872400000, 1175378400000, 1189638000000, 1206655200000, 1220216400000, 1238104800000, 1252015200000, 1269554400000, 1281474000000, 1301608860000, 1312146000000, 1314655200000, 1317330000000, 1333058400000, 1348178400000, 1364508000000, 1380229200000, 1395957600000, 1414098000000, 1427493600000, 1445551200000, 1458946800000, 1477692000000, 1490396400000, 1509141600000, 1521846000000, 1540591200000, 1553810400000, 1572037200000, 1585346400000, 1603490400000, 1616796000000, 1635458400000, 1648332000000, 1666998000000, 1682726400000, 1698447600000, 1712966400000, 1729897200000, 1743811200000, 1761346800000, 1774656000000, 1792796400000, 1806105600000, 1824850800000, 1837555200000, 1856300400000, 1869004800000, 1887750000000, 1901059200000, 1919199600000, 1932508800000, 1950649200000, 1963958400000, 1982703600000, 1995408000000, 2014153200000, 2026857600000, 2045602800000, 2058307200000, 2077052400000, 2090361600000, 2107897200000, 2121811200000, 2138742000000, 2153260800000, 2168982000000, 2184710400000, 2199826800000, 2202854400000, 2203455600000, 2216160000000, 2230066800000, 2233699200000, 2234905200000, 2248214400000, 2260911600000, 2263939200000, 2266354800000, 2279664000000, 2291756400000, 2294784000000, 2297804400000, 2311113600000, 2321996400000, 2325628800000, 2329254000000, 2342563200000, 2352841200000, 2355868800000, 2361308400000, 2374012800000, 2383686000000, 2386713600000, 2392758000000, 2405462400000, 2413926000000, 2417558400000, 2424207600000, 2437516800000, 2444770800000, 2447798400000, 2455657200000, 2468966400000, 2475010800000, 2478643200000, 2487106800000, 2500416000000, 2505855600000, 2508883200000, 2519161200000, 2531865600000, 2536700400000, 2539728000000, 2550610800000, 2563315200000, 2566940400000, 2570572800000, 2582060400000, 2595369600000, 2597785200000, 2600812800000, 2613510000000, 2626819200000, 2628025200000, 2631657600000, 2644959600000, 2658268800000, 2658870000000, 2662502400000, 2676409200000, 2692742400000, 2708463600000, 2723587200000, 2739913200000, 2753827200000, 2771362800000, 2784672000000, 2802812400000, 2816121600000, 2834262000000, 2847571200000, 2866316400000, 2879020800000, 2897766000000, 2910470400000, 2929215600000, 2941920000000, 2960665200000, 2973974400000, 2992114800000, 3005424000000, 3023564400000, 3036873600000, 3055618800000, 3068323200000, 3087068400000, 3099772800000, 3117913200000, 3131827200000, 3148758000000, 3163276800000, 3179602800000, 3194726400000, 3209842800000, 3226176000000, 3240687600000, 3243715200000, 3271532400000, 3274560000000, 3301772400000, 3305404800000, 3332617200000, 3335644800000, 3339270000000, 3352579200000, 3362857200000, 3366489600000, 3370719600000, 3384028800000, 3393702000000, 3397334400000, 3402774000000, 3415478400000, 3424546800000, 3427574400000, 3434223600000, 3446928000000, 3454786800000, 3458419200000, 3465673200000, 3478982400000, 3485631600000, 3488659200000, 3497122800000, 3510432000000, 3516476400000, 3519504000000, 3528572400000, 3541881600000, 3546716400000, 3550348800000, 3560022000000, 3573331200000, 3577561200000, 3580588800000, 3592076400000, 3604780800000, 3607801200000, 3611433600000, 3623526000000, 3636230400000, 3638646000000, 3642278400000, 3654975600000, 3668284800000, 3669490800000, 3672518400000, 3686425200000, 3699734400000, 3717874800000, 3731184000000, 3749929200000, 3762633600000, 3781378800000, 3794083200000, 3812828400000, 3825532800000, 3844278000000, 3857587200000, 3875727600000, 3889036800000, 3907177200000, 3920486400000, 3939231600000, 3951936000000, 3970681200000, 3983385600000, 4002130800000, 4015440000000, 4033580400000, 4046889600000, 4065030000000, 4078339200000, 4096479600000, 4109788800000, 4128534000000, 4141238400000, 4159983600000, 4172688000000, 4191433200000, 4204137600000, 4222882800000, 4236192000000, 4254332400000, 4267641600000, 4285782000000, 4299091200000, 4317836400000, 4330540800000, 4349286000000, 4361990400000, 4380735600000, 4394044800000, 4412185200000, 4425494400000, 4443634800000, 4456944000000, 4475084400000, 4488393600000, 4507138800000, 4519843200000, 4538588400000, 4551292800000, 4570038000000, 4583347200000, 4601487600000, 4614796800000, 4632937200000, 4646246400000, 4664991600000, 4677696000000, 4696441200000, 4709145600000, 4727890800000, 4741200000000, 4759340400000, 4772649600000, 4790790000000, 4804099200000, 4822239600000, 4835548800000, 4854294000000, 4866998400000, 4885743600000, 4898448000000, 4917193200000, 4930502400000, 4948642800000, 4961952000000, 4980092400000, 4993401600000, 5012146800000, 5024851200000, 5043596400000, 5056300800000, 5075046000000, 5087750400000, 5106495600000, 5119804800000, 5137945200000, 5151254400000, 5169394800000, 5182704000000, 5201449200000, 5214153600000, 5232898800000, 5245603200000, 5264348400000, 5277657600000, 5295798000000, 5309107200000, 5327247600000, 5340556800000, 5358697200000, 5372006400000, 5390751600000, 5403456000000, 5422201200000, 5434905600000, 5453650800000, 5466960000000, 5485100400000, 5498409600000, 5516550000000, 5529859200000, 5548604400000, 5561308800000, 5580054000000, 5592758400000, 5611503600000, 5624812800000, 5642953200000, 5656262400000, 5674402800000, 5687712000000, 5705852400000, 5719161600000, 5737906800000, 5750611200000, 5769356400000, 5782060800000, 5800806000000, 5814115200000, 5832255600000, 5845564800000, 5863705200000, 5877014400000, 5895759600000, 5908464000000, 5927209200000, 5939913600000, 5958658800000, 5971363200000, 5990108400000, 6003417600000, 6021558000000, 6034867200000, 6053007600000, 6066316800000, 6085062000000, 6097766400000, 6116511600000, 6129216000000, 6147961200000, 6161270400000, 6179410800000, 6192720000000, 6210860400000, 6224169600000, 6242310000000, 6255619200000, 6274364400000, 6287068800000, 6305814000000, 6318518400000, 6337263600000, 6350572800000, 6368713200000, 6382022400000, 6400162800000, 6413472000000, 6432217200000, 6444921600000, 6463666800000, 6476371200000, 6495116400000, 6508425600000, 6526566000000, 6539875200000, 6558015600000, 6571324800000, 6589465200000, 6602774400000, 6621519600000, 6634224000000, 6652969200000, 6665673600000, 6684418800000, 6697728000000, 6715868400000, 6729177600000, 6747318000000, 6760627200000, 6779372400000, 6792076800000, 6810822000000, 6823526400000, 6842271600000, 6854976000000, 6873721200000, 6887030400000, 6905170800000, 6918480000000, 6936620400000, 6949929600000, 6968674800000, 6981379200000, 7000124400000, 7012828800000, 7031574000000, 7044883200000, 7063023600000, 7076332800000, 7094473200000, 7107782400000, 7125922800000, 7139232000000, 7157977200000, 7170681600000, 7189426800000, 7202131200000, 7220876400000, 7234185600000, 7252326000000, 7265635200000, 7283775600000, 7297084800000, 7315225200000, 7328534400000, 7347279600000, 7359984000000, 7378729200000, 7391433600000, 7410178800000, 7423488000000, 7441628400000, 7454937600000, 7473078000000, 7486387200000, 7504527600000, 7517836800000, 7536582000000, 7549286400000, 7568031600000, 7580736000000, 7599481200000, 7612790400000, 7630930800000, 7644240000000, 7662380400000, 7675689600000, 7694434800000, 7707139200000, 7725884400000, 7738588800000, 7757334000000, 7770643200000, 7788783600000, 7802092800000, 7820233200000, 7833542400000, 7851682800000, 7864992000000, 7883737200000, 7896441600000, 7915186800000, 7927891200000, 7946636400000, 7959945600000, 7978086000000, 7991395200000, 8009535600000, 8022844800000, 8041590000000, 8054294400000, 8073039600000, 8085744000000, 8104489200000, 8117193600000, 8135938800000, 8149248000000, 8167388400000, 8180697600000, 8198838000000, 8212147200000, 8230892400000, 8243596800000, 8262342000000, 8275046400000, 8293791600000, 8307100800000, 8325241200000, 8338550400000, 8356690800000, 8370000000000, 8388140400000, 8401449600000, 8420194800000, 8432899200000, 8451644400000, 8464348800000, 8483094000000, 8496403200000, 8514543600000, 8527852800000, 8545993200000, 8559302400000, 8578047600000, 8590752000000, 8609497200000, 8622201600000, 8640946800000, 8654256000000, 8672396400000, 8685705600000, 8703846000000, 8717155200000, 8735295600000, 8748604800000, 8767350000000, 8780054400000, 8798799600000, 8811504000000, 8830249200000, 8843558400000, 8861698800000, 8875008000000, 8893148400000, 8906457600000, 8925202800000, 8937907200000, 8956652400000, 8969356800000, 8988102000000, 9000806400000, 9019551600000, 9032860800000, 9051001200000, 9064310400000, 9082450800000, 9095760000000, 9114505200000, 9127209600000, 9145954800000, 9158659200000, 9177404400000, 9190713600000, 9208854000000, 9222163200000, 9240303600000, 9253612800000, 9271753200000, 9285062400000, 9303807600000, 9316512000000, 9335257200000, 9347961600000, 9366706800000, 9380016000000, 9398156400000, 9411465600000, 9429606000000, 9442915200000, 9461660400000, 9474364800000, 9493110000000, 9505814400000, 9524559600000, 9537868800000, 9556009200000, 9569318400000, 9587458800000, 9600768000000, 9618908400000, 9632217600000, 9650962800000, 9663667200000, 9682412400000, 9695116800000, 9713862000000, 9727171200000, 9745311600000, 9758620800000, 9776761200000, 9790070400000, 9808815600000, 9821520000000, 9840265200000, 9852969600000, 9871714800000, 9884419200000, 9903164400000, 9916473600000, 9934614000000, 9947923200000, 9966063600000, 9979372800000, 9998118000000, 10010822400000, 10029567600000, 10042272000000, 10061017200000, 10074326400000, 10092466800000, 10105776000000, 10123916400000, 10137225600000, 10155366000000, 10168675200000, 10187420400000, 10200124800000, 10218870000000, 10231574400000, 10250319600000, 10263628800000, 10281769200000, 10295078400000, 10313218800000, 10326528000000, 10345273200000, 10357977600000, 10376722800000, 10389427200000, 10408172400000, 10420876800000, 10439622000000, 10452931200000, 10471071600000, 10484380800000, 10502521200000, 10515830400000, 10533970800000, 10547280000000, 10566025200000, 10578729600000, 10597474800000, 10610179200000, 10628924400000, 10642233600000, 10660374000000, 10673683200000, 10691823600000, 10705132800000, 10723878000000, 10736582400000, 10755327600000, 10768032000000, 10786777200000, 10800086400000, 10818226800000, 10831536000000, 10849676400000, 10862985600000, 10881126000000, 10894435200000, 10913180400000, 10925884800000, 10944630000000, 10957334400000, 10976079600000, 10989388800000, 11007529200000, 11020838400000, 11038978800000, 11052288000000, 11071033200000, 11083737600000, 11102482800000, 11115187200000, 11133932400000, 11146636800000, 11165382000000, 11178691200000, 11196831600000, 11210140800000, 11228281200000, 11241590400000, 11260335600000, 11273040000000, 11291785200000, 11304489600000, 11323234800000, 11336544000000, 11354684400000, 11367993600000, 11386134000000, 11399443200000, 11417583600000, 11430892800000, 11449638000000, 11462342400000, 11481087600000, 11493792000000, 11512537200000, 11525846400000, 11543986800000, 11557296000000, 11575436400000, 11588745600000, 11607490800000, 11620195200000, 11638940400000, 11651644800000, 11670390000000, 11683699200000, 11701839600000, 11715148800000, 11733289200000, 11746598400000, 11764738800000, 11778048000000, 11796793200000, 11809497600000, 11828242800000, 11840947200000, 11859692400000, 11873001600000, 11891142000000, 11904451200000, 11922591600000, 11935900800000, 11954646000000, 11967350400000, 11986095600000, 11998800000000, 12017545200000, 12030249600000, 12048994800000, 12062304000000, 12080444400000, 12093753600000, 12111894000000, 12125203200000, 12143948400000, 12156652800000, 12175398000000, 12188102400000, 12206847600000, 12220156800000, 12238297200000, 12251606400000, 12269746800000, 12283056000000, 12301196400000, 12314505600000, 12333250800000, 12345955200000, 12364700400000, 12377404800000, 12396150000000, 12409459200000, 12427599600000, 12440908800000, 12459049200000, 12472358400000, 12491103600000, 12503808000000, 12522553200000, 12535257600000, 12554002800000, 12567312000000, 12585452400000, 12598761600000, 12616902000000, 12630211200000, 12648351600000, 12661660800000, 12680406000000, 12693110400000, 12711855600000, 12724560000000, 12743305200000, 12756614400000, 12774754800000, 12788064000000, 12806204400000, 12819513600000, 12838258800000, 12850963200000, 12869708400000, 12882412800000, 12901158000000, 12913862400000, 12932607600000, 12945916800000, 12964057200000, 12977366400000, 12995506800000, 13008816000000, 13027561200000, 13040265600000, 13059010800000, 13071715200000, 13090460400000, 13103769600000, 13121910000000, 13135219200000, 13153359600000, 13166668800000, 13184809200000, 13198118400000, 13216863600000, 13229568000000, 13248313200000, 13261017600000, 13279762800000, 13293072000000, 13311212400000, 13324521600000, 13342662000000, 13355971200000, 13374716400000, 13387420800000, 13406166000000, 13418870400000, 13437615600000, 13450924800000, 13469065200000, 13482374400000, 13500514800000, 13513824000000, 13531964400000, 13545273600000, 13564018800000, 13576723200000, 13595468400000, 13608172800000, 13626918000000, 13640227200000, 13658367600000, 13671676800000, 13689817200000, 13703126400000, 13721871600000, 13734576000000, 13753321200000, 13766025600000, 13784770800000, 13797475200000, 13816220400000, 13829529600000, 13847670000000, 13860979200000, 13879119600000, 13892428800000, 13911174000000, 13923878400000, 13942623600000, 13955328000000, 13974073200000, 13987382400000, 14005522800000, 14018832000000, 14036972400000, 14050281600000, 14068422000000, 14081731200000, 14100476400000, 14113180800000, 14131926000000, 14144630400000, 14163375600000, 14176684800000, 14194825200000, 14208134400000, 14226274800000, 14239584000000, 14258329200000, 14271033600000, 14289778800000, 14302483200000, 14321228400000, 14334537600000, 14352678000000, 14365987200000, 14384127600000, 14397436800000, 14415577200000, 14428886400000, 14447631600000, 14460336000000, 14479081200000, 14491785600000, 14510530800000, 14523840000000, 14541980400000, 14555289600000, 14573430000000, 14586739200000, 14605484400000, 14618188800000, 14636934000000, 14649638400000, 14668383600000, 14681088000000, 14699833200000, 14713142400000, 14731282800000, 14744592000000, 14762732400000, 14776041600000, 14794786800000, 14807491200000, 14826236400000, 14838940800000, 14857686000000, 14870995200000, 14889135600000, 14902444800000, 14920585200000, 14933894400000, 14952034800000, 14965344000000, 14984089200000, 14996793600000, 15015538800000, 15028243200000, 15046988400000, 15060297600000, 15078438000000, 15091747200000, 15109887600000, 15123196800000, 15141942000000, 15154646400000, 15173391600000, 15186096000000, 15204841200000, 15218150400000, 15236290800000, 15249600000000, 15267740400000, 15281049600000, 15299190000000, 15312499200000, 15331244400000, 15343948800000, 15362694000000, 15375398400000, 15394143600000, 15407452800000, 15425593200000, 15438902400000, 15457042800000, 15470352000000, 15489097200000, 15501801600000, 15520546800000, 15533251200000, 15551996400000, 15564700800000, 15583446000000, 15596755200000, 15614895600000, 15628204800000, 15646345200000, 15659654400000, 15678399600000, 15691104000000, 15709849200000, 15722553600000, 15741298800000, 15754608000000, 15772748400000, 15786057600000, 15804198000000, 15817507200000, 15835647600000, 15848956800000, 15867702000000, 15880406400000, 15899151600000, 15911856000000, 15930601200000, 15943910400000, 15962050800000, 15975360000000, 15993500400000, 16006809600000, 16025554800000, 16038259200000, 16057004400000, 16069708800000, 16088454000000, 16101763200000, 16119903600000, 16133212800000, 16151353200000, 16164662400000, 16182802800000, 16196112000000, 16214857200000, 16227561600000, 16246306800000, 16259011200000, 16277756400000, 16291065600000, 16309206000000 ]),
    Int32List.fromList
    [ 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone hoChiMinh = DynamicTimezone(
    'Asia/Ho_Chi_Minh',
    DynamicTimezoneSpan(
      -1,
      25590000,
      'LMT',
      TimezoneSpan.range.min,
      -2004073590,
      dst: false,
    ),
    Int64List.fromList([ -2004073590000, -1851577590000, -852105600000, -782643600000, -767869200000, -718095600000, -457776000000, -315648000000, 171820800000 ]),
    Int32List.fromList([ 25590000, 25200000, 28800000, 32400000, 25200000, 28800000, 25200000, 28800000, 25200000 ]),
    [ 'PLMT', '+07', '+08', '+09', '+07', '+08', '+07', '+08', '+07' ],
    [ false, false, false, false, false, false, false, false, false ],
  );

  static final Timezone hongKong = DynamicTimezone(
    'Asia/Hong_Kong',
    DynamicTimezoneSpan(
      -1,
      27402000,
      'LMT',
      TimezoneSpan.range.min,
      -2056690800,
      dst: false,
    ),
    Int64List.fromList([ -2056690800000, -900910800000, -891579600000, -884248200000, -761209200000, -747907200000, -728541000000, -717049800000, -697091400000, -683785800000, -668061000000, -654755400000, -636611400000, -623305800000, -605161800000, -591856200000, -573712200000, -559801800000, -541657800000, -528352200000, -510211800000, -498112200000, -478762200000, -466662600000, -446707800000, -435213000000, -415258200000, -403158600000, -383808600000, -371709000000, -352359000000, -340259400000, -320909400000, -308809800000, -288855000000, -277360200000, -257405400000, -245910600000, -225955800000, -213856200000, -194506200000, -182406600000, -163056600000, -148537800000, -132816600000, -117088200000, -101367000000, -85638600000, -69312600000, -53584200000, -37863000000, -22134600000, -6413400000, 9315000000, 25036200000, 40764600000, 56485800000, 72214200000, 88540200000, 104268600000, 119989800000, 126041400000, 151439400000, 167167800000, 182889000000, 198617400000, 214338600000, 295385400000, 309292200000 ]),
    Int32List.fromList
    [ 'HKT', 'HKST', 'HKWT', 'JST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT' ],
    [ false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone hovd = DynamicTimezone(
    'Asia/Hovd',
    DynamicTimezoneSpan(
      -1,
      21996000,
      'LMT',
      TimezoneSpan.range.min,
      -2032927596,
      dst: false,
    ),
    Int64List.fromList([ -2032927596000, 252439200000, 417978000000, 433785600000, 449600400000, 465321600000, 481050000000, 496771200000, 512499600000, 528220800000, 543949200000, 559670400000, 575398800000, 591120000000, 606848400000, 622569600000, 638298000000, 654624000000, 670352400000, 686073600000, 701802000000, 717523200000, 733251600000, 748972800000, 764701200000, 780422400000, 796150800000, 811872000000, 828205200000, 843926400000, 859654800000, 875376000000, 891104400000, 906825600000, 988398000000, 1001700000000, 1017428400000, 1033149600000, 1048878000000, 1064599200000, 1080327600000, 1096048800000, 1111777200000, 1127498400000, 1143226800000, 1159552800000, 1427482800000, 1443196800000, 1458932400000, 1474646400000 ]),
    Int32List.fromList
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone irkutsk = DynamicTimezone(
    'Asia/Irkutsk',
    DynamicTimezoneSpan(
      -1,
      25025000,
      'LMT',
      TimezoneSpan.range.min,
      -2840165825,
      dst: false,
    ),
    Int64List.fromList([ -2840165825000, -1575874625000, -1247554800000, 354902400000, 370710000000, 386438400000, 402246000000, 417974400000, 433782000000, 449596800000, 465328800000, 481053600000, 496778400000, 512503200000, 528228000000, 543952800000, 559677600000, 575402400000, 591127200000, 606852000000, 622576800000, 638301600000, 654631200000, 670356000000, 686084400000, 695761200000, 701805600000, 717530400000, 733255200000, 748980000000, 764704800000, 780429600000, 796154400000, 811879200000, 828208800000, 846352800000, 859658400000, 877802400000, 891108000000, 909252000000, 922557600000, 941306400000, 954007200000, 972756000000, 985456800000, 1004205600000, 1017511200000, 1035655200000, 1048960800000, 1067104800000, 1080410400000, 1099159200000, 1111860000000, 1130608800000, 1143309600000, 1162058400000, 1174759200000, 1193508000000, 1206813600000, 1224957600000, 1238263200000, 1256407200000, 1269712800000, 1288461600000, 1301162400000, 1414256400000 ]),
    Int32List.fromList([ 25025000, 25200000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 28800000, 25200000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'IMT', '+07', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+08', '+07', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone istanbul = DynamicTimezone(
    'Asia/Istanbul',
    DynamicTimezoneSpan(
      -1,
      6952000,
      'LMT',
      TimezoneSpan.range.min,
      -2840147752,
      dst: false,
    ),
    Int64List.fromList([ -2840147752000, -1869875816000, -1693706400000, -1680490800000, -1570413600000, -1552186800000, -1538359200000, -1522551600000, -1507514400000, -1490583600000, -1440208800000, -1428030000000, -1409709600000, -1396494000000, -931053600000, -922676400000, -917834400000, -892436400000, -875844000000, -764737200000, -744343200000, -733806000000, -716436000000, -701924400000, -684986400000, -670474800000, -654141600000, -639025200000, -622087200000, -606970800000, -590032800000, -575521200000, -235620000000, -194842800000, -177732000000, -165726000000, 107910000000, 121215600000, 133920000000, 152665200000, 164678400000, 184114800000, 196214400000, 215564400000, 228873600000, 245804400000, 260323200000, 267915600000, 428454000000, 433893600000, 468111600000, 482799600000, 496710000000, 512521200000, 528246000000, 543970800000, 559695600000, 575420400000, 591145200000, 606870000000, 622594800000, 638319600000, 654649200000, 670374000000, 686098800000, 701823600000, 717548400000, 733273200000, 748998000000, 764118000000, 780447600000, 796172400000, 811897200000, 828226800000, 846370800000, 859676400000, 877820400000, 891126000000, 909270000000, 922575600000, 941324400000, 954025200000, 972774000000, 985474800000, 1004223600000, 1017529200000, 1035673200000, 1048978800000, 1067122800000, 1080428400000, 1099177200000, 1111878000000, 1130626800000, 1143327600000, 1162076400000, 1167602400000, 1174784400000, 1193533200000, 1206838800000, 1224982800000, 1238288400000, 1256432400000, 1269738000000, 1288486800000, 1301274000000, 1319936400000, 1332637200000, 1351386000000, 1364691600000, 1382835600000, 1396227600000, 1414285200000, 1427590800000, 1446944400000, 1459040400000, 1473195600000 ]),
    Int32List.fromList([ 7016000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 10800000, 14400000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 10800000 ]),
    [ 'IMT', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', '+03', '+04', '+03', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', '+03' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone jakarta = DynamicTimezone(
    'Asia/Jakarta',
    DynamicTimezoneSpan(
      -1,
      25632000,
      'LMT',
      TimezoneSpan.range.min,
      -3231299232,
      dst: false,
    ),
    Int64List.fromList([ -3231299232000, -1451719200000, -1172906400000, -876641400000, -766054800000, -683883000000, -620812800000, -189415800000 ]),
    Int32List.fromList([ 25632000, 26400000, 27000000, 32400000, 27000000, 28800000, 27000000, 25200000 ]),
    [ 'BMT', '+0720', '+0730', '+09', '+0730', '+08', '+0730', 'WIB' ],
    [ false, false, false, false, false, false, false, false ],
  );

  static final Timezone jayapura = DynamicTimezone(
    'Asia/Jayapura',
    DynamicTimezoneSpan(
      -1,
      33768000,
      'LMT',
      TimezoneSpan.range.min,
      -1172913768,
      dst: false,
    ),
    Int64List.fromList([ -1172913768000, -799491600000, -189423000000 ]),
    Int32List.fromList([ 32400000, 34200000, 32400000 ]),
    [ '+09', '+0930', 'WIT' ],
    [ false, false, false ],
  );

  static final Timezone jerusalem = DynamicTimezone(
    'Asia/Jerusalem',
    DynamicTimezoneSpan(
      -1,
      8454000,
      'LMT',
      TimezoneSpan.range.min,
      -2840149254,
      dst: false,
    ),
    Int64List.fromList([ -2840149254000, -1641003640000, -933638400000, -923097600000, -919036800000, -857347200000, -844300800000, -825811200000, -812678400000, -794188800000, -779846400000, -762652800000, -748310400000, -731116800000, -681955200000, -673228800000, -667958400000, -652320000000, -636422400000, -622080000000, -608947200000, -591840000000, -572486400000, -558576000000, -542851200000, -527731200000, -514425600000, -490838400000, -482976000000, -459388800000, -451526400000, -428544000000, -418262400000, -400118400000, -387417600000, 142380000000, 150843600000, 167176800000, 178664400000, 334101600000, 337730400000, 452642400000, 462319200000, 482277600000, 494370000000, 516751200000, 526424400000, 545436000000, 558478800000, 576626400000, 589323600000, 609890400000, 620773200000, 638316000000, 651618000000, 669765600000, 683672400000, 701820000000, 715726800000, 733701600000, 747176400000, 765151200000, 778021200000, 796600800000, 810075600000, 826840800000, 842821200000, 858895200000, 874184400000, 890344800000, 905029200000, 923011200000, 936313200000, 955670400000, 970783200000, 986770800000, 1001282400000, 1017356400000, 1033941600000, 1048806000000, 1065132000000, 1081292400000, 1095804000000, 1112313600000, 1128812400000, 1143763200000, 1159657200000, 1175212800000, 1189897200000, 1206662400000, 1223161200000, 1238112000000, 1254006000000, 1269561600000, 1284246000000, 1301616000000, 1317510000000, 1333065600000, 1348354800000, 1364515200000, 1382828400000, 1395964800000, 1414278000000, 1427414400000, 1445727600000, 1458864000000, 1477782000000, 1490313600000, 1509231600000, 1521763200000, 1540681200000, 1553817600000, 1572130800000, 1585267200000, 1603580400000, 1616716800000, 1635634800000, 1648166400000, 1667084400000, 1679616000000, 1698534000000, 1711670400000, 1729983600000, 1743120000000, 1761433200000, 1774569600000, 1792882800000, 1806019200000, 1824937200000, 1837468800000, 1856386800000, 1868918400000, 1887836400000, 1900972800000, 1919286000000, 1932422400000, 1950735600000, 1963872000000, 1982790000000, 1995321600000, 2014239600000, 2026771200000, 2045689200000, 2058220800000, 2077138800000, 2090275200000, 2108588400000, 2121724800000, 2140038000000, 2153174400000, 2172092400000, 2184624000000, 2203542000000, 2216073600000, 2234991600000, 2248128000000, 2266441200000, 2279577600000, 2297890800000, 2311027200000, 2329340400000, 2342476800000, 2361394800000, 2373926400000, 2392844400000, 2405376000000, 2424294000000, 2437430400000, 2455743600000, 2468880000000, 2487193200000, 2500329600000, 2519247600000, 2531779200000, 2550697200000, 2563228800000, 2582146800000, 2595283200000, 2613596400000, 2626732800000, 2645046000000, 2658182400000, 2676495600000, 2689632000000, 2708550000000, 2721081600000, 2739999600000, 2752531200000, 2771449200000, 2784585600000, 2802898800000, 2816035200000, 2834348400000, 2847484800000, 2866402800000, 2878934400000, 2897852400000, 2910384000000, 2929302000000, 2941833600000, 2960751600000, 2973888000000, 2992201200000, 3005337600000, 3023650800000, 3036787200000, 3055705200000, 3068236800000, 3087154800000, 3099686400000, 3118604400000, 3131740800000, 3150054000000, 3163190400000, 3181503600000, 3194640000000, 3212953200000, 3226089600000, 3245007600000, 3257539200000, 3276457200000, 3288988800000, 3307906800000, 3321043200000, 3339356400000, 3352492800000, 3370806000000, 3383942400000, 3402860400000, 3415392000000, 3434310000000, 3446841600000, 3465759600000, 3478896000000, 3497209200000, 3510345600000, 3528658800000, 3541795200000, 3560108400000, 3573244800000, 3592162800000, 3604694400000, 3623612400000, 3636144000000, 3655062000000, 3668198400000, 3686511600000, 3699648000000, 3717961200000, 3731097600000, 3750015600000, 3762547200000, 3781465200000, 3793996800000, 3812914800000, 3825446400000, 3844364400000, 3857500800000, 3875814000000, 3888950400000, 3907263600000, 3920400000000, 3939318000000, 3951849600000, 3970767600000, 3983299200000, 4002217200000, 4015353600000, 4033666800000, 4046803200000, 4065116400000, 4078252800000, 4096566000000, 4109702400000, 4128620400000, 4141152000000, 4160070000000, 4172601600000, 4191519600000, 4204051200000, 4222969200000, 4236105600000, 4254418800000, 4267555200000, 4285868400000, 4299004800000, 4317922800000, 4330454400000, 4349372400000, 4361904000000, 4380822000000, 4393958400000, 4412271600000, 4425408000000, 4443721200000, 4456857600000, 4475170800000, 4488307200000, 4507225200000, 4519756800000, 4538674800000, 4551206400000, 4570124400000, 4583260800000, 4601574000000, 4614710400000, 4633023600000, 4646160000000, 4665078000000, 4677609600000, 4696527600000, 4709059200000, 4727977200000, 4741113600000, 4759426800000, 4772563200000, 4790876400000, 4804012800000, 4822326000000, 4835462400000, 4854380400000, 4866912000000, 4885830000000, 4898361600000, 4917279600000, 4930416000000, 4948729200000, 4961865600000, 4980178800000, 4993315200000, 5012233200000, 5024764800000, 5043682800000, 5056214400000, 5075132400000, 5087664000000, 5106582000000, 5119718400000, 5138031600000, 5151168000000, 5169481200000, 5182617600000, 5201535600000, 5214067200000, 5232985200000, 5245516800000, 5264434800000, 5277571200000, 5295884400000, 5309020800000, 5327334000000, 5340470400000, 5358783600000, 5371920000000, 5390838000000, 5403369600000, 5422287600000, 5434819200000, 5453737200000, 5466873600000, 5485186800000, 5498323200000, 5516636400000, 5529772800000, 5548690800000, 5561222400000, 5580140400000, 5592672000000, 5611590000000, 5624726400000, 5643039600000, 5656176000000, 5674489200000, 5687625600000, 5705938800000, 5719075200000, 5737993200000, 5750524800000, 5769442800000, 5781974400000, 5800892400000, 5814028800000, 5832342000000, 5845478400000, 5863791600000, 5876928000000, 5895846000000, 5908377600000, 5927295600000, 5939827200000, 5958745200000, 5971276800000, 5990194800000, 6003331200000, 6021644400000, 6034780800000, 6053094000000, 6066230400000, 6085148400000, 6097680000000, 6116598000000, 6129129600000, 6148047600000, 6161184000000, 6179497200000, 6192633600000, 6210946800000, 6224083200000, 6242396400000, 6255532800000, 6274450800000, 6286982400000, 6305900400000, 6318432000000, 6337350000000, 6350486400000, 6368799600000, 6381936000000, 6400249200000, 6413385600000, 6432303600000, 6444835200000, 6463753200000, 6476284800000, 6495202800000, 6508339200000, 6526652400000, 6539788800000, 6558102000000, 6571238400000, 6589551600000, 6602688000000, 6621606000000, 6634137600000, 6653055600000, 6665587200000, 6684505200000, 6697641600000, 6715954800000, 6729091200000, 6747404400000, 6760540800000, 6779458800000, 6791990400000, 6810908400000, 6823440000000, 6842358000000, 6854889600000, 6873807600000, 6886944000000, 6905257200000, 6918393600000, 6936706800000, 6949843200000, 6968761200000, 6981292800000, 7000210800000, 7012742400000, 7031660400000, 7044796800000, 7063110000000, 7076246400000, 7094559600000, 7107696000000, 7126009200000, 7139145600000, 7158063600000, 7170595200000, 7189513200000, 7202044800000, 7220962800000, 7234099200000, 7252412400000, 7265548800000, 7283862000000, 7296998400000, 7315311600000, 7328448000000, 7347366000000, 7359897600000, 7378815600000, 7391347200000, 7410265200000, 7423401600000, 7441714800000, 7454851200000, 7473164400000, 7486300800000, 7504614000000, 7517750400000, 7536668400000, 7549200000000, 7568118000000, 7580649600000, 7599567600000, 7612704000000, 7631017200000, 7644153600000, 7662466800000, 7675603200000, 7694521200000, 7707052800000, 7725970800000, 7738502400000, 7757420400000, 7770556800000, 7788870000000, 7802006400000, 7820319600000, 7833456000000, 7851769200000, 7864905600000, 7883823600000, 7896355200000, 7915273200000, 7927804800000, 7946722800000, 7959859200000, 7978172400000, 7991308800000, 8009622000000, 8022758400000, 8041676400000, 8054208000000, 8073126000000, 8085657600000, 8104575600000, 8117107200000, 8136025200000, 8149161600000, 8167474800000, 8180611200000, 8198924400000, 8212060800000, 8230978800000, 8243510400000, 8262428400000, 8274960000000, 8293878000000, 8307014400000, 8325327600000, 8338464000000, 8356777200000, 8369913600000, 8388226800000, 8401363200000, 8420281200000, 8432812800000, 8451730800000, 8464262400000, 8483180400000, 8496316800000, 8514630000000, 8527766400000, 8546079600000, 8559216000000, 8578134000000, 8590665600000, 8609583600000, 8622115200000, 8641033200000, 8654169600000, 8672482800000, 8685619200000, 8703932400000, 8717068800000, 8735382000000, 8748518400000, 8767436400000, 8779968000000, 8798886000000, 8811417600000, 8830335600000, 8843472000000, 8861785200000, 8874921600000, 8893234800000, 8906371200000, 8925289200000, 8937820800000, 8956738800000, 8969270400000, 8988188400000, 9000720000000, 9019638000000, 9032774400000, 9051087600000, 9064224000000, 9082537200000, 9095673600000, 9114591600000, 9127123200000, 9146041200000, 9158572800000, 9177490800000, 9190627200000, 9208940400000, 9222076800000, 9240390000000, 9253526400000, 9271839600000, 9284976000000, 9303894000000, 9316425600000, 9335343600000, 9347875200000, 9366793200000, 9379929600000, 9398242800000, 9411379200000, 9429692400000, 9442828800000, 9461746800000, 9474278400000, 9493196400000, 9505728000000, 9524646000000, 9537782400000, 9556095600000, 9569232000000, 9587545200000, 9600681600000, 9618994800000, 9632131200000, 9651049200000, 9663580800000, 9682498800000, 9695030400000, 9713948400000, 9727084800000, 9745398000000, 9758534400000, 9776847600000, 9789984000000, 9808902000000, 9821433600000, 9840351600000, 9852883200000, 9871801200000, 9884332800000, 9903250800000, 9916387200000, 9934700400000, 9947836800000, 9966150000000, 9979286400000, 9998204400000, 10010736000000, 10029654000000, 10042185600000, 10061103600000, 10074240000000, 10092553200000, 10105689600000, 10124002800000, 10137139200000, 10155452400000, 10168588800000, 10187506800000, 10200038400000, 10218956400000, 10231488000000, 10250406000000, 10263542400000, 10281855600000, 10294992000000, 10313305200000, 10326441600000, 10345359600000, 10357891200000, 10376809200000, 10389340800000, 10408258800000, 10420790400000, 10439708400000, 10452844800000, 10471158000000, 10484294400000, 10502607600000, 10515744000000, 10534057200000, 10547193600000, 10566111600000, 10578643200000, 10597561200000, 10610092800000, 10629010800000, 10642147200000, 10660460400000, 10673596800000, 10691910000000, 10705046400000, 10723964400000, 10736496000000, 10755414000000, 10767945600000, 10786863600000, 10800000000000, 10818313200000, 10831449600000, 10849762800000, 10862899200000, 10881212400000, 10894348800000, 10913266800000, 10925798400000, 10944716400000, 10957248000000, 10976166000000, 10989302400000, 11007615600000, 11020752000000, 11039065200000, 11052201600000, 11071119600000, 11083651200000, 11102569200000, 11115100800000, 11134018800000, 11146550400000, 11165468400000, 11178604800000, 11196918000000, 11210054400000, 11228367600000, 11241504000000, 11260422000000, 11272953600000, 11291871600000, 11304403200000, 11323321200000, 11336457600000, 11354770800000, 11367907200000, 11386220400000, 11399356800000, 11417670000000, 11430806400000, 11449724400000, 11462256000000, 11481174000000, 11493705600000, 11512623600000, 11525760000000, 11544073200000, 11557209600000, 11575522800000, 11588659200000, 11607577200000, 11620108800000, 11639026800000, 11651558400000, 11670476400000, 11683612800000, 11701926000000, 11715062400000, 11733375600000, 11746512000000, 11764825200000, 11777961600000, 11796879600000, 11809411200000, 11828329200000, 11840860800000, 11859778800000, 11872915200000, 11891228400000, 11904364800000, 11922678000000, 11935814400000, 11954732400000, 11967264000000, 11986182000000, 11998713600000, 12017631600000, 12030163200000, 12049081200000, 12062217600000, 12080530800000, 12093667200000, 12111980400000, 12125116800000, 12144034800000, 12156566400000, 12175484400000, 12188016000000, 12206934000000, 12220070400000, 12238383600000, 12251520000000, 12269833200000, 12282969600000, 12301282800000, 12314419200000, 12333337200000, 12345868800000, 12364786800000, 12377318400000, 12396236400000, 12409372800000, 12427686000000, 12440822400000, 12459135600000, 12472272000000, 12491190000000, 12503721600000, 12522639600000, 12535171200000, 12554089200000, 12567225600000, 12585538800000, 12598675200000, 12616988400000, 12630124800000, 12648438000000, 12661574400000, 12680492400000, 12693024000000, 12711942000000, 12724473600000, 12743391600000, 12756528000000, 12774841200000, 12787977600000, 12806290800000, 12819427200000, 12838345200000, 12850876800000, 12869794800000, 12882326400000, 12901244400000, 12913776000000, 12932694000000, 12945830400000, 12964143600000, 12977280000000, 12995593200000, 13008729600000, 13027647600000, 13040179200000, 13059097200000, 13071628800000, 13090546800000, 13103683200000, 13121996400000, 13135132800000, 13153446000000, 13166582400000, 13184895600000, 13198032000000, 13216950000000, 13229481600000, 13248399600000, 13260931200000, 13279849200000, 13292985600000, 13311298800000, 13324435200000, 13342748400000, 13355884800000, 13374802800000, 13387334400000, 13406252400000, 13418784000000, 13437702000000, 13450838400000, 13469151600000, 13482288000000, 13500601200000, 13513737600000, 13532050800000, 13545187200000, 13564105200000, 13576636800000, 13595554800000, 13608086400000, 13627004400000, 13640140800000, 13658454000000, 13671590400000, 13689903600000, 13703040000000, 13721958000000, 13734489600000, 13753407600000, 13765939200000, 13784857200000, 13797388800000, 13816306800000, 13829443200000, 13847756400000, 13860892800000, 13879206000000, 13892342400000, 13911260400000, 13923792000000, 13942710000000, 13955241600000, 13974159600000, 13987296000000, 14005609200000 ]),
    Int32List.fromList([ 8440000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 14400000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'JMT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDDT', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone kabul = DynamicTimezone(
    'Asia/Kabul',
    DynamicTimezoneSpan(
      -1,
      16608000,
      'LMT',
      TimezoneSpan.range.min,
      -2524538208,
      dst: false,
    ),
    Int64List.fromList([ -2524538208000, -788932800000 ]),
    Int32List.fromList([ 14400000, 16200000 ]),
    [ '+04', '+0430' ],
    [ false, false ],
  );

  static final Timezone kamchatka = DynamicTimezone(
    'Asia/Kamchatka',
    DynamicTimezoneSpan(
      -1,
      38076000,
      'LMT',
      TimezoneSpan.range.min,
      -1487759676,
      dst: false,
    ),
    Int64List.fromList([ -1487759676000, -1247569200000, 354888000000, 370695600000, 386424000000, 402231600000, 417960000000, 433767600000, 449582400000, 465314400000, 481039200000, 496764000000, 512488800000, 528213600000, 543938400000, 559663200000, 575388000000, 591112800000, 606837600000, 622562400000, 638287200000, 654616800000, 670341600000, 686070000000, 695746800000, 701791200000, 717516000000, 733240800000, 748965600000, 764690400000, 780415200000, 796140000000, 811864800000, 828194400000, 846338400000, 859644000000, 877788000000, 891093600000, 909237600000, 922543200000, 941292000000, 953992800000, 972741600000, 985442400000, 1004191200000, 1017496800000, 1035640800000, 1048946400000, 1067090400000, 1080396000000, 1099144800000, 1111845600000, 1130594400000, 1143295200000, 1162044000000, 1174744800000, 1193493600000, 1206799200000, 1224943200000, 1238248800000, 1256392800000, 1269698400000, 1288450800000, 1301151600000 ]),
    Int32List.fromList
    [ '+11', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+12', '+11', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+12', '+11', '+12' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone karachi = DynamicTimezone(
    'Asia/Karachi',
    DynamicTimezoneSpan(
      -1,
      16092000,
      'LMT',
      TimezoneSpan.range.min,
      -1988166492,
      dst: false,
    ),
    Int64List.fromList([ -1988166492000, -862637400000, -764145000000, -576135000000, 38775600000, 1018119600000, 1033840800000, 1212260400000, 1225476000000, 1239735600000, 1257012000000 ]),
    Int32List.fromList([ 19800000, 23400000, 19800000, 18000000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000 ]),
    [ '+0530', '+0630', '+0530', '+05', 'PKT', 'PKST', 'PKT', 'PKST', 'PKT', 'PKST', 'PKT' ],
    [ false, true, false, false, false, true, false, true, false, true, false ],
  );

  static final Timezone kashgar = DynamicTimezone(
    'Asia/Kashgar',
    DynamicTimezoneSpan(
      -1,
      21020000,
      'LMT',
      TimezoneSpan.range.min,
      -1325483420,
      dst: false,
    ),
    Int64List.fromList([ -1325483420000 ]),
    Int32List.fromList([ 21600000 ]),
    [ '+06' ],
    [ false ],
  );

  static final Timezone kathmandu = DynamicTimezone(
    'Asia/Kathmandu',
    DynamicTimezoneSpan(
      -1,
      20476000,
      'LMT',
      TimezoneSpan.range.min,
      -1577943676,
      dst: false,
    ),
    Int64List.fromList([ -1577943676000, 504901800000 ]),
    Int32List.fromList([ 19800000, 20700000 ]),
    [ '+0530', '+0545' ],
    [ false, false ],
  );

  static final Timezone katmandu = DynamicTimezone(
    'Asia/Katmandu',
    DynamicTimezoneSpan(
      -1,
      20476000,
      'LMT',
      TimezoneSpan.range.min,
      -1577943676,
      dst: false,
    ),
    Int64List.fromList([ -1577943676000, 504901800000 ]),
    Int32List.fromList([ 19800000, 20700000 ]),
    [ '+0530', '+0545' ],
    [ false, false ],
  );

  static final Timezone khandyga = DynamicTimezone(
    'Asia/Khandyga',
    DynamicTimezoneSpan(
      -1,
      32533000,
      'LMT',
      TimezoneSpan.range.min,
      -1579424533,
      dst: false,
    ),
    Int64List.fromList([ -1579424533000, -1247558400000, 354898800000, 370706400000, 386434800000, 402242400000, 417970800000, 433778400000, 449593200000, 465325200000, 481050000000, 496774800000, 512499600000, 528224400000, 543949200000, 559674000000, 575398800000, 591123600000, 606848400000, 622573200000, 638298000000, 654627600000, 670352400000, 686080800000, 695757600000, 701802000000, 717526800000, 733251600000, 748976400000, 764701200000, 780426000000, 796150800000, 811875600000, 828205200000, 846349200000, 859654800000, 877798800000, 891104400000, 909248400000, 922554000000, 941302800000, 954003600000, 972752400000, 985453200000, 1004202000000, 1017507600000, 1035651600000, 1048957200000, 1067101200000, 1072882800000, 1080403200000, 1099152000000, 1111852800000, 1130601600000, 1143302400000, 1162051200000, 1174752000000, 1193500800000, 1206806400000, 1224950400000, 1238256000000, 1256400000000, 1269705600000, 1288454400000, 1301155200000, 1315832400000, 1414252800000 ]),
    Int32List.fromList
    [ '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+09', '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+09' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone kolkata = DynamicTimezone(
    'Asia/Kolkata',
    DynamicTimezoneSpan(
      -1,
      21208000,
      'LMT',
      TimezoneSpan.range.min,
      -3645237208,
      dst: false,
    ),
    Int64List.fromList([ -3645237208000, -3155694800000, -2019705670000, -891581400000, -872058600000, -862637400000, -764145000000 ]),
    Int32List.fromList([ 21200000, 19270000, 19800000, 23400000, 19800000, 23400000, 19800000 ]),
    [ 'HMT', 'MMT', 'IST', '+0630', 'IST', '+0630', 'IST' ],
    [ false, false, false, true, false, true, false ],
  );

  static final Timezone krasnoyarsk = DynamicTimezone(
    'Asia/Krasnoyarsk',
    DynamicTimezoneSpan(
      -1,
      22286000,
      'LMT',
      TimezoneSpan.range.min,
      -1577513486,
      dst: false,
    ),
    Int64List.fromList([ -1577513486000, -1247551200000, 354906000000, 370713600000, 386442000000, 402249600000, 417978000000, 433785600000, 449600400000, 465332400000, 481057200000, 496782000000, 512506800000, 528231600000, 543956400000, 559681200000, 575406000000, 591130800000, 606855600000, 622580400000, 638305200000, 654634800000, 670359600000, 686088000000, 695764800000, 701809200000, 717534000000, 733258800000, 748983600000, 764708400000, 780433200000, 796158000000, 811882800000, 828212400000, 846356400000, 859662000000, 877806000000, 891111600000, 909255600000, 922561200000, 941310000000, 954010800000, 972759600000, 985460400000, 1004209200000, 1017514800000, 1035658800000, 1048964400000, 1067108400000, 1080414000000, 1099162800000, 1111863600000, 1130612400000, 1143313200000, 1162062000000, 1174762800000, 1193511600000, 1206817200000, 1224961200000, 1238266800000, 1256410800000, 1269716400000, 1288465200000, 1301166000000, 1414260000000 ]),
    Int32List.fromList
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone kualaLumpur = DynamicTimezone(
    'Asia/Kuala_Lumpur',
    DynamicTimezoneSpan(
      -1,
      24925000,
      'LMT',
      TimezoneSpan.range.min,
      -2177477725,
      dst: false,
    ),
    Int64List.fromList([ -2177477725000, -2038200925000, -1167634800000, -1073028000000, -894180000000, -879665400000, -767005200000, 378662400000 ]),
    Int32List.fromList([ 24925000, 25200000, 26400000, 26400000, 27000000, 32400000, 27000000, 28800000 ]),
    [ 'SMT', '+07', '+0720', '+0720', '+0730', '+09', '+0730', '+08' ],
    [ false, false, true, false, false, false, false, false ],
  );

  static final Timezone kuching = DynamicTimezone(
    'Asia/Kuching',
    DynamicTimezoneSpan(
      -1,
      26480000,
      'LMT',
      TimezoneSpan.range.min,
      -1383463280,
      dst: false,
    ),
    Int64List.fromList([ -1383463280000, -1167636600000, -1082448000000, -1074586800000, -1050825600000, -1042964400000, -1019289600000, -1011428400000, -987753600000, -979892400000, -956217600000, -948356400000, -924595200000, -916734000000, -893059200000, -885198000000, -879667200000, -767005200000 ]),
    Int32List.fromList([ 27000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 30000000, 28800000, 32400000, 28800000 ]),
    [ '+0730', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone kuwait = DynamicTimezone(
    'Asia/Kuwait',
    DynamicTimezoneSpan(
      -1,
      11212000,
      'LMT',
      TimezoneSpan.range.min,
      -719636812,
      dst: false,
    ),
    Int64List.fromList([ -719636812000 ]),
    Int32List.fromList([ 10800000 ]),
    [ '+03' ],
    [ false ],
  );

  static final Timezone macao = DynamicTimezone(
    'Asia/Macao',
    DynamicTimezoneSpan(
      -1,
      27250000,
      'LMT',
      TimezoneSpan.range.min,
      -2056692850,
      dst: false,
    ),
    Int64List.fromList([ -2056692850000, -884509200000, -873280800000, -855918000000, -841744800000, -828529200000, -765363600000, -747046800000, -733827600000, -716461200000, -697021200000, -683715600000, -667990800000, -654771600000, -636627600000, -623322000000, -605178000000, -591872400000, -573642000000, -559818000000, -541674000000, -528368400000, -510224400000, -498128400000, -478774800000, -466678800000, -446720400000, -435229200000, -415258200000, -403158600000, -383808600000, -371709000000, -352359000000, -340259400000, -320909400000, -308809800000, -288855000000, -277360200000, -257405400000, -245910600000, -225955800000, -213856200000, -194506200000, -182406600000, -163056600000, -148537800000, -132820200000, -117088200000, -101370600000, -85638600000, -69312600000, -53584200000, -37863000000, -22134600000, -6413400000, 9315000000, 25036200000, 40764600000, 56485800000, 72214200000, 88540200000, 104268600000, 119989800000, 126041400000, 151439400000, 167167800000, 182889000000, 198617400000, 214338600000, 295385400000, 309292200000 ]),
    Int32List.fromList([ 28800000, 32400000, 36000000, 32400000, 36000000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'CST', '+09', '+10', '+09', '+10', '+09', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone macau = DynamicTimezone(
    'Asia/Macau',
    DynamicTimezoneSpan(
      -1,
      27250000,
      'LMT',
      TimezoneSpan.range.min,
      -2056692850,
      dst: false,
    ),
    Int64List.fromList([ -2056692850000, -884509200000, -873280800000, -855918000000, -841744800000, -828529200000, -765363600000, -747046800000, -733827600000, -716461200000, -697021200000, -683715600000, -667990800000, -654771600000, -636627600000, -623322000000, -605178000000, -591872400000, -573642000000, -559818000000, -541674000000, -528368400000, -510224400000, -498128400000, -478774800000, -466678800000, -446720400000, -435229200000, -415258200000, -403158600000, -383808600000, -371709000000, -352359000000, -340259400000, -320909400000, -308809800000, -288855000000, -277360200000, -257405400000, -245910600000, -225955800000, -213856200000, -194506200000, -182406600000, -163056600000, -148537800000, -132820200000, -117088200000, -101370600000, -85638600000, -69312600000, -53584200000, -37863000000, -22134600000, -6413400000, 9315000000, 25036200000, 40764600000, 56485800000, 72214200000, 88540200000, 104268600000, 119989800000, 126041400000, 151439400000, 167167800000, 182889000000, 198617400000, 214338600000, 295385400000, 309292200000 ]),
    Int32List.fromList([ 28800000, 32400000, 36000000, 32400000, 36000000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'CST', '+09', '+10', '+09', '+10', '+09', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone magadan = DynamicTimezone(
    'Asia/Magadan',
    DynamicTimezoneSpan(
      -1,
      36192000,
      'LMT',
      TimezoneSpan.range.min,
      -1441188192,
      dst: false,
    ),
    Int64List.fromList([ -1441188192000, -1247565600000, 354891600000, 370699200000, 386427600000, 402235200000, 417963600000, 433771200000, 449586000000, 465318000000, 481042800000, 496767600000, 512492400000, 528217200000, 543942000000, 559666800000, 575391600000, 591116400000, 606841200000, 622566000000, 638290800000, 654620400000, 670345200000, 686073600000, 695750400000, 701794800000, 717519600000, 733244400000, 748969200000, 764694000000, 780418800000, 796143600000, 811868400000, 828198000000, 846342000000, 859647600000, 877791600000, 891097200000, 909241200000, 922546800000, 941295600000, 953996400000, 972745200000, 985446000000, 1004194800000, 1017500400000, 1035644400000, 1048950000000, 1067094000000, 1080399600000, 1099148400000, 1111849200000, 1130598000000, 1143298800000, 1162047600000, 1174748400000, 1193497200000, 1206802800000, 1224946800000, 1238252400000, 1256396400000, 1269702000000, 1288450800000, 1301151600000, 1414245600000, 1461427200000 ]),
    Int32List.fromList
    [ '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+10', '+11' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone makassar = DynamicTimezone(
    'Asia/Makassar',
    DynamicTimezoneSpan(
      -1,
      28656000,
      'LMT',
      TimezoneSpan.range.min,
      -1577951856,
      dst: false,
    ),
    Int64List.fromList([ -1577951856000, -1172908656000, -880272000000, -766054800000 ]),
    Int32List.fromList([ 28656000, 28800000, 32400000, 28800000 ]),
    [ 'MMT', '+08', '+09', 'WITA' ],
    [ false, false, false, false ],
  );

  static final Timezone manila = DynamicTimezone(
    'Asia/Manila',
    DynamicTimezoneSpan(
      -1,
      -57360000,
      'LMT',
      TimezoneSpan.range.min,
      -3944621040,
      dst: false,
    ),
    Int64List.fromList([ -3944621040000, -2229321840000, -1046678400000, -1038733200000, -873273600000, -794221200000, -496224000000, -489315600000, 259344000000, 275151600000 ]),
    Int32List.fromList([ 29040000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'LMT', 'PST', 'PDT', 'PST', 'JST', 'PST', 'PDT', 'PST', 'PDT', 'PST' ],
    [ false, false, true, false, false, false, true, false, true, false ],
  );

  static final Timezone muscat = DynamicTimezone(
    'Asia/Muscat',
    DynamicTimezoneSpan(
      -1,
      13272000,
      'LMT',
      TimezoneSpan.range.min,
      -1577936472,
      dst: false,
    ),
    Int64List.fromList([ -1577936472000 ]),
    Int32List.fromList([ 14400000 ]),
    [ '+04' ],
    [ false ],
  );

  static final Timezone nicosia = DynamicTimezone(
    'Asia/Nicosia',
    DynamicTimezoneSpan(
      -1,
      8008000,
      'LMT',
      TimezoneSpan.range.min,
      -1518920008,
      dst: false,
    ),
    Int64List.fromList([ -1518920008000, 166572000000, 182293200000, 200959200000, 213829200000, 228866400000, 243982800000, 260316000000, 276123600000, 291765600000, 307486800000, 323820000000, 338936400000, 354664800000, 370386000000, 386114400000, 401835600000, 417564000000, 433285200000, 449013600000, 465339600000, 481068000000, 496789200000, 512517600000, 528238800000, 543967200000, 559688400000, 575416800000, 591138000000, 606866400000, 622587600000, 638316000000, 654642000000, 670370400000, 686091600000, 701820000000, 717541200000, 733269600000, 748990800000, 764719200000, 780440400000, 796168800000, 811890000000, 828223200000, 843944400000, 859672800000, 875394000000, 891122400000, 909277200000, 922582800000, 941331600000, 954032400000, 972781200000, 985482000000, 1004230800000, 1017536400000, 1035680400000, 1048986000000, 1067130000000, 1080435600000, 1099184400000, 1111885200000, 1130634000000, 1143334800000, 1162083600000, 1174784400000, 1193533200000, 1206838800000, 1224982800000, 1238288400000, 1256432400000, 1269738000000, 1288486800000, 1301187600000, 1319936400000, 1332637200000, 1351386000000, 1364691600000, 1382835600000, 1396141200000, 1414285200000, 1427590800000, 1445734800000, 1459040400000, 1477789200000, 1490490000000, 1509238800000, 1521939600000, 1540688400000, 1553994000000, 1572138000000, 1585443600000, 1603587600000, 1616893200000, 1635642000000, 1648342800000, 1667091600000, 1679792400000, 1698541200000, 1711846800000, 1729990800000, 1743296400000, 1761440400000, 1774746000000, 1792890000000, 1806195600000, 1824944400000, 1837645200000, 1856394000000, 1869094800000, 1887843600000, 1901149200000, 1919293200000, 1932598800000, 1950742800000, 1964048400000, 1982797200000, 1995498000000, 2014246800000, 2026947600000, 2045696400000, 2058397200000, 2077146000000, 2090451600000, 2108595600000, 2121901200000, 2140045200000 ]),
    Int32List.fromList
    [ 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone novokuznetsk = DynamicTimezone(
    'Asia/Novokuznetsk',
    DynamicTimezoneSpan(
      -1,
      20928000,
      'LMT',
      TimezoneSpan.range.min,
      -1441259328,
      dst: false,
    ),
    Int64List.fromList([ -1441259328000, -1247551200000, 354906000000, 370713600000, 386442000000, 402249600000, 417978000000, 433785600000, 449600400000, 465332400000, 481057200000, 496782000000, 512506800000, 528231600000, 543956400000, 559681200000, 575406000000, 591130800000, 606855600000, 622580400000, 638305200000, 654634800000, 670359600000, 686088000000, 695764800000, 701809200000, 717534000000, 733258800000, 748983600000, 764708400000, 780433200000, 796158000000, 811882800000, 828212400000, 846356400000, 859662000000, 877806000000, 891111600000, 909255600000, 922561200000, 941310000000, 954010800000, 972759600000, 985460400000, 1004209200000, 1017514800000, 1035658800000, 1048964400000, 1067108400000, 1080414000000, 1099162800000, 1111863600000, 1130612400000, 1143313200000, 1162062000000, 1174762800000, 1193511600000, 1206817200000, 1224961200000, 1238266800000, 1256410800000, 1269716400000, 1288468800000, 1301169600000 ]),
    Int32List.fromList
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone novosibirsk = DynamicTimezone(
    'Asia/Novosibirsk',
    DynamicTimezoneSpan(
      -1,
      19900000,
      'LMT',
      TimezoneSpan.range.min,
      -1579476700,
      dst: false,
    ),
    Int64List.fromList([ -1579476700000, -1247551200000, 354906000000, 370713600000, 386442000000, 402249600000, 417978000000, 433785600000, 449600400000, 465332400000, 481057200000, 496782000000, 512506800000, 528231600000, 543956400000, 559681200000, 575406000000, 591130800000, 606855600000, 622580400000, 638305200000, 654634800000, 670359600000, 686088000000, 695764800000, 701809200000, 717534000000, 733258800000, 738086400000, 748987200000, 764712000000, 780436800000, 796161600000, 811886400000, 828216000000, 846360000000, 859665600000, 877809600000, 891115200000, 909259200000, 922564800000, 941313600000, 954014400000, 972763200000, 985464000000, 1004212800000, 1017518400000, 1035662400000, 1048968000000, 1067112000000, 1080417600000, 1099166400000, 1111867200000, 1130616000000, 1143316800000, 1162065600000, 1174766400000, 1193515200000, 1206820800000, 1224964800000, 1238270400000, 1256414400000, 1269720000000, 1288468800000, 1301169600000, 1414263600000, 1469304000000 ]),
    Int32List.fromList
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone omsk = DynamicTimezone(
    'Asia/Omsk',
    DynamicTimezoneSpan(
      -1,
      17610000,
      'LMT',
      TimezoneSpan.range.min,
      -1582088010,
      dst: false,
    ),
    Int64List.fromList([ -1582088010000, -1247547600000, 354909600000, 370717200000, 386445600000, 402253200000, 417981600000, 433789200000, 449604000000, 465336000000, 481060800000, 496785600000, 512510400000, 528235200000, 543960000000, 559684800000, 575409600000, 591134400000, 606859200000, 622584000000, 638308800000, 654638400000, 670363200000, 686091600000, 695768400000, 701812800000, 717537600000, 733262400000, 748987200000, 764712000000, 780436800000, 796161600000, 811886400000, 828216000000, 846360000000, 859665600000, 877809600000, 891115200000, 909259200000, 922564800000, 941313600000, 954014400000, 972763200000, 985464000000, 1004212800000, 1017518400000, 1035662400000, 1048968000000, 1067112000000, 1080417600000, 1099166400000, 1111867200000, 1130616000000, 1143316800000, 1162065600000, 1174766400000, 1193515200000, 1206820800000, 1224964800000, 1238270400000, 1256414400000, 1269720000000, 1288468800000, 1301169600000, 1414263600000 ]),
    Int32List.fromList
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone oral = DynamicTimezone(
    'Asia/Oral',
    DynamicTimezoneSpan(
      -1,
      12324000,
      'LMT',
      TimezoneSpan.range.min,
      -1441164324,
      dst: false,
    ),
    Int64List.fromList([ -1441164324000, -1247540400000, 354913200000, 370720800000, 386445600000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622591200000, 638316000000, 654645600000, 670370400000, 686095200000, 695772000000, 701816400000, 717544800000, 733269600000, 748994400000, 764719200000, 780444000000, 796168800000, 811893600000, 828223200000, 846367200000, 859672800000, 877816800000, 891122400000, 909266400000, 922572000000, 941320800000, 954021600000, 972770400000, 985471200000, 1004220000000, 1017525600000, 1035669600000, 1048975200000, 1067119200000, 1080424800000, 1099173600000 ]),
    Int32List.fromList([ 10800000, 18000000, 21600000, 21600000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 18000000 ]),
    [ '+03', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone phnomPenh = DynamicTimezone(
    'Asia/Phnom_Penh',
    DynamicTimezoneSpan(
      -1,
      24124000,
      'LMT',
      TimezoneSpan.range.min,
      -2840164924,
      dst: false,
    ),
    Int64List.fromList([ -2840164924000, -1570084924000 ]),
    Int32List.fromList([ 24124000, 25200000 ]),
    [ 'BMT', '+07' ],
    [ false, false ],
  );

  static final Timezone pontianak = DynamicTimezone(
    'Asia/Pontianak',
    DynamicTimezoneSpan(
      -1,
      26240000,
      'LMT',
      TimezoneSpan.range.min,
      -1946186240,
      dst: false,
    ),
    Int64List.fromList([ -1946186240000, -1172906240000, -881220600000, -766054800000, -683883000000, -620812800000, -189415800000, 567964800000 ]),
    Int32List.fromList([ 26240000, 27000000, 32400000, 27000000, 28800000, 27000000, 28800000, 25200000 ]),
    [ 'PMT', '+0730', '+09', '+0730', '+08', '+0730', 'WITA', 'WIB' ],
    [ false, false, false, false, false, false, false, false ],
  );

  static final Timezone pyongyang = DynamicTimezone(
    'Asia/Pyongyang',
    DynamicTimezoneSpan(
      -1,
      30180000,
      'LMT',
      TimezoneSpan.range.min,
      -1948782180,
      dst: false,
    ),
    Int64List.fromList([ -1948782180000, -1830414600000, -768646800000, 1439564400000, 1525446000000 ]),
    Int32List.fromList([ 30600000, 32400000, 32400000, 30600000, 32400000 ]),
    [ 'KST', 'JST', 'KST', 'KST', 'KST' ],
    [ false, false, false, false, false ],
  );

  static final Timezone qatar = DynamicTimezone(
    'Asia/Qatar',
    DynamicTimezoneSpan(
      -1,
      12368000,
      'LMT',
      TimezoneSpan.range.min,
      -1577935568,
      dst: false,
    ),
    Int64List.fromList([ -1577935568000, 76190400000 ]),
    Int32List.fromList([ 14400000, 10800000 ]),
    [ '+04', '+03' ],
    [ false, false ],
  );

  static final Timezone qostanay = DynamicTimezone(
    'Asia/Qostanay',
    DynamicTimezoneSpan(
      -1,
      15268000,
      'LMT',
      TimezoneSpan.range.min,
      -1441167268,
      dst: false,
    ),
    Int64List.fromList([ -1441167268000, -1247544000000, 354913200000, 370720800000, 386445600000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686095200000, 695772000000, 701816400000, 717541200000, 733266000000, 748990800000, 764715600000, 780440400000, 796165200000, 811890000000, 828219600000, 846363600000, 859669200000, 877813200000, 891118800000, 909262800000, 922568400000, 941317200000, 954018000000, 972766800000, 985467600000, 1004216400000, 1017522000000, 1035666000000, 1048971600000, 1067115600000, 1080421200000, 1099170000000 ]),
    Int32List.fromList([ 14400000, 18000000, 21600000, 21600000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 21600000 ]),
    [ '+04', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+06' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone qyzylorda = DynamicTimezone(
    'Asia/Qyzylorda',
    DynamicTimezoneSpan(
      -1,
      15712000,
      'LMT',
      TimezoneSpan.range.min,
      -1441167712,
      dst: false,
    ),
    Int64List.fromList([ -1441167712000, -1247544000000, 354913200000, 370720800000, 386445600000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686095200000, 695768400000, 701812800000, 717541200000, 733266000000, 748990800000, 764715600000, 780440400000, 796165200000, 811890000000, 828219600000, 846363600000, 859669200000, 877813200000, 891118800000, 909262800000, 922568400000, 941317200000, 954018000000, 972766800000, 985467600000, 1004216400000, 1017522000000, 1035666000000, 1048971600000, 1067115600000, 1080421200000, 1099170000000, 1545328800000 ]),
    Int32List.fromList
    [ '+04', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+05', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+06', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone rangoon = DynamicTimezone(
    'Asia/Rangoon',
    DynamicTimezoneSpan(
      -1,
      23087000,
      'LMT',
      TimezoneSpan.range.min,
      -2840163887,
      dst: false,
    ),
    Int64List.fromList([ -2840163887000, -1577946287000, -873268200000, -778410000000 ]),
    Int32List.fromList([ 23087000, 23400000, 32400000, 23400000 ]),
    [ 'RMT', '+0630', '+09', '+0630' ],
    [ false, false, false, false ],
  );

  static final Timezone riyadh = DynamicTimezone(
    'Asia/Riyadh',
    DynamicTimezoneSpan(
      -1,
      11212000,
      'LMT',
      TimezoneSpan.range.min,
      -719636812,
      dst: false,
    ),
    Int64List.fromList([ -719636812000 ]),
    Int32List.fromList([ 10800000 ]),
    [ '+03' ],
    [ false ],
  );

  static final Timezone saigon = DynamicTimezone(
    'Asia/Saigon',
    DynamicTimezoneSpan(
      -1,
      25590000,
      'LMT',
      TimezoneSpan.range.min,
      -2004073590,
      dst: false,
    ),
    Int64List.fromList([ -2004073590000, -1851577590000, -852105600000, -782643600000, -767869200000, -718095600000, -457776000000, -315648000000, 171820800000 ]),
    Int32List.fromList([ 25590000, 25200000, 28800000, 32400000, 25200000, 28800000, 25200000, 28800000, 25200000 ]),
    [ 'PLMT', '+07', '+08', '+09', '+07', '+08', '+07', '+08', '+07' ],
    [ false, false, false, false, false, false, false, false, false ],
  );

  static final Timezone sakhalin = DynamicTimezone(
    'Asia/Sakhalin',
    DynamicTimezoneSpan(
      -1,
      34248000,
      'LMT',
      TimezoneSpan.range.min,
      -2031039048,
      dst: false,
    ),
    Int64List.fromList([ -2031039048000, -768560400000, 354891600000, 370699200000, 386427600000, 402235200000, 417963600000, 433771200000, 449586000000, 465318000000, 481042800000, 496767600000, 512492400000, 528217200000, 543942000000, 559666800000, 575391600000, 591116400000, 606841200000, 622566000000, 638290800000, 654620400000, 670345200000, 686073600000, 695750400000, 701794800000, 717519600000, 733244400000, 748969200000, 764694000000, 780418800000, 796143600000, 811868400000, 828198000000, 846342000000, 859647600000, 877795200000, 891100800000, 909244800000, 922550400000, 941299200000, 954000000000, 972748800000, 985449600000, 1004198400000, 1017504000000, 1035648000000, 1048953600000, 1067097600000, 1080403200000, 1099152000000, 1111852800000, 1130601600000, 1143302400000, 1162051200000, 1174752000000, 1193500800000, 1206806400000, 1224950400000, 1238256000000, 1256400000000, 1269705600000, 1288454400000, 1301155200000, 1414249200000, 1459008000000 ]),
    Int32List.fromList
    [ '+09', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone samarkand = DynamicTimezone(
    'Asia/Samarkand',
    DynamicTimezoneSpan(
      -1,
      16073000,
      'LMT',
      TimezoneSpan.range.min,
      -1441168073,
      dst: false,
    ),
    Int64List.fromList([ -1441168073000, -1247544000000, 354913200000, 370720800000, 386445600000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686091600000, 694206000000 ]),
    Int32List.fromList([ 14400000, 18000000, 21600000, 21600000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000 ]),
    [ '+04', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone seoul = DynamicTimezone(
    'Asia/Seoul',
    DynamicTimezoneSpan(
      -1,
      30472000,
      'LMT',
      TimezoneSpan.range.min,
      -1948782472,
      dst: false,
    ),
    Int64List.fromList([ -1948782472000, -1830414600000, -767350800000, -681210000000, -672228000000, -654771600000, -640864800000, -623408400000, -609415200000, -588848400000, -577965600000, -498128400000, -462702600000, -451733400000, -429784200000, -418296600000, -399544200000, -387451800000, -368094600000, -356002200000, -336645000000, -324552600000, -305195400000, -293103000000, -264933000000, 547578000000, 560883600000, 579027600000, 592333200000 ]),
    Int32List.fromList([ 30600000, 32400000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 30600000, 34200000, 30600000, 34200000, 30600000, 34200000, 30600000, 34200000, 30600000, 34200000, 30600000, 34200000, 30600000, 32400000, 36000000, 32400000, 36000000, 32400000 ]),
    [ 'KST', 'JST', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KST', 'KDT', 'KST', 'KDT', 'KST' ],
    [ false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false ],
  );

  static final Timezone shanghai = DynamicTimezone(
    'Asia/Shanghai',
    DynamicTimezoneSpan(
      -1,
      29143000,
      'LMT',
      TimezoneSpan.range.min,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943000, -1600675200000, -1585904400000, -933667200000, -922093200000, -908870400000, -888829200000, -881049600000, -767869200000, -745833600000, -733827600000, -716889600000, -699613200000, -683884800000, -670669200000, -652348800000, -650019600000, 515527200000, 527014800000, 545162400000, 558464400000, 577216800000, 589914000000, 608666400000, 621968400000, 640116000000, 653418000000, 671565600000, 684867600000 ]),
    Int32List.fromList([ 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone singapore = DynamicTimezone(
    'Asia/Singapore',
    DynamicTimezoneSpan(
      -1,
      24925000,
      'LMT',
      TimezoneSpan.range.min,
      -2177477725,
      dst: false,
    ),
    Int64List.fromList([ -2177477725000, -2038200925000, -1167634800000, -1073028000000, -894180000000, -879665400000, -767005200000, 378662400000 ]),
    Int32List.fromList([ 24925000, 25200000, 26400000, 26400000, 27000000, 32400000, 27000000, 28800000 ]),
    [ 'SMT', '+07', '+0720', '+0720', '+0730', '+09', '+0730', '+08' ],
    [ false, false, true, false, false, false, false, false ],
  );

  static final Timezone srednekolymsk = DynamicTimezone(
    'Asia/Srednekolymsk',
    DynamicTimezoneSpan(
      -1,
      36892000,
      'LMT',
      TimezoneSpan.range.min,
      -1441188892,
      dst: false,
    ),
    Int64List.fromList([ -1441188892000, -1247565600000, 354891600000, 370699200000, 386427600000, 402235200000, 417963600000, 433771200000, 449586000000, 465318000000, 481042800000, 496767600000, 512492400000, 528217200000, 543942000000, 559666800000, 575391600000, 591116400000, 606841200000, 622566000000, 638290800000, 654620400000, 670345200000, 686073600000, 695750400000, 701794800000, 717519600000, 733244400000, 748969200000, 764694000000, 780418800000, 796143600000, 811868400000, 828198000000, 846342000000, 859647600000, 877791600000, 891097200000, 909241200000, 922546800000, 941295600000, 953996400000, 972745200000, 985446000000, 1004194800000, 1017500400000, 1035644400000, 1048950000000, 1067094000000, 1080399600000, 1099148400000, 1111849200000, 1130598000000, 1143298800000, 1162047600000, 1174748400000, 1193497200000, 1206802800000, 1224946800000, 1238252400000, 1256396400000, 1269702000000, 1288450800000, 1301151600000, 1414245600000 ]),
    Int32List.fromList
    [ '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone taipei = DynamicTimezone(
    'Asia/Taipei',
    DynamicTimezoneSpan(
      -1,
      29160000,
      'LMT',
      TimezoneSpan.range.min,
      -2335248360,
      dst: false,
    ),
    Int64List.fromList([ -2335248360000, -1017820800000, -766224000000, -745833600000, -733827600000, -716889600000, -699613200000, -683884800000, -670669200000, -652348800000, -639133200000, -620812800000, -607597200000, -589276800000, -576061200000, -562924800000, -541760400000, -528710400000, -510224400000, -497174400000, -478688400000, -465638400000, -449830800000, -434016000000, -418208400000, -402480000000, -386672400000, -370944000000, -355136400000, -339408000000, -323600400000, -302515200000, -291978000000, -270979200000, -260442000000, 133977600000, 149785200000, 165513600000, 181321200000, 299606400000, 307551600000 ]),
    Int32List.fromList([ 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000, 32400000, 28800000 ]),
    [ 'CST', 'JST', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone tashkent = DynamicTimezone(
    'Asia/Tashkent',
    DynamicTimezoneSpan(
      -1,
      16631000,
      'LMT',
      TimezoneSpan.range.min,
      -1441168631,
      dst: false,
    ),
    Int64List.fromList([ -1441168631000, -1247547600000, 354909600000, 370717200000, 386445600000, 402253200000, 417981600000, 433789200000, 449604000000, 465336000000, 481060800000, 496785600000, 512510400000, 528235200000, 543960000000, 559684800000, 575409600000, 591134400000, 606859200000, 622584000000, 638308800000, 654638400000, 670363200000, 686091600000, 694206000000 ]),
    Int32List.fromList([ 18000000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 25200000, 21600000, 21600000, 18000000, 18000000 ]),
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone tbilisi = DynamicTimezone(
    'Asia/Tbilisi',
    DynamicTimezoneSpan(
      -1,
      10751000,
      'LMT',
      TimezoneSpan.range.min,
      -2840151551,
      dst: false,
    ),
    Int64List.fromList([ -2840151551000, -1441162751000, -405140400000, 354916800000, 370724400000, 386452800000, 402260400000, 417988800000, 433796400000, 449611200000, 465343200000, 481068000000, 496792800000, 512517600000, 528242400000, 543967200000, 559692000000, 575416800000, 591141600000, 606866400000, 622591200000, 638316000000, 654645600000, 670370400000, 686098800000, 694213200000, 701816400000, 717537600000, 733266000000, 748987200000, 764715600000, 780436800000, 796161600000, 811882800000, 828216000000, 859662000000, 877806000000, 891115200000, 909255600000, 922564800000, 941310000000, 954014400000, 972759600000, 985464000000, 1004209200000, 1017518400000, 1035658800000, 1048968000000, 1067108400000, 1080417600000, 1088276400000, 1099177200000, 1111878000000 ]),
    Int32List.fromList([ 10751000, 10800000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 14400000, 10800000, 10800000, 14400000, 10800000, 14400000, 10800000, 14400000, 14400000, 18000000, 14400000, 18000000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 18000000, 14400000, 10800000, 14400000 ]),
    [ 'TBMT', '+03', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+04', '+03', '+03', '+04', '+03', '+04', '+03', '+04', '+04', '+05', '+04', '+05', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+03', '+04' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false ],
  );

  static final Timezone tehran = DynamicTimezone(
    'Asia/Tehran',
    DynamicTimezoneSpan(
      -1,
      12344000,
      'LMT',
      TimezoneSpan.range.min,
      -1704165944,
      dst: false,
    ),
    Int64List.fromList([ -1704165944000, -1090466744000, 227820600000, 246223800000, 259617600000, 271108800000, 283982400000, 296598600000, 306531000000, 322432200000, 338499000000, 673216200000, 685481400000, 701209800000, 717103800000, 732745800000, 748639800000, 764281800000, 780175800000, 795817800000, 811711800000, 827353800000, 843247800000, 858976200000, 874870200000, 890512200000, 906406200000, 922048200000, 937942200000, 953584200000, 969478200000, 985206600000, 1001100600000, 1016742600000, 1032636600000, 1048278600000, 1064172600000, 1079814600000, 1095708600000, 1111437000000, 1127331000000, 1206045000000, 1221939000000, 1237667400000, 1253561400000, 1269203400000, 1285097400000, 1300739400000, 1316633400000, 1332275400000, 1348169400000, 1363897800000, 1379791800000, 1395433800000, 1411327800000, 1426969800000, 1442863800000, 1458505800000, 1474399800000, 1490128200000, 1506022200000, 1521664200000, 1537558200000, 1553200200000, 1569094200000, 1584736200000, 1600630200000, 1616358600000, 1632252600000, 1647894600000, 1663788600000 ]),
    Int32List.fromList([ 12344000, 12600000, 16200000, 14400000, 18000000, 14400000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000, 16200000, 12600000 ]),

    [ false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone telAviv = DynamicTimezone(
    'Asia/Tel_Aviv',
    DynamicTimezoneSpan(
      -1,
      8454000,
      'LMT',
      TimezoneSpan.range.min,
      -2840149254,
      dst: false,
    ),
    Int64List.fromList([ -2840149254000, -1641003640000, -933638400000, -923097600000, -919036800000, -857347200000, -844300800000, -825811200000, -812678400000, -794188800000, -779846400000, -762652800000, -748310400000, -731116800000, -681955200000, -673228800000, -667958400000, -652320000000, -636422400000, -622080000000, -608947200000, -591840000000, -572486400000, -558576000000, -542851200000, -527731200000, -514425600000, -490838400000, -482976000000, -459388800000, -451526400000, -428544000000, -418262400000, -400118400000, -387417600000, 142380000000, 150843600000, 167176800000, 178664400000, 334101600000, 337730400000, 452642400000, 462319200000, 482277600000, 494370000000, 516751200000, 526424400000, 545436000000, 558478800000, 576626400000, 589323600000, 609890400000, 620773200000, 638316000000, 651618000000, 669765600000, 683672400000, 701820000000, 715726800000, 733701600000, 747176400000, 765151200000, 778021200000, 796600800000, 810075600000, 826840800000, 842821200000, 858895200000, 874184400000, 890344800000, 905029200000, 923011200000, 936313200000, 955670400000, 970783200000, 986770800000, 1001282400000, 1017356400000, 1033941600000, 1048806000000, 1065132000000, 1081292400000, 1095804000000, 1112313600000, 1128812400000, 1143763200000, 1159657200000, 1175212800000, 1189897200000, 1206662400000, 1223161200000, 1238112000000, 1254006000000, 1269561600000, 1284246000000, 1301616000000, 1317510000000, 1333065600000, 1348354800000, 1364515200000, 1382828400000, 1395964800000, 1414278000000, 1427414400000, 1445727600000, 1458864000000, 1477782000000, 1490313600000, 1509231600000, 1521763200000, 1540681200000, 1553817600000, 1572130800000, 1585267200000, 1603580400000, 1616716800000, 1635634800000, 1648166400000, 1667084400000, 1679616000000, 1698534000000, 1711670400000, 1729983600000, 1743120000000, 1761433200000, 1774569600000, 1792882800000, 1806019200000, 1824937200000, 1837468800000, 1856386800000, 1868918400000, 1887836400000, 1900972800000, 1919286000000, 1932422400000, 1950735600000, 1963872000000, 1982790000000, 1995321600000, 2014239600000, 2026771200000, 2045689200000, 2058220800000, 2077138800000, 2090275200000, 2108588400000, 2121724800000, 2140038000000, 2153174400000, 2172092400000, 2184624000000, 2203542000000, 2216073600000, 2234991600000, 2248128000000, 2266441200000, 2279577600000, 2297890800000, 2311027200000, 2329340400000, 2342476800000, 2361394800000, 2373926400000, 2392844400000, 2405376000000, 2424294000000, 2437430400000, 2455743600000, 2468880000000, 2487193200000, 2500329600000, 2519247600000, 2531779200000, 2550697200000, 2563228800000, 2582146800000, 2595283200000, 2613596400000, 2626732800000, 2645046000000, 2658182400000, 2676495600000, 2689632000000, 2708550000000, 2721081600000, 2739999600000, 2752531200000, 2771449200000, 2784585600000, 2802898800000, 2816035200000, 2834348400000, 2847484800000, 2866402800000, 2878934400000, 2897852400000, 2910384000000, 2929302000000, 2941833600000, 2960751600000, 2973888000000, 2992201200000, 3005337600000, 3023650800000, 3036787200000, 3055705200000, 3068236800000, 3087154800000, 3099686400000, 3118604400000, 3131740800000, 3150054000000, 3163190400000, 3181503600000, 3194640000000, 3212953200000, 3226089600000, 3245007600000, 3257539200000, 3276457200000, 3288988800000, 3307906800000, 3321043200000, 3339356400000, 3352492800000, 3370806000000, 3383942400000, 3402860400000, 3415392000000, 3434310000000, 3446841600000, 3465759600000, 3478896000000, 3497209200000, 3510345600000, 3528658800000, 3541795200000, 3560108400000, 3573244800000, 3592162800000, 3604694400000, 3623612400000, 3636144000000, 3655062000000, 3668198400000, 3686511600000, 3699648000000, 3717961200000, 3731097600000, 3750015600000, 3762547200000, 3781465200000, 3793996800000, 3812914800000, 3825446400000, 3844364400000, 3857500800000, 3875814000000, 3888950400000, 3907263600000, 3920400000000, 3939318000000, 3951849600000, 3970767600000, 3983299200000, 4002217200000, 4015353600000, 4033666800000, 4046803200000, 4065116400000, 4078252800000, 4096566000000, 4109702400000, 4128620400000, 4141152000000, 4160070000000, 4172601600000, 4191519600000, 4204051200000, 4222969200000, 4236105600000, 4254418800000, 4267555200000, 4285868400000, 4299004800000, 4317922800000, 4330454400000, 4349372400000, 4361904000000, 4380822000000, 4393958400000, 4412271600000, 4425408000000, 4443721200000, 4456857600000, 4475170800000, 4488307200000, 4507225200000, 4519756800000, 4538674800000, 4551206400000, 4570124400000, 4583260800000, 4601574000000, 4614710400000, 4633023600000, 4646160000000, 4665078000000, 4677609600000, 4696527600000, 4709059200000, 4727977200000, 4741113600000, 4759426800000, 4772563200000, 4790876400000, 4804012800000, 4822326000000, 4835462400000, 4854380400000, 4866912000000, 4885830000000, 4898361600000, 4917279600000, 4930416000000, 4948729200000, 4961865600000, 4980178800000, 4993315200000, 5012233200000, 5024764800000, 5043682800000, 5056214400000, 5075132400000, 5087664000000, 5106582000000, 5119718400000, 5138031600000, 5151168000000, 5169481200000, 5182617600000, 5201535600000, 5214067200000, 5232985200000, 5245516800000, 5264434800000, 5277571200000, 5295884400000, 5309020800000, 5327334000000, 5340470400000, 5358783600000, 5371920000000, 5390838000000, 5403369600000, 5422287600000, 5434819200000, 5453737200000, 5466873600000, 5485186800000, 5498323200000, 5516636400000, 5529772800000, 5548690800000, 5561222400000, 5580140400000, 5592672000000, 5611590000000, 5624726400000, 5643039600000, 5656176000000, 5674489200000, 5687625600000, 5705938800000, 5719075200000, 5737993200000, 5750524800000, 5769442800000, 5781974400000, 5800892400000, 5814028800000, 5832342000000, 5845478400000, 5863791600000, 5876928000000, 5895846000000, 5908377600000, 5927295600000, 5939827200000, 5958745200000, 5971276800000, 5990194800000, 6003331200000, 6021644400000, 6034780800000, 6053094000000, 6066230400000, 6085148400000, 6097680000000, 6116598000000, 6129129600000, 6148047600000, 6161184000000, 6179497200000, 6192633600000, 6210946800000, 6224083200000, 6242396400000, 6255532800000, 6274450800000, 6286982400000, 6305900400000, 6318432000000, 6337350000000, 6350486400000, 6368799600000, 6381936000000, 6400249200000, 6413385600000, 6432303600000, 6444835200000, 6463753200000, 6476284800000, 6495202800000, 6508339200000, 6526652400000, 6539788800000, 6558102000000, 6571238400000, 6589551600000, 6602688000000, 6621606000000, 6634137600000, 6653055600000, 6665587200000, 6684505200000, 6697641600000, 6715954800000, 6729091200000, 6747404400000, 6760540800000, 6779458800000, 6791990400000, 6810908400000, 6823440000000, 6842358000000, 6854889600000, 6873807600000, 6886944000000, 6905257200000, 6918393600000, 6936706800000, 6949843200000, 6968761200000, 6981292800000, 7000210800000, 7012742400000, 7031660400000, 7044796800000, 7063110000000, 7076246400000, 7094559600000, 7107696000000, 7126009200000, 7139145600000, 7158063600000, 7170595200000, 7189513200000, 7202044800000, 7220962800000, 7234099200000, 7252412400000, 7265548800000, 7283862000000, 7296998400000, 7315311600000, 7328448000000, 7347366000000, 7359897600000, 7378815600000, 7391347200000, 7410265200000, 7423401600000, 7441714800000, 7454851200000, 7473164400000, 7486300800000, 7504614000000, 7517750400000, 7536668400000, 7549200000000, 7568118000000, 7580649600000, 7599567600000, 7612704000000, 7631017200000, 7644153600000, 7662466800000, 7675603200000, 7694521200000, 7707052800000, 7725970800000, 7738502400000, 7757420400000, 7770556800000, 7788870000000, 7802006400000, 7820319600000, 7833456000000, 7851769200000, 7864905600000, 7883823600000, 7896355200000, 7915273200000, 7927804800000, 7946722800000, 7959859200000, 7978172400000, 7991308800000, 8009622000000, 8022758400000, 8041676400000, 8054208000000, 8073126000000, 8085657600000, 8104575600000, 8117107200000, 8136025200000, 8149161600000, 8167474800000, 8180611200000, 8198924400000, 8212060800000, 8230978800000, 8243510400000, 8262428400000, 8274960000000, 8293878000000, 8307014400000, 8325327600000, 8338464000000, 8356777200000, 8369913600000, 8388226800000, 8401363200000, 8420281200000, 8432812800000, 8451730800000, 8464262400000, 8483180400000, 8496316800000, 8514630000000, 8527766400000, 8546079600000, 8559216000000, 8578134000000, 8590665600000, 8609583600000, 8622115200000, 8641033200000, 8654169600000, 8672482800000, 8685619200000, 8703932400000, 8717068800000, 8735382000000, 8748518400000, 8767436400000, 8779968000000, 8798886000000, 8811417600000, 8830335600000, 8843472000000, 8861785200000, 8874921600000, 8893234800000, 8906371200000, 8925289200000, 8937820800000, 8956738800000, 8969270400000, 8988188400000, 9000720000000, 9019638000000, 9032774400000, 9051087600000, 9064224000000, 9082537200000, 9095673600000, 9114591600000, 9127123200000, 9146041200000, 9158572800000, 9177490800000, 9190627200000, 9208940400000, 9222076800000, 9240390000000, 9253526400000, 9271839600000, 9284976000000, 9303894000000, 9316425600000, 9335343600000, 9347875200000, 9366793200000, 9379929600000, 9398242800000, 9411379200000, 9429692400000, 9442828800000, 9461746800000, 9474278400000, 9493196400000, 9505728000000, 9524646000000, 9537782400000, 9556095600000, 9569232000000, 9587545200000, 9600681600000, 9618994800000, 9632131200000, 9651049200000, 9663580800000, 9682498800000, 9695030400000, 9713948400000, 9727084800000, 9745398000000, 9758534400000, 9776847600000, 9789984000000, 9808902000000, 9821433600000, 9840351600000, 9852883200000, 9871801200000, 9884332800000, 9903250800000, 9916387200000, 9934700400000, 9947836800000, 9966150000000, 9979286400000, 9998204400000, 10010736000000, 10029654000000, 10042185600000, 10061103600000, 10074240000000, 10092553200000, 10105689600000, 10124002800000, 10137139200000, 10155452400000, 10168588800000, 10187506800000, 10200038400000, 10218956400000, 10231488000000, 10250406000000, 10263542400000, 10281855600000, 10294992000000, 10313305200000, 10326441600000, 10345359600000, 10357891200000, 10376809200000, 10389340800000, 10408258800000, 10420790400000, 10439708400000, 10452844800000, 10471158000000, 10484294400000, 10502607600000, 10515744000000, 10534057200000, 10547193600000, 10566111600000, 10578643200000, 10597561200000, 10610092800000, 10629010800000, 10642147200000, 10660460400000, 10673596800000, 10691910000000, 10705046400000, 10723964400000, 10736496000000, 10755414000000, 10767945600000, 10786863600000, 10800000000000, 10818313200000, 10831449600000, 10849762800000, 10862899200000, 10881212400000, 10894348800000, 10913266800000, 10925798400000, 10944716400000, 10957248000000, 10976166000000, 10989302400000, 11007615600000, 11020752000000, 11039065200000, 11052201600000, 11071119600000, 11083651200000, 11102569200000, 11115100800000, 11134018800000, 11146550400000, 11165468400000, 11178604800000, 11196918000000, 11210054400000, 11228367600000, 11241504000000, 11260422000000, 11272953600000, 11291871600000, 11304403200000, 11323321200000, 11336457600000, 11354770800000, 11367907200000, 11386220400000, 11399356800000, 11417670000000, 11430806400000, 11449724400000, 11462256000000, 11481174000000, 11493705600000, 11512623600000, 11525760000000, 11544073200000, 11557209600000, 11575522800000, 11588659200000, 11607577200000, 11620108800000, 11639026800000, 11651558400000, 11670476400000, 11683612800000, 11701926000000, 11715062400000, 11733375600000, 11746512000000, 11764825200000, 11777961600000, 11796879600000, 11809411200000, 11828329200000, 11840860800000, 11859778800000, 11872915200000, 11891228400000, 11904364800000, 11922678000000, 11935814400000, 11954732400000, 11967264000000, 11986182000000, 11998713600000, 12017631600000, 12030163200000, 12049081200000, 12062217600000, 12080530800000, 12093667200000, 12111980400000, 12125116800000, 12144034800000, 12156566400000, 12175484400000, 12188016000000, 12206934000000, 12220070400000, 12238383600000, 12251520000000, 12269833200000, 12282969600000, 12301282800000, 12314419200000, 12333337200000, 12345868800000, 12364786800000, 12377318400000, 12396236400000, 12409372800000, 12427686000000, 12440822400000, 12459135600000, 12472272000000, 12491190000000, 12503721600000, 12522639600000, 12535171200000, 12554089200000, 12567225600000, 12585538800000, 12598675200000, 12616988400000, 12630124800000, 12648438000000, 12661574400000, 12680492400000, 12693024000000, 12711942000000, 12724473600000, 12743391600000, 12756528000000, 12774841200000, 12787977600000, 12806290800000, 12819427200000, 12838345200000, 12850876800000, 12869794800000, 12882326400000, 12901244400000, 12913776000000, 12932694000000, 12945830400000, 12964143600000, 12977280000000, 12995593200000, 13008729600000, 13027647600000, 13040179200000, 13059097200000, 13071628800000, 13090546800000, 13103683200000, 13121996400000, 13135132800000, 13153446000000, 13166582400000, 13184895600000, 13198032000000, 13216950000000, 13229481600000, 13248399600000, 13260931200000, 13279849200000, 13292985600000, 13311298800000, 13324435200000, 13342748400000, 13355884800000, 13374802800000, 13387334400000, 13406252400000, 13418784000000, 13437702000000, 13450838400000, 13469151600000, 13482288000000, 13500601200000, 13513737600000, 13532050800000, 13545187200000, 13564105200000, 13576636800000, 13595554800000, 13608086400000, 13627004400000, 13640140800000, 13658454000000, 13671590400000, 13689903600000, 13703040000000, 13721958000000, 13734489600000, 13753407600000, 13765939200000, 13784857200000, 13797388800000, 13816306800000, 13829443200000, 13847756400000, 13860892800000, 13879206000000, 13892342400000, 13911260400000, 13923792000000, 13942710000000, 13955241600000, 13974159600000, 13987296000000, 14005609200000 ]),
    Int32List.fromList([ 8440000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 14400000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'JMT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDDT', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone thimbu = DynamicTimezone(
    'Asia/Thimbu',
    DynamicTimezoneSpan(
      -1,
      21516000,
      'LMT',
      TimezoneSpan.range.min,
      -706341516,
      dst: false,
    ),
    Int64List.fromList([ -706341516000, 560025000000 ]),
    Int32List.fromList([ 19800000, 21600000 ]),
    [ '+0530', '+06' ],
    [ false, false ],
  );

  static final Timezone thimphu = DynamicTimezone(
    'Asia/Thimphu',
    DynamicTimezoneSpan(
      -1,
      21516000,
      'LMT',
      TimezoneSpan.range.min,
      -706341516,
      dst: false,
    ),
    Int64List.fromList([ -706341516000, 560025000000 ]),
    Int32List.fromList([ 19800000, 21600000 ]),
    [ '+0530', '+06' ],
    [ false, false ],
  );

  static final Timezone tokyo = DynamicTimezone(
    'Asia/Tokyo',
    DynamicTimezoneSpan(
      -1,
      33539000,
      'LMT',
      TimezoneSpan.range.min,
      -2587712400,
      dst: false,
    ),
    Int64List.fromList([ -2587712400000, -683802000000, -672310800000, -654771600000, -640861200000, -620298000000, -609411600000, -588848400000, -577962000000 ]),
    Int32List.fromList([ 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000, 36000000, 32400000 ]),
    [ 'JST', 'JDT', 'JST', 'JDT', 'JST', 'JDT', 'JST', 'JDT', 'JST' ],
    [ false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone tomsk = DynamicTimezone(
    'Asia/Tomsk',
    DynamicTimezoneSpan(
      -1,
      20391000,
      'LMT',
      TimezoneSpan.range.min,
      -1578807591,
      dst: false,
    ),
    Int64List.fromList([ -1578807591000, -1247551200000, 354906000000, 370713600000, 386442000000, 402249600000, 417978000000, 433785600000, 449600400000, 465332400000, 481057200000, 496782000000, 512506800000, 528231600000, 543956400000, 559681200000, 575406000000, 591130800000, 606855600000, 622580400000, 638305200000, 654634800000, 670359600000, 686088000000, 695764800000, 701809200000, 717534000000, 733258800000, 748983600000, 764708400000, 780433200000, 796158000000, 811882800000, 828212400000, 846356400000, 859662000000, 877806000000, 891111600000, 909255600000, 922561200000, 941310000000, 954010800000, 972759600000, 985460400000, 1004209200000, 1017514800000, 1020193200000, 1035662400000, 1048968000000, 1067112000000, 1080417600000, 1099166400000, 1111867200000, 1130616000000, 1143316800000, 1162065600000, 1174766400000, 1193515200000, 1206820800000, 1224964800000, 1238270400000, 1256414400000, 1269720000000, 1288468800000, 1301169600000, 1414263600000, 1464465600000 ]),
    Int32List.fromList
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone ujungPandang = DynamicTimezone(
    'Asia/Ujung_Pandang',
    DynamicTimezoneSpan(
      -1,
      28656000,
      'LMT',
      TimezoneSpan.range.min,
      -1577951856,
      dst: false,
    ),
    Int64List.fromList([ -1577951856000, -1172908656000, -880272000000, -766054800000 ]),
    Int32List.fromList([ 28656000, 28800000, 32400000, 28800000 ]),
    [ 'MMT', '+08', '+09', 'WITA' ],
    [ false, false, false, false ],
  );

  static final Timezone ulaanbaatar = DynamicTimezone(
    'Asia/Ulaanbaatar',
    DynamicTimezoneSpan(
      -1,
      25652000,
      'LMT',
      TimezoneSpan.range.min,
      -2032931252,
      dst: false,
    ),
    Int64List.fromList([ -2032931252000, 252435600000, 417974400000, 433782000000, 449596800000, 465318000000, 481046400000, 496767600000, 512496000000, 528217200000, 543945600000, 559666800000, 575395200000, 591116400000, 606844800000, 622566000000, 638294400000, 654620400000, 670348800000, 686070000000, 701798400000, 717519600000, 733248000000, 748969200000, 764697600000, 780418800000, 796147200000, 811868400000, 828201600000, 843922800000, 859651200000, 875372400000, 891100800000, 906822000000, 988394400000, 1001696400000, 1017424800000, 1033146000000, 1048874400000, 1064595600000, 1080324000000, 1096045200000, 1111773600000, 1127494800000, 1143223200000, 1159549200000, 1427479200000, 1443193200000, 1458928800000, 1474642800000 ]),
    Int32List.fromList
    [ '+07', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone ulanBator = DynamicTimezone(
    'Asia/Ulan_Bator',
    DynamicTimezoneSpan(
      -1,
      25652000,
      'LMT',
      TimezoneSpan.range.min,
      -2032931252,
      dst: false,
    ),
    Int64List.fromList([ -2032931252000, 252435600000, 417974400000, 433782000000, 449596800000, 465318000000, 481046400000, 496767600000, 512496000000, 528217200000, 543945600000, 559666800000, 575395200000, 591116400000, 606844800000, 622566000000, 638294400000, 654620400000, 670348800000, 686070000000, 701798400000, 717519600000, 733248000000, 748969200000, 764697600000, 780418800000, 796147200000, 811868400000, 828201600000, 843922800000, 859651200000, 875372400000, 891100800000, 906822000000, 988394400000, 1001696400000, 1017424800000, 1033146000000, 1048874400000, 1064595600000, 1080324000000, 1096045200000, 1111773600000, 1127494800000, 1143223200000, 1159549200000, 1427479200000, 1443193200000, 1458928800000, 1474642800000 ]),
    Int32List.fromList
    [ '+07', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone urumqi = DynamicTimezone(
    'Asia/Urumqi',
    DynamicTimezoneSpan(
      -1,
      21020000,
      'LMT',
      TimezoneSpan.range.min,
      -1325483420,
      dst: false,
    ),
    Int64List.fromList([ -1325483420000 ]),
    Int32List.fromList([ 21600000 ]),
    [ '+06' ],
    [ false ],
  );

  static final Timezone ustNera = DynamicTimezone(
    'Asia/Ust-Nera',
    DynamicTimezoneSpan(
      -1,
      34374000,
      'LMT',
      TimezoneSpan.range.min,
      -1579426374,
      dst: false,
    ),
    Int64List.fromList([ -1579426374000, -1247558400000, 354898800000, 370699200000, 386427600000, 402235200000, 417963600000, 433771200000, 449586000000, 465318000000, 481042800000, 496767600000, 512492400000, 528217200000, 543942000000, 559666800000, 575391600000, 591116400000, 606841200000, 622566000000, 638290800000, 654620400000, 670345200000, 686073600000, 695750400000, 701794800000, 717519600000, 733244400000, 748969200000, 764694000000, 780418800000, 796143600000, 811868400000, 828198000000, 846342000000, 859647600000, 877791600000, 891097200000, 909241200000, 922546800000, 941295600000, 953996400000, 972745200000, 985446000000, 1004194800000, 1017500400000, 1035644400000, 1048950000000, 1067094000000, 1080399600000, 1099148400000, 1111849200000, 1130598000000, 1143298800000, 1162047600000, 1174748400000, 1193497200000, 1206802800000, 1224946800000, 1238252400000, 1256396400000, 1269702000000, 1288450800000, 1301151600000, 1315828800000, 1414249200000 ]),
    Int32List.fromList([ 28800000, 32400000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 39600000, 36000000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 36000000 ]),
    [ '+08', '+09', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+10' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone vientiane = DynamicTimezone(
    'Asia/Vientiane',
    DynamicTimezoneSpan(
      -1,
      24124000,
      'LMT',
      TimezoneSpan.range.min,
      -2840164924,
      dst: false,
    ),
    Int64List.fromList([ -2840164924000, -1570084924000 ]),
    Int32List.fromList([ 24124000, 25200000 ]),
    [ 'BMT', '+07' ],
    [ false, false ],
  );

  static final Timezone vladivostok = DynamicTimezone(
    'Asia/Vladivostok',
    DynamicTimezoneSpan(
      -1,
      31651000,
      'LMT',
      TimezoneSpan.range.min,
      -1487321251,
      dst: false,
    ),
    Int64List.fromList([ -1487321251000, -1247562000000, 354895200000, 370702800000, 386431200000, 402238800000, 417967200000, 433774800000, 449589600000, 465321600000, 481046400000, 496771200000, 512496000000, 528220800000, 543945600000, 559670400000, 575395200000, 591120000000, 606844800000, 622569600000, 638294400000, 654624000000, 670348800000, 686077200000, 695754000000, 701798400000, 717523200000, 733248000000, 748972800000, 764697600000, 780422400000, 796147200000, 811872000000, 828201600000, 846345600000, 859651200000, 877795200000, 891100800000, 909244800000, 922550400000, 941299200000, 954000000000, 972748800000, 985449600000, 1004198400000, 1017504000000, 1035648000000, 1048953600000, 1067097600000, 1080403200000, 1099152000000, 1111852800000, 1130601600000, 1143302400000, 1162051200000, 1174752000000, 1193500800000, 1206806400000, 1224950400000, 1238256000000, 1256400000000, 1269705600000, 1288454400000, 1301155200000, 1414249200000 ]),
    Int32List.fromList
    [ '+09', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+10', '+09', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone yakutsk = DynamicTimezone(
    'Asia/Yakutsk',
    DynamicTimezoneSpan(
      -1,
      31138000,
      'LMT',
      TimezoneSpan.range.min,
      -1579423138,
      dst: false,
    ),
    Int64List.fromList([ -1579423138000, -1247558400000, 354898800000, 370706400000, 386434800000, 402242400000, 417970800000, 433778400000, 449593200000, 465325200000, 481050000000, 496774800000, 512499600000, 528224400000, 543949200000, 559674000000, 575398800000, 591123600000, 606848400000, 622573200000, 638298000000, 654627600000, 670352400000, 686080800000, 695757600000, 701802000000, 717526800000, 733251600000, 748976400000, 764701200000, 780426000000, 796150800000, 811875600000, 828205200000, 846349200000, 859654800000, 877798800000, 891104400000, 909248400000, 922554000000, 941302800000, 954003600000, 972752400000, 985453200000, 1004202000000, 1017507600000, 1035651600000, 1048957200000, 1067101200000, 1080406800000, 1099155600000, 1111856400000, 1130605200000, 1143306000000, 1162054800000, 1174755600000, 1193504400000, 1206810000000, 1224954000000, 1238259600000, 1256403600000, 1269709200000, 1288458000000, 1301158800000, 1414252800000 ]),
    Int32List.fromList
    [ '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+09', '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone yangon = DynamicTimezone(
    'Asia/Yangon',
    DynamicTimezoneSpan(
      -1,
      23087000,
      'LMT',
      TimezoneSpan.range.min,
      -2840163887,
      dst: false,
    ),
    Int64List.fromList([ -2840163887000, -1577946287000, -873268200000, -778410000000 ]),
    Int32List.fromList([ 23087000, 23400000, 32400000, 23400000 ]),
    [ 'RMT', '+0630', '+09', '+0630' ],
    [ false, false, false, false ],
  );

  static final Timezone yekaterinburg = DynamicTimezone(
    'Asia/Yekaterinburg',
    DynamicTimezoneSpan(
      -1,
      14553000,
      'LMT',
      TimezoneSpan.range.min,
      -1688270553,
      dst: false,
    ),
    Int64List.fromList([ -1688270553000, -1592610305000, -1247544000000, 354913200000, 370720800000, 386449200000, 402256800000, 417985200000, 433792800000, 449607600000, 465339600000, 481064400000, 496789200000, 512514000000, 528238800000, 543963600000, 559688400000, 575413200000, 591138000000, 606862800000, 622587600000, 638312400000, 654642000000, 670366800000, 686095200000, 695772000000, 701816400000, 717541200000, 733266000000, 748990800000, 764715600000, 780440400000, 796165200000, 811890000000, 828219600000, 846363600000, 859669200000, 877813200000, 891118800000, 909262800000, 922568400000, 941317200000, 954018000000, 972766800000, 985467600000, 1004216400000, 1017522000000, 1035666000000, 1048971600000, 1067115600000, 1080421200000, 1099170000000, 1111870800000, 1130619600000, 1143320400000, 1162069200000, 1174770000000, 1193518800000, 1206824400000, 1224968400000, 1238274000000, 1256418000000, 1269723600000, 1288472400000, 1301173200000, 1414267200000 ]),
    Int32List.fromList([ 13505000, 14400000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 18000000, 14400000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000, 21600000, 18000000 ]),
    [ 'PMT', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone yerevan = DynamicTimezone(
    'Asia/Yerevan',
    DynamicTimezoneSpan(
      -1,
      10680000,
      'LMT',
      TimezoneSpan.range.min,
      -1441162680,
      dst: false,
    ),
    Int64List.fromList([ -1441162680000, -405140400000, 354916800000, 370724400000, 386452800000, 402260400000, 417988800000, 433796400000, 449611200000, 465343200000, 481068000000, 496792800000, 512517600000, 528242400000, 543967200000, 559692000000, 575416800000, 591141600000, 606866400000, 622591200000, 638316000000, 654645600000, 670370400000, 686098800000, 701823600000, 717548400000, 733273200000, 748998000000, 764722800000, 780447600000, 796172400000, 811897200000, 852062400000, 859672800000, 877816800000, 891122400000, 909266400000, 922572000000, 941320800000, 954021600000, 972770400000, 985471200000, 1004220000000, 1017525600000, 1035669600000, 1048975200000, 1067119200000, 1080424800000, 1099173600000, 1111874400000, 1130623200000, 1143324000000, 1162072800000, 1174773600000, 1193522400000, 1206828000000, 1224972000000, 1238277600000, 1256421600000, 1269727200000, 1288476000000, 1293825600000, 1301176800000, 1319925600000 ]),
    Int32List.fromList
    [ '+03', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+04', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+04', '+05', '+04' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false ],
  );

}


