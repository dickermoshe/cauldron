// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/generate_timezones.dart
// **************************************************************************
// 
// ignore_for_file: type=lint

import 'dart:typed_data';

import 'package:sugar/src/time/offset.dart';
import 'package:sugar/src/time/zone/dynamic_timezone.dart';
import 'package:sugar/src/time/zone/fixed_timezone.dart';
import 'package:sugar/src/time/zone/timezone.dart';
import 'package:sugar/src/time/zone/timezone_span.dart';

extension Asia on Never {
  static final Timezone aden = DynamicTimezone(
    'Asia/Aden',
    DynamicTimezoneSpan(
      -1,
      11212000000,
      'LMT',
      TimezoneSpan.range.min,
      -719636812,
      dst: false,
    ),
    Int64List.fromList([ -719636812 ]),
    Int8List.fromList([ 3 ]),
    3600000000,
    [ '+03' ],
    [ false ],
  );

  static final Timezone almaty = DynamicTimezone(
    'Asia/Almaty',
    DynamicTimezoneSpan(
      -1,
      18468000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441170468,
      dst: false,
    ),
    Int64List.fromList([ -1441170468, -1247547600, 354909600, 370717200, 386445600, 402253200, 417981600, 433789200, 449604000, 465336000, 481060800, 496785600, 512510400, 528235200, 543960000, 559684800, 575409600, 591134400, 606859200, 622584000, 638308800, 654638400, 670363200, 686091600, 695768400, 701812800, 717537600, 733262400, 748987200, 764712000, 780436800, 796161600, 811886400, 828216000, 846360000, 859665600, 877809600, 891115200, 909259200, 922564800, 941313600, 954014400, 972763200, 985464000, 1004212800, 1017518400, 1035662400, 1048968000, 1067112000, 1080417600, 1099166400 ]),
    Int8List.fromList([ 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6 ]),
    3600000000,
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone amman = DynamicTimezone(
    'Asia/Amman',
    DynamicTimezoneSpan(
      -1,
      8624000000,
      'LMT',
      TimezoneSpan.range.min,
      -1230776624,
      dst: false,
    ),
    Int64List.fromList([ -1230776624, 108165600, 118270800, 136591200, 149806800, 168127200, 181342800, 199749600, 215643600, 231285600, 244501200, 262735200, 275950800, 481154400, 496962000, 512949600, 528670800, 544399200, 560120400, 575848800, 592174800, 610581600, 623624400, 641167200, 655074000, 671839200, 685918800, 702856800, 717973200, 733701600, 749422800, 765151200, 779662800, 797205600, 811116000, 828655200, 843170400, 860104800, 874620000, 891554400, 906069600, 930780000, 938124000, 954367200, 970178400, 985816800, 1001628000, 1017352800, 1033077600, 1048802400, 1066946400, 1080252000, 1097791200, 1112306400, 1128031200, 1143756000, 1161900000, 1175205600, 1193349600, 1206655200, 1225404000, 1238104800, 1256853600, 1269554400, 1288303200, 1301608800, 1319752800, 1333058400, 1387486800, 1395957600, 1414706400, 1427407200, 1446156000, 1459461600, 1477605600, 1490911200, 1509055200, 1522360800, 1540504800, 1553810400, 1571954400, 1585260000, 1604008800, 1616709600, 1635458400, 1645740000, 1666908000 ]),
    Int8List.fromList([ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3 ]),
    3600000000,

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone anadyr = DynamicTimezone(
    'Asia/Anadyr',
    DynamicTimezoneSpan(
      -1,
      42596000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441194596,
      dst: false,
    ),
    Int64List.fromList([ -1441194596, -1247572800, 354884400, 370692000, 386420400, 402231600, 417960000, 433767600, 449582400, 465314400, 481039200, 496764000, 512488800, 528213600, 543938400, 559663200, 575388000, 591112800, 606837600, 622562400, 638287200, 654616800, 670341600, 686070000, 695746800, 701791200, 717516000, 733240800, 748965600, 764690400, 780415200, 796140000, 811864800, 828194400, 846338400, 859644000, 877788000, 891093600, 909237600, 922543200, 941292000, 953992800, 972741600, 985442400, 1004191200, 1017496800, 1035640800, 1048946400, 1067090400, 1080396000, 1099144800, 1111845600, 1130594400, 1143295200, 1162044000, 1174744800, 1193493600, 1206799200, 1224943200, 1238248800, 1256392800, 1269698400, 1288450800, 1301151600 ]),
    Int8List.fromList([ 12, 13, 14, 13, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 12, 11, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 12, 11, 12 ]),
    3600000000,
    [ '+12', '+13', '+14', '+13', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+12', '+11', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+12', '+11', '+12' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone aqtau = DynamicTimezone(
    'Asia/Aqtau',
    DynamicTimezoneSpan(
      -1,
      12064000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441164064,
      dst: false,
    ),
    Int64List.fromList([ -1441164064, -1247544000, 370724400, 386445600, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686095200, 695772000, 701816400, 717541200, 733266000, 748990800, 764715600, 780440400, 796168800, 811893600, 828223200, 846367200, 859672800, 877816800, 891122400, 909266400, 922572000, 941320800, 954021600, 972770400, 985471200, 1004220000, 1017525600, 1035669600, 1048975200, 1067119200, 1080424800, 1099173600 ]),
    Int8List.fromList([ 4, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5, 6, 5, 6, 5, 6, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 5 ]),
    3600000000,
    [ '+04', '+05', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+05' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone aqtobe = DynamicTimezone(
    'Asia/Aqtobe',
    DynamicTimezoneSpan(
      -1,
      13720000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441165720,
      dst: false,
    ),
    Int64List.fromList([ -1441165720, -1247544000, 354913200, 370720800, 386445600, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686095200, 695772000, 701816400, 717541200, 733266000, 748990800, 764715600, 780440400, 796165200, 811890000, 828219600, 846363600, 859669200, 877813200, 891118800, 909262800, 922568400, 941317200, 954018000, 972766800, 985467600, 1004216400, 1017522000, 1035666000, 1048971600, 1067115600, 1080421200, 1099170000 ]),
    Int8List.fromList([ 4, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5 ]),
    3600000000,
    [ '+04', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone ashgabat = DynamicTimezone(
    'Asia/Ashgabat',
    DynamicTimezoneSpan(
      -1,
      14012000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441166012,
      dst: false,
    ),
    Int64List.fromList([ -1441166012, -1247544000, 354913200, 370720800, 386449200, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686095200, 695772000 ]),
    Int8List.fromList([ 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5 ]),
    3600000000,
    [ '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone ashkhabad = DynamicTimezone(
    'Asia/Ashkhabad',
    DynamicTimezoneSpan(
      -1,
      14012000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441166012,
      dst: false,
    ),
    Int64List.fromList([ -1441166012, -1247544000, 354913200, 370720800, 386449200, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686095200, 695772000 ]),
    Int8List.fromList([ 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5 ]),
    3600000000,
    [ '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone atyrau = DynamicTimezone(
    'Asia/Atyrau',
    DynamicTimezoneSpan(
      -1,
      12464000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441164464,
      dst: false,
    ),
    Int64List.fromList([ -1441164464, -1247540400, 370724400, 386445600, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686095200, 695772000, 701816400, 717541200, 733266000, 748990800, 764715600, 780440400, 796165200, 811890000, 828219600, 846363600, 859669200, 877813200, 891118800, 909262800, 922568400, 941320800, 954021600, 972770400, 985471200, 1004220000, 1017525600, 1035669600, 1048975200, 1067119200, 1080424800, 1099173600 ]),
    Int8List.fromList([ 3, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 5 ]),
    3600000000,
    [ '+03', '+05', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+05' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone baghdad = DynamicTimezone(
    'Asia/Baghdad',
    DynamicTimezoneSpan(
      -1,
      10660000000,
      'LMT',
      TimezoneSpan.range.min,
      -2524532260,
      dst: false,
    ),
    Int64List.fromList([ -2524532260, -1641005856, 389048400, 402264000, 417906000, 433800000, 449614800, 465422400, 481150800, 496792800, 512517600, 528242400, 543967200, 559692000, 575416800, 591141600, 606866400, 622591200, 638316000, 654645600, 670464000, 686275200, 702086400, 717897600, 733622400, 749433600, 765158400, 780969600, 796694400, 812505600, 828316800, 844128000, 859852800, 875664000, 891388800, 907200000, 922924800, 938736000, 954547200, 970358400, 986083200, 1001894400, 1017619200, 1033430400, 1049155200, 1064966400, 1080777600, 1096588800, 1112313600, 1128124800, 1143849600, 1159660800, 1175385600, 1191196800 ]),
    Int32List.fromList([ 10656, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800 ]),
    1000000,
    [ 'BMT', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone bahrain = DynamicTimezone(
    'Asia/Bahrain',
    DynamicTimezoneSpan(
      -1,
      12368000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577935568,
      dst: false,
    ),
    Int64List.fromList([ -1577935568, 76190400 ]),
    Int8List.fromList([ 4, 3 ]),
    3600000000,
    [ '+04', '+03' ],
    [ false, false ],
  );

  static final Timezone baku = DynamicTimezone(
    'Asia/Baku',
    DynamicTimezoneSpan(
      -1,
      11964000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441163964,
      dst: false,
    ),
    Int64List.fromList([ -1441163964, -405140400, 354916800, 370724400, 386452800, 402260400, 417988800, 433796400, 449611200, 465343200, 481068000, 496792800, 512517600, 528242400, 543967200, 559692000, 575416800, 591141600, 606866400, 622591200, 638316000, 654645600, 670370400, 686098800, 701823600, 717548400, 820440000, 828234000, 846378000, 852062400, 859680000, 877824000, 891129600, 909273600, 922579200, 941328000, 954028800, 972777600, 985478400, 1004227200, 1017532800, 1035676800, 1048982400, 1067126400, 1080432000, 1099180800, 1111881600, 1130630400, 1143331200, 1162080000, 1174780800, 1193529600, 1206835200, 1224979200, 1238284800, 1256428800, 1269734400, 1288483200, 1301184000, 1319932800, 1332633600, 1351382400, 1364688000, 1382832000, 1396137600, 1414281600, 1427587200, 1445731200 ]),
    Int8List.fromList([ 3, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 3, 4, 4, 4, 5, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4 ]),
    3600000000,
    [ '+03', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+04', '+03', '+04', '+04', '+04', '+05', '+04', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone bangkok = DynamicTimezone(
    'Asia/Bangkok',
    DynamicTimezoneSpan(
      -1,
      24124000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840164924,
      dst: false,
    ),
    Int64List.fromList([ -2840164924, -1570084924 ]),
    Int32List.fromList([ 24124, 25200 ]),
    1000000,
    [ 'BMT', '+07' ],
    [ false, false ],
  );

  static final Timezone barnaul = DynamicTimezone(
    'Asia/Barnaul',
    DynamicTimezoneSpan(
      -1,
      20100000000,
      'LMT',
      TimezoneSpan.range.min,
      -1579844100,
      dst: false,
    ),
    Int64List.fromList([ -1579844100, -1247551200, 354906000, 370713600, 386442000, 402249600, 417978000, 433785600, 449600400, 465332400, 481057200, 496782000, 512506800, 528231600, 543956400, 559681200, 575406000, 591130800, 606855600, 622580400, 638305200, 654634800, 670359600, 686088000, 695764800, 701809200, 717534000, 733258800, 748983600, 764708400, 780433200, 796158000, 801590400, 811886400, 828216000, 846360000, 859665600, 877809600, 891115200, 909259200, 922564800, 941313600, 954014400, 972763200, 985464000, 1004212800, 1017518400, 1035662400, 1048968000, 1067112000, 1080417600, 1099166400, 1111867200, 1130616000, 1143316800, 1162065600, 1174766400, 1193515200, 1206820800, 1224964800, 1238270400, 1256414400, 1269720000, 1288468800, 1301169600, 1414263600, 1459022400 ]),
    Int8List.fromList([ 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7 ]),
    3600000000,
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone beirut = DynamicTimezone(
    'Asia/Beirut',
    DynamicTimezoneSpan(
      -1,
      8520000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840149320,
      dst: false,
    ),
    Int64List.fromList([ -2840149320, -1570413600, -1552186800, -1538359200, -1522551600, -1507514400, -1490583600, -1473645600, -1460948400, -399866400, -386650800, -368330400, -355114800, -336794400, -323578800, -305172000, -291956400, -273636000, -260420400, 78012000, 86734800, 105055200, 118270800, 136591200, 149806800, 168127200, 181342800, 199749600, 212965200, 231285600, 244501200, 262735200, 275950800, 452210400, 466722000, 483746400, 498258000, 515282400, 529794000, 546818400, 561330000, 581119200, 592952400, 610754400, 624488400, 641512800, 656024400, 673048800, 687560400, 704671200, 718146000, 733269600, 748990800, 764719200, 780440400, 796168800, 811890000, 828223200, 843944400, 859672800, 875394000, 891122400, 906843600, 922572000, 941317200, 954021600, 972766800, 985471200, 1004216400, 1017525600, 1035666000, 1048975200, 1067115600, 1080424800, 1099170000, 1111874400, 1130619600, 1143324000, 1162069200, 1174773600, 1193518800, 1206828000, 1224968400, 1238277600, 1256418000, 1269727200, 1288472400, 1301176800, 1319922000, 1332626400, 1351371600, 1364680800, 1382821200, 1396130400, 1414270800, 1427580000, 1445720400, 1459029600, 1477774800, 1490479200, 1509224400, 1521928800, 1540674000, 1553983200, 1572123600, 1585432800, 1603573200, 1616882400, 1635627600, 1648332000, 1667077200, 1679781600, 1698526800, 1711836000, 1729976400, 1743285600, 1761426000, 1774735200, 1792875600, 1806184800, 1824930000, 1837634400, 1856379600, 1869084000, 1887829200, 1901138400, 1919278800, 1932588000, 1950728400, 1964037600, 1982782800, 1995487200, 2014232400, 2026936800, 2045682000, 2058386400, 2077131600, 2090440800, 2108581200, 2121890400, 2140030800 ]),
    Int8List.fromList([ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2 ]),
    3600000000,

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone bishkek = DynamicTimezone(
    'Asia/Bishkek',
    DynamicTimezoneSpan(
      -1,
      17904000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441169904,
      dst: false,
    ),
    Int64List.fromList([ -1441169904, -1247547600, 354909600, 370717200, 386445600, 402253200, 417981600, 433789200, 449604000, 465336000, 481060800, 496785600, 512510400, 528235200, 543960000, 559684800, 575409600, 591134400, 606859200, 622584000, 638308800, 654638400, 670363200, 683582400, 703018800, 717530400, 734468400, 748980000, 765918000, 780429600, 797367600, 811879200, 828817200, 843933600, 859671000, 877811400, 891120600, 909261000, 922570200, 941315400, 954019800, 972765000, 985469400, 1004214600, 1017523800, 1035664200, 1048973400, 1067113800, 1080423000, 1099168200, 1111872600, 1123783200 ]),
    Int8List.fromList([ 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 6 ]),
    3600000000,
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+06' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone brunei = DynamicTimezone(
    'Asia/Brunei',
    DynamicTimezoneSpan(
      -1,
      26480000000,
      'LMT',
      TimezoneSpan.range.min,
      -1383463280,
      dst: false,
    ),
    Int64List.fromList([ -1383463280, -1167636600, -1082448000, -1074586800, -1050825600, -1042964400, -1019289600, -1011428400, -987753600, -979892400, -956217600, -948356400, -924595200, -916734000, -893059200, -885198000, -879667200, -767005200 ]),
    Int16List.fromList([ 450, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 540, 480 ]),
    60000000,
    [ '+0730', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone calcutta = DynamicTimezone(
    'Asia/Calcutta',
    DynamicTimezoneSpan(
      -1,
      21208000000,
      'LMT',
      TimezoneSpan.range.min,
      -3645237208,
      dst: false,
    ),
    Int64List.fromList([ -3645237208, -3155694800, -2019705670, -891581400, -872058600, -862637400, -764145000 ]),
    Int32List.fromList([ 21200, 19270, 19800, 23400, 19800, 23400, 19800 ]),
    1000000,
    [ 'HMT', 'MMT', 'IST', '+0630', 'IST', '+0630', 'IST' ],
    [ false, false, false, true, false, true, false ],
  );

  static final Timezone chita = DynamicTimezone(
    'Asia/Chita',
    DynamicTimezoneSpan(
      -1,
      27232000000,
      'LMT',
      TimezoneSpan.range.min,
      -1579419232,
      dst: false,
    ),
    Int64List.fromList([ -1579419232, -1247558400, 354898800, 370706400, 386434800, 402242400, 417970800, 433778400, 449593200, 465325200, 481050000, 496774800, 512499600, 528224400, 543949200, 559674000, 575398800, 591123600, 606848400, 622573200, 638298000, 654627600, 670352400, 686080800, 695757600, 701802000, 717526800, 733251600, 748976400, 764701200, 780426000, 796150800, 811875600, 828205200, 846349200, 859654800, 877798800, 891104400, 909248400, 922554000, 941302800, 954003600, 972752400, 985453200, 1004202000, 1017507600, 1035651600, 1048957200, 1067101200, 1080406800, 1099155600, 1111856400, 1130605200, 1143306000, 1162054800, 1174755600, 1193504400, 1206810000, 1224954000, 1238259600, 1256403600, 1269709200, 1288458000, 1301158800, 1414252800, 1459015200 ]),
    Int8List.fromList([ 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 9, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 8, 9 ]),
    3600000000,
    [ '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+09', '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+08', '+09' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone choibalsan = DynamicTimezone(
    'Asia/Choibalsan',
    DynamicTimezoneSpan(
      -1,
      27480000000,
      'LMT',
      TimezoneSpan.range.min,
      -2032933080,
      dst: false,
    ),
    Int64List.fromList([ -2032933080, 252435600, 417974400, 433778400, 449593200, 465314400, 481042800, 496764000, 512492400, 528213600, 543942000, 559663200, 575391600, 591112800, 606841200, 622562400, 638290800, 654616800, 670345200, 686066400, 701794800, 717516000, 733244400, 748965600, 764694000, 780415200, 796143600, 811864800, 828198000, 843919200, 859647600, 875368800, 891097200, 906818400, 988390800, 1001692800, 1017421200, 1033142400, 1048870800, 1064592000, 1080320400, 1096041600, 1111770000, 1127491200, 1143219600, 1159545600, 1206889200, 1427479200, 1443193200, 1458928800, 1474642800 ]),
    Int8List.fromList([ 7, 8, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ '+07', '+08', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+08', '+09', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false ],
  );

  static final Timezone chongqing = DynamicTimezone(
    'Asia/Chongqing',
    DynamicTimezoneSpan(
      -1,
      29143000000,
      'LMT',
      TimezoneSpan.range.min,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943, -1600675200, -1585904400, -933667200, -922093200, -908870400, -888829200, -881049600, -767869200, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -650019600, 515527200, 527014800, 545162400, 558464400, 577216800, 589914000, 608666400, 621968400, 640116000, 653418000, 671565600, 684867600 ]),
    Int8List.fromList([ 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone chungking = DynamicTimezone(
    'Asia/Chungking',
    DynamicTimezoneSpan(
      -1,
      29143000000,
      'LMT',
      TimezoneSpan.range.min,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943, -1600675200, -1585904400, -933667200, -922093200, -908870400, -888829200, -881049600, -767869200, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -650019600, 515527200, 527014800, 545162400, 558464400, 577216800, 589914000, 608666400, 621968400, 640116000, 653418000, 671565600, 684867600 ]),
    Int8List.fromList([ 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone colombo = DynamicTimezone(
    'Asia/Colombo',
    DynamicTimezoneSpan(
      -1,
      19164000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840159964,
      dst: false,
    ),
    Int64List.fromList([ -2840159964, -2019705572, -883287000, -862639200, -764051400, 832962600, 846266400, 1145039400 ]),
    Int32List.fromList([ 19172, 19800, 21600, 23400, 19800, 23400, 21600, 19800 ]),
    1000000,
    [ 'MMT', '+0530', '+06', '+0630', '+0530', '+0630', '+06', '+0530' ],
    [ false, false, true, true, false, false, false, false ],
  );

  static final Timezone dacca = DynamicTimezone(
    'Asia/Dacca',
    DynamicTimezoneSpan(
      -1,
      21700000000,
      'LMT',
      TimezoneSpan.range.min,
      -2524543300,
      dst: false,
    ),
    Int64List.fromList([ -2524543300, -891582800, -872058600, -862637400, -576138600, 1245430800, 1262278800 ]),
    Int32List.fromList([ 21200, 23400, 19800, 23400, 21600, 25200, 21600 ]),
    1000000,
    [ 'HMT', '+0630', '+0530', '+0630', '+06', '+07', '+06' ],
    [ false, false, false, false, false, true, false ],
  );

  static final Timezone damascus = DynamicTimezone(
    'Asia/Damascus',
    DynamicTimezoneSpan(
      -1,
      8712000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577931912,
      dst: false,
    ),
    Int64List.fromList([ -1577931912, -1568592000, -1554080400, -1537142400, -1522630800, -1505692800, -1491181200, -1474243200, -1459126800, -242265600, -228877200, -210556800, -197427600, -178934400, -165718800, -147398400, -134269200, -116467200, -102646800, -84326400, -71110800, -52704000, -39488400, -21168000, -7952400, 10368000, 23583600, 41904000, 55119600, 73526400, 86742000, 105062400, 118278000, 136598400, 149814000, 168134400, 181350000, 199756800, 212972400, 231292800, 241916400, 262828800, 273452400, 418694400, 433810800, 450316800, 465433200, 508896000, 529196400, 541555200, 562633200, 574387200, 594255600, 607305600, 623199600, 638928000, 654649200, 670456800, 686264400, 702684000, 717886800, 733096800, 748904400, 765151200, 780958800, 796687200, 812494800, 828309600, 844117200, 859759200, 875653200, 891208800, 907189200, 922917600, 938725200, 954540000, 970347600, 986076000, 1001883600, 1017612000, 1033419600, 1049148000, 1064955600, 1080770400, 1096578000, 1112306400, 1128114000, 1143842400, 1158872400, 1175205600, 1193950800, 1207260000, 1225486800, 1238104800, 1256850000, 1270159200, 1288299600, 1301608800, 1319749200, 1333058400, 1351198800, 1364508000, 1382648400, 1395957600, 1414702800, 1427407200, 1446152400, 1458856800, 1477602000, 1490911200, 1509051600, 1522360800, 1540501200, 1553810400, 1571950800, 1585260000, 1604005200, 1616709600, 1635454800, 1648159200, 1666904400 ]),
    Int8List.fromList([ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3 ]),
    3600000000,

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone dhaka = DynamicTimezone(
    'Asia/Dhaka',
    DynamicTimezoneSpan(
      -1,
      21700000000,
      'LMT',
      TimezoneSpan.range.min,
      -2524543300,
      dst: false,
    ),
    Int64List.fromList([ -2524543300, -891582800, -872058600, -862637400, -576138600, 1245430800, 1262278800 ]),
    Int32List.fromList([ 21200, 23400, 19800, 23400, 21600, 25200, 21600 ]),
    1000000,
    [ 'HMT', '+0630', '+0530', '+0630', '+06', '+07', '+06' ],
    [ false, false, false, false, false, true, false ],
  );

  static final Timezone dili = DynamicTimezone(
    'Asia/Dili',
    DynamicTimezoneSpan(
      -1,
      30140000000,
      'LMT',
      TimezoneSpan.range.min,
      -1830414140,
      dst: false,
    ),
    Int64List.fromList([ -1830414140, -879152400, 199897200, 969120000 ]),
    Int8List.fromList([ 8, 9, 8, 9 ]),
    3600000000,
    [ '+08', '+09', '+08', '+09' ],
    [ false, false, false, false ],
  );

  static final Timezone dubai = DynamicTimezone(
    'Asia/Dubai',
    DynamicTimezoneSpan(
      -1,
      13272000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577936472,
      dst: false,
    ),
    Int64List.fromList([ -1577936472 ]),
    Int8List.fromList([ 4 ]),
    3600000000,
    [ '+04' ],
    [ false ],
  );

  static final Timezone dushanbe = DynamicTimezone(
    'Asia/Dushanbe',
    DynamicTimezoneSpan(
      -1,
      16512000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441168512,
      dst: false,
    ),
    Int64List.fromList([ -1441168512, -1247547600, 354909600, 370717200, 386445600, 402253200, 417981600, 433789200, 449604000, 465336000, 481060800, 496785600, 512510400, 528235200, 543960000, 559684800, 575409600, 591134400, 606859200, 622584000, 638308800, 654638400, 670363200, 684363600 ]),
    Int8List.fromList([ 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 5 ]),
    3600000000,
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone famagusta = DynamicTimezone(
    'Asia/Famagusta',
    DynamicTimezoneSpan(
      -1,
      8148000000,
      'LMT',
      TimezoneSpan.range.min,
      -1518920148,
      dst: false,
    ),
    Int64List.fromList([ -1518920148, 166572000, 182293200, 200959200, 213829200, 228866400, 243982800, 260316000, 276123600, 291765600, 307486800, 323820000, 338936400, 354664800, 370386000, 386114400, 401835600, 417564000, 433285200, 449013600, 465339600, 481068000, 496789200, 512517600, 528238800, 543967200, 559688400, 575416800, 591138000, 606866400, 622587600, 638316000, 654642000, 670370400, 686091600, 701820000, 717541200, 733269600, 748990800, 764719200, 780440400, 796168800, 811890000, 828223200, 843944400, 859672800, 875394000, 891122400, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1473282000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2 ]),
    3600000000,

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone gaza = DynamicTimezone(
    'Asia/Gaza',
    DynamicTimezoneSpan(
      -1,
      8272000000,
      'LMT',
      TimezoneSpan.range.min,
      -2185409872,
      dst: false,
    ),
    Int64List.fromList([ -2185409872, -933638400, -923097600, -919036800, -857347200, -844300800, -825811200, -812678400, -794188800, -779846400, -762652800, -748310400, -731116800, -682653600, -399088800, -386650800, -368330400, -355114800, -336790800, -323654400, -305168400, -292032000, -273632400, -260496000, -242096400, -228960000, -210560400, -197424000, -178938000, -165801600, -147402000, -134265600, -115866000, -102643200, -84330000, -81313200, 142380000, 150843600, 167176800, 178664400, 334101600, 337730400, 452642400, 462319200, 482277600, 494370000, 516751200, 526424400, 545436000, 558478800, 576626400, 589323600, 609890400, 620773200, 638316000, 651618000, 669765600, 683672400, 701820000, 715726800, 733701600, 747176400, 765151200, 778021200, 796600800, 810075600, 820447200, 828655200, 843170400, 860104800, 874620000, 891554400, 906069600, 915141600, 924213600, 939934800, 956268000, 971989200, 987717600, 1003438800, 1019167200, 1034888400, 1050616800, 1066338000, 1082066400, 1096581600, 1113516000, 1128380400, 1143842400, 1158872400, 1175378400, 1189638000, 1206655200, 1219957200, 1238104800, 1252015200, 1269640860, 1281474000, 1301608860, 1312146000, 1333058400, 1348178400, 1364508000, 1380229200, 1395957600, 1414098000, 1427493600, 1445551200, 1458946800, 1477692000, 1490396400, 1509141600, 1521846000, 1540591200, 1553810400, 1572037200, 1585346400, 1603490400, 1616796000, 1635458400, 1648332000, 1666998000, 1682726400, 1698447600, 1712966400, 1729897200, 1743811200, 1761346800, 1774656000, 1792796400, 1806105600, 1824850800, 1837555200, 1856300400, 1869004800, 1887750000, 1901059200, 1919199600, 1932508800, 1950649200, 1963958400, 1982703600, 1995408000, 2014153200, 2026857600, 2045602800, 2058307200, 2077052400, 2090361600, 2107897200, 2121811200, 2138742000, 2153260800, 2168982000, 2184710400, 2199826800, 2202854400, 2203455600, 2216160000, 2230066800, 2233699200, 2234905200, 2248214400, 2260911600, 2263939200, 2266354800, 2279664000, 2291756400, 2294784000, 2297804400, 2311113600, 2321996400, 2325628800, 2329254000, 2342563200, 2352841200, 2355868800, 2361308400, 2374012800, 2383686000, 2386713600, 2392758000, 2405462400, 2413926000, 2417558400, 2424207600, 2437516800, 2444770800, 2447798400, 2455657200, 2468966400, 2475010800, 2478643200, 2487106800, 2500416000, 2505855600, 2508883200, 2519161200, 2531865600, 2536700400, 2539728000, 2550610800, 2563315200, 2566940400, 2570572800, 2582060400, 2595369600, 2597785200, 2600812800, 2613510000, 2626819200, 2628025200, 2631657600, 2644959600, 2658268800, 2658870000, 2662502400, 2676409200, 2692742400, 2708463600, 2723587200, 2739913200, 2753827200, 2771362800, 2784672000, 2802812400, 2816121600, 2834262000, 2847571200, 2866316400, 2879020800, 2897766000, 2910470400, 2929215600, 2941920000, 2960665200, 2973974400, 2992114800, 3005424000, 3023564400, 3036873600, 3055618800, 3068323200, 3087068400, 3099772800, 3117913200, 3131827200, 3148758000, 3163276800, 3179602800, 3194726400, 3209842800, 3226176000, 3240687600, 3243715200, 3271532400, 3274560000, 3301772400, 3305404800, 3332617200, 3335644800, 3339270000, 3352579200, 3362857200, 3366489600, 3370719600, 3384028800, 3393702000, 3397334400, 3402774000, 3415478400, 3424546800, 3427574400, 3434223600, 3446928000, 3454786800, 3458419200, 3465673200, 3478982400, 3485631600, 3488659200, 3497122800, 3510432000, 3516476400, 3519504000, 3528572400, 3541881600, 3546716400, 3550348800, 3560022000, 3573331200, 3577561200, 3580588800, 3592076400, 3604780800, 3607801200, 3611433600, 3623526000, 3636230400, 3638646000, 3642278400, 3654975600, 3668284800, 3669490800, 3672518400, 3686425200, 3699734400, 3717874800, 3731184000, 3749929200, 3762633600, 3781378800, 3794083200, 3812828400, 3825532800, 3844278000, 3857587200, 3875727600, 3889036800, 3907177200, 3920486400, 3939231600, 3951936000, 3970681200, 3983385600, 4002130800, 4015440000, 4033580400, 4046889600, 4065030000, 4078339200, 4096479600, 4109788800, 4128534000, 4141238400, 4159983600, 4172688000, 4191433200, 4204137600, 4222882800, 4236192000, 4254332400, 4267641600, 4285782000, 4299091200, 4317836400, 4330540800, 4349286000, 4361990400, 4380735600, 4394044800, 4412185200, 4425494400, 4443634800, 4456944000, 4475084400, 4488393600, 4507138800, 4519843200, 4538588400, 4551292800, 4570038000, 4583347200, 4601487600, 4614796800, 4632937200, 4646246400, 4664991600, 4677696000, 4696441200, 4709145600, 4727890800, 4741200000, 4759340400, 4772649600, 4790790000, 4804099200, 4822239600, 4835548800, 4854294000, 4866998400, 4885743600, 4898448000, 4917193200, 4930502400, 4948642800, 4961952000, 4980092400, 4993401600, 5012146800, 5024851200, 5043596400, 5056300800, 5075046000, 5087750400, 5106495600, 5119804800, 5137945200, 5151254400, 5169394800, 5182704000, 5201449200, 5214153600, 5232898800, 5245603200, 5264348400, 5277657600, 5295798000, 5309107200, 5327247600, 5340556800, 5358697200, 5372006400, 5390751600, 5403456000, 5422201200, 5434905600, 5453650800, 5466960000, 5485100400, 5498409600, 5516550000, 5529859200, 5548604400, 5561308800, 5580054000, 5592758400, 5611503600, 5624812800, 5642953200, 5656262400, 5674402800, 5687712000, 5705852400, 5719161600, 5737906800, 5750611200, 5769356400, 5782060800, 5800806000, 5814115200, 5832255600, 5845564800, 5863705200, 5877014400, 5895759600, 5908464000, 5927209200, 5939913600, 5958658800, 5971363200, 5990108400, 6003417600, 6021558000, 6034867200, 6053007600, 6066316800, 6085062000, 6097766400, 6116511600, 6129216000, 6147961200, 6161270400, 6179410800, 6192720000, 6210860400, 6224169600, 6242310000, 6255619200, 6274364400, 6287068800, 6305814000, 6318518400, 6337263600, 6350572800, 6368713200, 6382022400, 6400162800, 6413472000, 6432217200, 6444921600, 6463666800, 6476371200, 6495116400, 6508425600, 6526566000, 6539875200, 6558015600, 6571324800, 6589465200, 6602774400, 6621519600, 6634224000, 6652969200, 6665673600, 6684418800, 6697728000, 6715868400, 6729177600, 6747318000, 6760627200, 6779372400, 6792076800, 6810822000, 6823526400, 6842271600, 6854976000, 6873721200, 6887030400, 6905170800, 6918480000, 6936620400, 6949929600, 6968674800, 6981379200, 7000124400, 7012828800, 7031574000, 7044883200, 7063023600, 7076332800, 7094473200, 7107782400, 7125922800, 7139232000, 7157977200, 7170681600, 7189426800, 7202131200, 7220876400, 7234185600, 7252326000, 7265635200, 7283775600, 7297084800, 7315225200, 7328534400, 7347279600, 7359984000, 7378729200, 7391433600, 7410178800, 7423488000, 7441628400, 7454937600, 7473078000, 7486387200, 7504527600, 7517836800, 7536582000, 7549286400, 7568031600, 7580736000, 7599481200, 7612790400, 7630930800, 7644240000, 7662380400, 7675689600, 7694434800, 7707139200, 7725884400, 7738588800, 7757334000, 7770643200, 7788783600, 7802092800, 7820233200, 7833542400, 7851682800, 7864992000, 7883737200, 7896441600, 7915186800, 7927891200, 7946636400, 7959945600, 7978086000, 7991395200, 8009535600, 8022844800, 8041590000, 8054294400, 8073039600, 8085744000, 8104489200, 8117193600, 8135938800, 8149248000, 8167388400, 8180697600, 8198838000, 8212147200, 8230892400, 8243596800, 8262342000, 8275046400, 8293791600, 8307100800, 8325241200, 8338550400, 8356690800, 8370000000, 8388140400, 8401449600, 8420194800, 8432899200, 8451644400, 8464348800, 8483094000, 8496403200, 8514543600, 8527852800, 8545993200, 8559302400, 8578047600, 8590752000, 8609497200, 8622201600, 8640946800, 8654256000, 8672396400, 8685705600, 8703846000, 8717155200, 8735295600, 8748604800, 8767350000, 8780054400, 8798799600, 8811504000, 8830249200, 8843558400, 8861698800, 8875008000, 8893148400, 8906457600, 8925202800, 8937907200, 8956652400, 8969356800, 8988102000, 9000806400, 9019551600, 9032860800, 9051001200, 9064310400, 9082450800, 9095760000, 9114505200, 9127209600, 9145954800, 9158659200, 9177404400, 9190713600, 9208854000, 9222163200, 9240303600, 9253612800, 9271753200, 9285062400, 9303807600, 9316512000, 9335257200, 9347961600, 9366706800, 9380016000, 9398156400, 9411465600, 9429606000, 9442915200, 9461660400, 9474364800, 9493110000, 9505814400, 9524559600, 9537868800, 9556009200, 9569318400, 9587458800, 9600768000, 9618908400, 9632217600, 9650962800, 9663667200, 9682412400, 9695116800, 9713862000, 9727171200, 9745311600, 9758620800, 9776761200, 9790070400, 9808815600, 9821520000, 9840265200, 9852969600, 9871714800, 9884419200, 9903164400, 9916473600, 9934614000, 9947923200, 9966063600, 9979372800, 9998118000, 10010822400, 10029567600, 10042272000, 10061017200, 10074326400, 10092466800, 10105776000, 10123916400, 10137225600, 10155366000, 10168675200, 10187420400, 10200124800, 10218870000, 10231574400, 10250319600, 10263628800, 10281769200, 10295078400, 10313218800, 10326528000, 10345273200, 10357977600, 10376722800, 10389427200, 10408172400, 10420876800, 10439622000, 10452931200, 10471071600, 10484380800, 10502521200, 10515830400, 10533970800, 10547280000, 10566025200, 10578729600, 10597474800, 10610179200, 10628924400, 10642233600, 10660374000, 10673683200, 10691823600, 10705132800, 10723878000, 10736582400, 10755327600, 10768032000, 10786777200, 10800086400, 10818226800, 10831536000, 10849676400, 10862985600, 10881126000, 10894435200, 10913180400, 10925884800, 10944630000, 10957334400, 10976079600, 10989388800, 11007529200, 11020838400, 11038978800, 11052288000, 11071033200, 11083737600, 11102482800, 11115187200, 11133932400, 11146636800, 11165382000, 11178691200, 11196831600, 11210140800, 11228281200, 11241590400, 11260335600, 11273040000, 11291785200, 11304489600, 11323234800, 11336544000, 11354684400, 11367993600, 11386134000, 11399443200, 11417583600, 11430892800, 11449638000, 11462342400, 11481087600, 11493792000, 11512537200, 11525846400, 11543986800, 11557296000, 11575436400, 11588745600, 11607490800, 11620195200, 11638940400, 11651644800, 11670390000, 11683699200, 11701839600, 11715148800, 11733289200, 11746598400, 11764738800, 11778048000, 11796793200, 11809497600, 11828242800, 11840947200, 11859692400, 11873001600, 11891142000, 11904451200, 11922591600, 11935900800, 11954646000, 11967350400, 11986095600, 11998800000, 12017545200, 12030249600, 12048994800, 12062304000, 12080444400, 12093753600, 12111894000, 12125203200, 12143948400, 12156652800, 12175398000, 12188102400, 12206847600, 12220156800, 12238297200, 12251606400, 12269746800, 12283056000, 12301196400, 12314505600, 12333250800, 12345955200, 12364700400, 12377404800, 12396150000, 12409459200, 12427599600, 12440908800, 12459049200, 12472358400, 12491103600, 12503808000, 12522553200, 12535257600, 12554002800, 12567312000, 12585452400, 12598761600, 12616902000, 12630211200, 12648351600, 12661660800, 12680406000, 12693110400, 12711855600, 12724560000, 12743305200, 12756614400, 12774754800, 12788064000, 12806204400, 12819513600, 12838258800, 12850963200, 12869708400, 12882412800, 12901158000, 12913862400, 12932607600, 12945916800, 12964057200, 12977366400, 12995506800, 13008816000, 13027561200, 13040265600, 13059010800, 13071715200, 13090460400, 13103769600, 13121910000, 13135219200, 13153359600, 13166668800, 13184809200, 13198118400, 13216863600, 13229568000, 13248313200, 13261017600, 13279762800, 13293072000, 13311212400, 13324521600, 13342662000, 13355971200, 13374716400, 13387420800, 13406166000, 13418870400, 13437615600, 13450924800, 13469065200, 13482374400, 13500514800, 13513824000, 13531964400, 13545273600, 13564018800, 13576723200, 13595468400, 13608172800, 13626918000, 13640227200, 13658367600, 13671676800, 13689817200, 13703126400, 13721871600, 13734576000, 13753321200, 13766025600, 13784770800, 13797475200, 13816220400, 13829529600, 13847670000, 13860979200, 13879119600, 13892428800, 13911174000, 13923878400, 13942623600, 13955328000, 13974073200, 13987382400, 14005522800, 14018832000, 14036972400, 14050281600, 14068422000, 14081731200, 14100476400, 14113180800, 14131926000, 14144630400, 14163375600, 14176684800, 14194825200, 14208134400, 14226274800, 14239584000, 14258329200, 14271033600, 14289778800, 14302483200, 14321228400, 14334537600, 14352678000, 14365987200, 14384127600, 14397436800, 14415577200, 14428886400, 14447631600, 14460336000, 14479081200, 14491785600, 14510530800, 14523840000, 14541980400, 14555289600, 14573430000, 14586739200, 14605484400, 14618188800, 14636934000, 14649638400, 14668383600, 14681088000, 14699833200, 14713142400, 14731282800, 14744592000, 14762732400, 14776041600, 14794786800, 14807491200, 14826236400, 14838940800, 14857686000, 14870995200, 14889135600, 14902444800, 14920585200, 14933894400, 14952034800, 14965344000, 14984089200, 14996793600, 15015538800, 15028243200, 15046988400, 15060297600, 15078438000, 15091747200, 15109887600, 15123196800, 15141942000, 15154646400, 15173391600, 15186096000, 15204841200, 15218150400, 15236290800, 15249600000, 15267740400, 15281049600, 15299190000, 15312499200, 15331244400, 15343948800, 15362694000, 15375398400, 15394143600, 15407452800, 15425593200, 15438902400, 15457042800, 15470352000, 15489097200, 15501801600, 15520546800, 15533251200, 15551996400, 15564700800, 15583446000, 15596755200, 15614895600, 15628204800, 15646345200, 15659654400, 15678399600, 15691104000, 15709849200, 15722553600, 15741298800, 15754608000, 15772748400, 15786057600, 15804198000, 15817507200, 15835647600, 15848956800, 15867702000, 15880406400, 15899151600, 15911856000, 15930601200, 15943910400, 15962050800, 15975360000, 15993500400, 16006809600, 16025554800, 16038259200, 16057004400, 16069708800, 16088454000, 16101763200, 16119903600, 16133212800, 16151353200, 16164662400, 16182802800, 16196112000, 16214857200, 16227561600, 16246306800, 16259011200, 16277756400, 16291065600, 16309206000 ]),
    Int8List.fromList([ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2 ]),
    3600000000,
    [ 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone harbin = DynamicTimezone(
    'Asia/Harbin',
    DynamicTimezoneSpan(
      -1,
      29143000000,
      'LMT',
      TimezoneSpan.range.min,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943, -1600675200, -1585904400, -933667200, -922093200, -908870400, -888829200, -881049600, -767869200, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -650019600, 515527200, 527014800, 545162400, 558464400, 577216800, 589914000, 608666400, 621968400, 640116000, 653418000, 671565600, 684867600 ]),
    Int8List.fromList([ 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone hebron = DynamicTimezone(
    'Asia/Hebron',
    DynamicTimezoneSpan(
      -1,
      8423000000,
      'LMT',
      TimezoneSpan.range.min,
      -2185410023,
      dst: false,
    ),
    Int64List.fromList([ -2185410023, -933638400, -923097600, -919036800, -857347200, -844300800, -825811200, -812678400, -794188800, -779846400, -762652800, -748310400, -731116800, -682653600, -399088800, -386650800, -368330400, -355114800, -336790800, -323654400, -305168400, -292032000, -273632400, -260496000, -242096400, -228960000, -210560400, -197424000, -178938000, -165801600, -147402000, -134265600, -115866000, -102643200, -84330000, -81313200, 142380000, 150843600, 167176800, 178664400, 334101600, 337730400, 452642400, 462319200, 482277600, 494370000, 516751200, 526424400, 545436000, 558478800, 576626400, 589323600, 609890400, 620773200, 638316000, 651618000, 669765600, 683672400, 701820000, 715726800, 733701600, 747176400, 765151200, 778021200, 796600800, 810075600, 820447200, 828655200, 843170400, 860104800, 874620000, 891554400, 906069600, 915141600, 924213600, 939934800, 956268000, 971989200, 987717600, 1003438800, 1019167200, 1034888400, 1050616800, 1066338000, 1082066400, 1096581600, 1113516000, 1128380400, 1143842400, 1158872400, 1175378400, 1189638000, 1206655200, 1220216400, 1238104800, 1252015200, 1269554400, 1281474000, 1301608860, 1312146000, 1314655200, 1317330000, 1333058400, 1348178400, 1364508000, 1380229200, 1395957600, 1414098000, 1427493600, 1445551200, 1458946800, 1477692000, 1490396400, 1509141600, 1521846000, 1540591200, 1553810400, 1572037200, 1585346400, 1603490400, 1616796000, 1635458400, 1648332000, 1666998000, 1682726400, 1698447600, 1712966400, 1729897200, 1743811200, 1761346800, 1774656000, 1792796400, 1806105600, 1824850800, 1837555200, 1856300400, 1869004800, 1887750000, 1901059200, 1919199600, 1932508800, 1950649200, 1963958400, 1982703600, 1995408000, 2014153200, 2026857600, 2045602800, 2058307200, 2077052400, 2090361600, 2107897200, 2121811200, 2138742000, 2153260800, 2168982000, 2184710400, 2199826800, 2202854400, 2203455600, 2216160000, 2230066800, 2233699200, 2234905200, 2248214400, 2260911600, 2263939200, 2266354800, 2279664000, 2291756400, 2294784000, 2297804400, 2311113600, 2321996400, 2325628800, 2329254000, 2342563200, 2352841200, 2355868800, 2361308400, 2374012800, 2383686000, 2386713600, 2392758000, 2405462400, 2413926000, 2417558400, 2424207600, 2437516800, 2444770800, 2447798400, 2455657200, 2468966400, 2475010800, 2478643200, 2487106800, 2500416000, 2505855600, 2508883200, 2519161200, 2531865600, 2536700400, 2539728000, 2550610800, 2563315200, 2566940400, 2570572800, 2582060400, 2595369600, 2597785200, 2600812800, 2613510000, 2626819200, 2628025200, 2631657600, 2644959600, 2658268800, 2658870000, 2662502400, 2676409200, 2692742400, 2708463600, 2723587200, 2739913200, 2753827200, 2771362800, 2784672000, 2802812400, 2816121600, 2834262000, 2847571200, 2866316400, 2879020800, 2897766000, 2910470400, 2929215600, 2941920000, 2960665200, 2973974400, 2992114800, 3005424000, 3023564400, 3036873600, 3055618800, 3068323200, 3087068400, 3099772800, 3117913200, 3131827200, 3148758000, 3163276800, 3179602800, 3194726400, 3209842800, 3226176000, 3240687600, 3243715200, 3271532400, 3274560000, 3301772400, 3305404800, 3332617200, 3335644800, 3339270000, 3352579200, 3362857200, 3366489600, 3370719600, 3384028800, 3393702000, 3397334400, 3402774000, 3415478400, 3424546800, 3427574400, 3434223600, 3446928000, 3454786800, 3458419200, 3465673200, 3478982400, 3485631600, 3488659200, 3497122800, 3510432000, 3516476400, 3519504000, 3528572400, 3541881600, 3546716400, 3550348800, 3560022000, 3573331200, 3577561200, 3580588800, 3592076400, 3604780800, 3607801200, 3611433600, 3623526000, 3636230400, 3638646000, 3642278400, 3654975600, 3668284800, 3669490800, 3672518400, 3686425200, 3699734400, 3717874800, 3731184000, 3749929200, 3762633600, 3781378800, 3794083200, 3812828400, 3825532800, 3844278000, 3857587200, 3875727600, 3889036800, 3907177200, 3920486400, 3939231600, 3951936000, 3970681200, 3983385600, 4002130800, 4015440000, 4033580400, 4046889600, 4065030000, 4078339200, 4096479600, 4109788800, 4128534000, 4141238400, 4159983600, 4172688000, 4191433200, 4204137600, 4222882800, 4236192000, 4254332400, 4267641600, 4285782000, 4299091200, 4317836400, 4330540800, 4349286000, 4361990400, 4380735600, 4394044800, 4412185200, 4425494400, 4443634800, 4456944000, 4475084400, 4488393600, 4507138800, 4519843200, 4538588400, 4551292800, 4570038000, 4583347200, 4601487600, 4614796800, 4632937200, 4646246400, 4664991600, 4677696000, 4696441200, 4709145600, 4727890800, 4741200000, 4759340400, 4772649600, 4790790000, 4804099200, 4822239600, 4835548800, 4854294000, 4866998400, 4885743600, 4898448000, 4917193200, 4930502400, 4948642800, 4961952000, 4980092400, 4993401600, 5012146800, 5024851200, 5043596400, 5056300800, 5075046000, 5087750400, 5106495600, 5119804800, 5137945200, 5151254400, 5169394800, 5182704000, 5201449200, 5214153600, 5232898800, 5245603200, 5264348400, 5277657600, 5295798000, 5309107200, 5327247600, 5340556800, 5358697200, 5372006400, 5390751600, 5403456000, 5422201200, 5434905600, 5453650800, 5466960000, 5485100400, 5498409600, 5516550000, 5529859200, 5548604400, 5561308800, 5580054000, 5592758400, 5611503600, 5624812800, 5642953200, 5656262400, 5674402800, 5687712000, 5705852400, 5719161600, 5737906800, 5750611200, 5769356400, 5782060800, 5800806000, 5814115200, 5832255600, 5845564800, 5863705200, 5877014400, 5895759600, 5908464000, 5927209200, 5939913600, 5958658800, 5971363200, 5990108400, 6003417600, 6021558000, 6034867200, 6053007600, 6066316800, 6085062000, 6097766400, 6116511600, 6129216000, 6147961200, 6161270400, 6179410800, 6192720000, 6210860400, 6224169600, 6242310000, 6255619200, 6274364400, 6287068800, 6305814000, 6318518400, 6337263600, 6350572800, 6368713200, 6382022400, 6400162800, 6413472000, 6432217200, 6444921600, 6463666800, 6476371200, 6495116400, 6508425600, 6526566000, 6539875200, 6558015600, 6571324800, 6589465200, 6602774400, 6621519600, 6634224000, 6652969200, 6665673600, 6684418800, 6697728000, 6715868400, 6729177600, 6747318000, 6760627200, 6779372400, 6792076800, 6810822000, 6823526400, 6842271600, 6854976000, 6873721200, 6887030400, 6905170800, 6918480000, 6936620400, 6949929600, 6968674800, 6981379200, 7000124400, 7012828800, 7031574000, 7044883200, 7063023600, 7076332800, 7094473200, 7107782400, 7125922800, 7139232000, 7157977200, 7170681600, 7189426800, 7202131200, 7220876400, 7234185600, 7252326000, 7265635200, 7283775600, 7297084800, 7315225200, 7328534400, 7347279600, 7359984000, 7378729200, 7391433600, 7410178800, 7423488000, 7441628400, 7454937600, 7473078000, 7486387200, 7504527600, 7517836800, 7536582000, 7549286400, 7568031600, 7580736000, 7599481200, 7612790400, 7630930800, 7644240000, 7662380400, 7675689600, 7694434800, 7707139200, 7725884400, 7738588800, 7757334000, 7770643200, 7788783600, 7802092800, 7820233200, 7833542400, 7851682800, 7864992000, 7883737200, 7896441600, 7915186800, 7927891200, 7946636400, 7959945600, 7978086000, 7991395200, 8009535600, 8022844800, 8041590000, 8054294400, 8073039600, 8085744000, 8104489200, 8117193600, 8135938800, 8149248000, 8167388400, 8180697600, 8198838000, 8212147200, 8230892400, 8243596800, 8262342000, 8275046400, 8293791600, 8307100800, 8325241200, 8338550400, 8356690800, 8370000000, 8388140400, 8401449600, 8420194800, 8432899200, 8451644400, 8464348800, 8483094000, 8496403200, 8514543600, 8527852800, 8545993200, 8559302400, 8578047600, 8590752000, 8609497200, 8622201600, 8640946800, 8654256000, 8672396400, 8685705600, 8703846000, 8717155200, 8735295600, 8748604800, 8767350000, 8780054400, 8798799600, 8811504000, 8830249200, 8843558400, 8861698800, 8875008000, 8893148400, 8906457600, 8925202800, 8937907200, 8956652400, 8969356800, 8988102000, 9000806400, 9019551600, 9032860800, 9051001200, 9064310400, 9082450800, 9095760000, 9114505200, 9127209600, 9145954800, 9158659200, 9177404400, 9190713600, 9208854000, 9222163200, 9240303600, 9253612800, 9271753200, 9285062400, 9303807600, 9316512000, 9335257200, 9347961600, 9366706800, 9380016000, 9398156400, 9411465600, 9429606000, 9442915200, 9461660400, 9474364800, 9493110000, 9505814400, 9524559600, 9537868800, 9556009200, 9569318400, 9587458800, 9600768000, 9618908400, 9632217600, 9650962800, 9663667200, 9682412400, 9695116800, 9713862000, 9727171200, 9745311600, 9758620800, 9776761200, 9790070400, 9808815600, 9821520000, 9840265200, 9852969600, 9871714800, 9884419200, 9903164400, 9916473600, 9934614000, 9947923200, 9966063600, 9979372800, 9998118000, 10010822400, 10029567600, 10042272000, 10061017200, 10074326400, 10092466800, 10105776000, 10123916400, 10137225600, 10155366000, 10168675200, 10187420400, 10200124800, 10218870000, 10231574400, 10250319600, 10263628800, 10281769200, 10295078400, 10313218800, 10326528000, 10345273200, 10357977600, 10376722800, 10389427200, 10408172400, 10420876800, 10439622000, 10452931200, 10471071600, 10484380800, 10502521200, 10515830400, 10533970800, 10547280000, 10566025200, 10578729600, 10597474800, 10610179200, 10628924400, 10642233600, 10660374000, 10673683200, 10691823600, 10705132800, 10723878000, 10736582400, 10755327600, 10768032000, 10786777200, 10800086400, 10818226800, 10831536000, 10849676400, 10862985600, 10881126000, 10894435200, 10913180400, 10925884800, 10944630000, 10957334400, 10976079600, 10989388800, 11007529200, 11020838400, 11038978800, 11052288000, 11071033200, 11083737600, 11102482800, 11115187200, 11133932400, 11146636800, 11165382000, 11178691200, 11196831600, 11210140800, 11228281200, 11241590400, 11260335600, 11273040000, 11291785200, 11304489600, 11323234800, 11336544000, 11354684400, 11367993600, 11386134000, 11399443200, 11417583600, 11430892800, 11449638000, 11462342400, 11481087600, 11493792000, 11512537200, 11525846400, 11543986800, 11557296000, 11575436400, 11588745600, 11607490800, 11620195200, 11638940400, 11651644800, 11670390000, 11683699200, 11701839600, 11715148800, 11733289200, 11746598400, 11764738800, 11778048000, 11796793200, 11809497600, 11828242800, 11840947200, 11859692400, 11873001600, 11891142000, 11904451200, 11922591600, 11935900800, 11954646000, 11967350400, 11986095600, 11998800000, 12017545200, 12030249600, 12048994800, 12062304000, 12080444400, 12093753600, 12111894000, 12125203200, 12143948400, 12156652800, 12175398000, 12188102400, 12206847600, 12220156800, 12238297200, 12251606400, 12269746800, 12283056000, 12301196400, 12314505600, 12333250800, 12345955200, 12364700400, 12377404800, 12396150000, 12409459200, 12427599600, 12440908800, 12459049200, 12472358400, 12491103600, 12503808000, 12522553200, 12535257600, 12554002800, 12567312000, 12585452400, 12598761600, 12616902000, 12630211200, 12648351600, 12661660800, 12680406000, 12693110400, 12711855600, 12724560000, 12743305200, 12756614400, 12774754800, 12788064000, 12806204400, 12819513600, 12838258800, 12850963200, 12869708400, 12882412800, 12901158000, 12913862400, 12932607600, 12945916800, 12964057200, 12977366400, 12995506800, 13008816000, 13027561200, 13040265600, 13059010800, 13071715200, 13090460400, 13103769600, 13121910000, 13135219200, 13153359600, 13166668800, 13184809200, 13198118400, 13216863600, 13229568000, 13248313200, 13261017600, 13279762800, 13293072000, 13311212400, 13324521600, 13342662000, 13355971200, 13374716400, 13387420800, 13406166000, 13418870400, 13437615600, 13450924800, 13469065200, 13482374400, 13500514800, 13513824000, 13531964400, 13545273600, 13564018800, 13576723200, 13595468400, 13608172800, 13626918000, 13640227200, 13658367600, 13671676800, 13689817200, 13703126400, 13721871600, 13734576000, 13753321200, 13766025600, 13784770800, 13797475200, 13816220400, 13829529600, 13847670000, 13860979200, 13879119600, 13892428800, 13911174000, 13923878400, 13942623600, 13955328000, 13974073200, 13987382400, 14005522800, 14018832000, 14036972400, 14050281600, 14068422000, 14081731200, 14100476400, 14113180800, 14131926000, 14144630400, 14163375600, 14176684800, 14194825200, 14208134400, 14226274800, 14239584000, 14258329200, 14271033600, 14289778800, 14302483200, 14321228400, 14334537600, 14352678000, 14365987200, 14384127600, 14397436800, 14415577200, 14428886400, 14447631600, 14460336000, 14479081200, 14491785600, 14510530800, 14523840000, 14541980400, 14555289600, 14573430000, 14586739200, 14605484400, 14618188800, 14636934000, 14649638400, 14668383600, 14681088000, 14699833200, 14713142400, 14731282800, 14744592000, 14762732400, 14776041600, 14794786800, 14807491200, 14826236400, 14838940800, 14857686000, 14870995200, 14889135600, 14902444800, 14920585200, 14933894400, 14952034800, 14965344000, 14984089200, 14996793600, 15015538800, 15028243200, 15046988400, 15060297600, 15078438000, 15091747200, 15109887600, 15123196800, 15141942000, 15154646400, 15173391600, 15186096000, 15204841200, 15218150400, 15236290800, 15249600000, 15267740400, 15281049600, 15299190000, 15312499200, 15331244400, 15343948800, 15362694000, 15375398400, 15394143600, 15407452800, 15425593200, 15438902400, 15457042800, 15470352000, 15489097200, 15501801600, 15520546800, 15533251200, 15551996400, 15564700800, 15583446000, 15596755200, 15614895600, 15628204800, 15646345200, 15659654400, 15678399600, 15691104000, 15709849200, 15722553600, 15741298800, 15754608000, 15772748400, 15786057600, 15804198000, 15817507200, 15835647600, 15848956800, 15867702000, 15880406400, 15899151600, 15911856000, 15930601200, 15943910400, 15962050800, 15975360000, 15993500400, 16006809600, 16025554800, 16038259200, 16057004400, 16069708800, 16088454000, 16101763200, 16119903600, 16133212800, 16151353200, 16164662400, 16182802800, 16196112000, 16214857200, 16227561600, 16246306800, 16259011200, 16277756400, 16291065600, 16309206000 ]),
    Int8List.fromList([ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2 ]),
    3600000000,
    [ 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone hoChiMinh = DynamicTimezone(
    'Asia/Ho_Chi_Minh',
    DynamicTimezoneSpan(
      -1,
      25590000000,
      'LMT',
      TimezoneSpan.range.min,
      -2004073590,
      dst: false,
    ),
    Int64List.fromList([ -2004073590, -1851577590, -852105600, -782643600, -767869200, -718095600, -457776000, -315648000, 171820800 ]),
    Int32List.fromList([ 25590, 25200, 28800, 32400, 25200, 28800, 25200, 28800, 25200 ]),
    1000000,
    [ 'PLMT', '+07', '+08', '+09', '+07', '+08', '+07', '+08', '+07' ],
    [ false, false, false, false, false, false, false, false, false ],
  );

  static final Timezone hongKong = DynamicTimezone(
    'Asia/Hong_Kong',
    DynamicTimezoneSpan(
      -1,
      27402000000,
      'LMT',
      TimezoneSpan.range.min,
      -2056690800,
      dst: false,
    ),
    Int64List.fromList([ -2056690800, -900910800, -891579600, -884248200, -761209200, -747907200, -728541000, -717049800, -697091400, -683785800, -668061000, -654755400, -636611400, -623305800, -605161800, -591856200, -573712200, -559801800, -541657800, -528352200, -510211800, -498112200, -478762200, -466662600, -446707800, -435213000, -415258200, -403158600, -383808600, -371709000, -352359000, -340259400, -320909400, -308809800, -288855000, -277360200, -257405400, -245910600, -225955800, -213856200, -194506200, -182406600, -163056600, -148537800, -132816600, -117088200, -101367000, -85638600, -69312600, -53584200, -37863000, -22134600, -6413400, 9315000, 25036200, 40764600, 56485800, 72214200, 88540200, 104268600, 119989800, 126041400, 151439400, 167167800, 182889000, 198617400, 214338600, 295385400, 309292200 ]),
    Int16List.fromList([ 480, 540, 510, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480 ]),
    60000000,
    [ 'HKT', 'HKST', 'HKWT', 'JST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT' ],
    [ false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone hovd = DynamicTimezone(
    'Asia/Hovd',
    DynamicTimezoneSpan(
      -1,
      21996000000,
      'LMT',
      TimezoneSpan.range.min,
      -2032927596,
      dst: false,
    ),
    Int64List.fromList([ -2032927596, 252439200, 417978000, 433785600, 449600400, 465321600, 481050000, 496771200, 512499600, 528220800, 543949200, 559670400, 575398800, 591120000, 606848400, 622569600, 638298000, 654624000, 670352400, 686073600, 701802000, 717523200, 733251600, 748972800, 764701200, 780422400, 796150800, 811872000, 828205200, 843926400, 859654800, 875376000, 891104400, 906825600, 988398000, 1001700000, 1017428400, 1033149600, 1048878000, 1064599200, 1080327600, 1096048800, 1111777200, 1127498400, 1143226800, 1159552800, 1427482800, 1443196800, 1458932400, 1474646400 ]),
    Int8List.fromList([ 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7 ]),
    3600000000,
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone irkutsk = DynamicTimezone(
    'Asia/Irkutsk',
    DynamicTimezoneSpan(
      -1,
      25025000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840165825,
      dst: false,
    ),
    Int64List.fromList([ -2840165825, -1575874625, -1247554800, 354902400, 370710000, 386438400, 402246000, 417974400, 433782000, 449596800, 465328800, 481053600, 496778400, 512503200, 528228000, 543952800, 559677600, 575402400, 591127200, 606852000, 622576800, 638301600, 654631200, 670356000, 686084400, 695761200, 701805600, 717530400, 733255200, 748980000, 764704800, 780429600, 796154400, 811879200, 828208800, 846352800, 859658400, 877802400, 891108000, 909252000, 922557600, 941306400, 954007200, 972756000, 985456800, 1004205600, 1017511200, 1035655200, 1048960800, 1067104800, 1080410400, 1099159200, 1111860000, 1130608800, 1143309600, 1162058400, 1174759200, 1193508000, 1206813600, 1224957600, 1238263200, 1256407200, 1269712800, 1288461600, 1301162400, 1414256400 ]),
    Int32List.fromList([ 25025, 25200, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 28800, 25200, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800, 32400, 28800 ]),
    1000000,
    [ 'IMT', '+07', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+08', '+07', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone istanbul = DynamicTimezone(
    'Asia/Istanbul',
    DynamicTimezoneSpan(
      -1,
      6952000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840147752,
      dst: false,
    ),
    Int64List.fromList([ -2840147752, -1869875816, -1693706400, -1680490800, -1570413600, -1552186800, -1538359200, -1522551600, -1507514400, -1490583600, -1440208800, -1428030000, -1409709600, -1396494000, -931053600, -922676400, -917834400, -892436400, -875844000, -764737200, -744343200, -733806000, -716436000, -701924400, -684986400, -670474800, -654141600, -639025200, -622087200, -606970800, -590032800, -575521200, -235620000, -194842800, -177732000, -165726000, 107910000, 121215600, 133920000, 152665200, 164678400, 184114800, 196214400, 215564400, 228873600, 245804400, 260323200, 267915600, 428454000, 433893600, 468111600, 482799600, 496710000, 512521200, 528246000, 543970800, 559695600, 575420400, 591145200, 606870000, 622594800, 638319600, 654649200, 670374000, 686098800, 701823600, 717548400, 733273200, 748998000, 764118000, 780447600, 796172400, 811897200, 828226800, 846370800, 859676400, 877820400, 891126000, 909270000, 922575600, 941324400, 954025200, 972774000, 985474800, 1004223600, 1017529200, 1035673200, 1048978800, 1067122800, 1080428400, 1099177200, 1111878000, 1130626800, 1143327600, 1162076400, 1167602400, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301274000, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396227600, 1414285200, 1427590800, 1446944400, 1459040400, 1473195600 ]),
    Int32List.fromList([ 7016, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 10800, 14400, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 10800 ]),
    1000000,
    [ 'IMT', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', '+03', '+04', '+03', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', '+03' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone jakarta = DynamicTimezone(
    'Asia/Jakarta',
    DynamicTimezoneSpan(
      -1,
      25632000000,
      'LMT',
      TimezoneSpan.range.min,
      -3231299232,
      dst: false,
    ),
    Int64List.fromList([ -3231299232, -1451719200, -1172906400, -876641400, -766054800, -683883000, -620812800, -189415800 ]),
    Int32List.fromList([ 25632, 26400, 27000, 32400, 27000, 28800, 27000, 25200 ]),
    1000000,
    [ 'BMT', '+0720', '+0730', '+09', '+0730', '+08', '+0730', 'WIB' ],
    [ false, false, false, false, false, false, false, false ],
  );

  static final Timezone jayapura = DynamicTimezone(
    'Asia/Jayapura',
    DynamicTimezoneSpan(
      -1,
      33768000000,
      'LMT',
      TimezoneSpan.range.min,
      -1172913768,
      dst: false,
    ),
    Int64List.fromList([ -1172913768, -799491600, -189423000 ]),
    Int16List.fromList([ 540, 570, 540 ]),
    60000000,
    [ '+09', '+0930', 'WIT' ],
    [ false, false, false ],
  );

  static final Timezone jerusalem = DynamicTimezone(
    'Asia/Jerusalem',
    DynamicTimezoneSpan(
      -1,
      8454000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840149254,
      dst: false,
    ),
    Int64List.fromList([ -2840149254, -1641003640, -933638400, -923097600, -919036800, -857347200, -844300800, -825811200, -812678400, -794188800, -779846400, -762652800, -748310400, -731116800, -681955200, -673228800, -667958400, -652320000, -636422400, -622080000, -608947200, -591840000, -572486400, -558576000, -542851200, -527731200, -514425600, -490838400, -482976000, -459388800, -451526400, -428544000, -418262400, -400118400, -387417600, 142380000, 150843600, 167176800, 178664400, 334101600, 337730400, 452642400, 462319200, 482277600, 494370000, 516751200, 526424400, 545436000, 558478800, 576626400, 589323600, 609890400, 620773200, 638316000, 651618000, 669765600, 683672400, 701820000, 715726800, 733701600, 747176400, 765151200, 778021200, 796600800, 810075600, 826840800, 842821200, 858895200, 874184400, 890344800, 905029200, 923011200, 936313200, 955670400, 970783200, 986770800, 1001282400, 1017356400, 1033941600, 1048806000, 1065132000, 1081292400, 1095804000, 1112313600, 1128812400, 1143763200, 1159657200, 1175212800, 1189897200, 1206662400, 1223161200, 1238112000, 1254006000, 1269561600, 1284246000, 1301616000, 1317510000, 1333065600, 1348354800, 1364515200, 1382828400, 1395964800, 1414278000, 1427414400, 1445727600, 1458864000, 1477782000, 1490313600, 1509231600, 1521763200, 1540681200, 1553817600, 1572130800, 1585267200, 1603580400, 1616716800, 1635634800, 1648166400, 1667084400, 1679616000, 1698534000, 1711670400, 1729983600, 1743120000, 1761433200, 1774569600, 1792882800, 1806019200, 1824937200, 1837468800, 1856386800, 1868918400, 1887836400, 1900972800, 1919286000, 1932422400, 1950735600, 1963872000, 1982790000, 1995321600, 2014239600, 2026771200, 2045689200, 2058220800, 2077138800, 2090275200, 2108588400, 2121724800, 2140038000, 2153174400, 2172092400, 2184624000, 2203542000, 2216073600, 2234991600, 2248128000, 2266441200, 2279577600, 2297890800, 2311027200, 2329340400, 2342476800, 2361394800, 2373926400, 2392844400, 2405376000, 2424294000, 2437430400, 2455743600, 2468880000, 2487193200, 2500329600, 2519247600, 2531779200, 2550697200, 2563228800, 2582146800, 2595283200, 2613596400, 2626732800, 2645046000, 2658182400, 2676495600, 2689632000, 2708550000, 2721081600, 2739999600, 2752531200, 2771449200, 2784585600, 2802898800, 2816035200, 2834348400, 2847484800, 2866402800, 2878934400, 2897852400, 2910384000, 2929302000, 2941833600, 2960751600, 2973888000, 2992201200, 3005337600, 3023650800, 3036787200, 3055705200, 3068236800, 3087154800, 3099686400, 3118604400, 3131740800, 3150054000, 3163190400, 3181503600, 3194640000, 3212953200, 3226089600, 3245007600, 3257539200, 3276457200, 3288988800, 3307906800, 3321043200, 3339356400, 3352492800, 3370806000, 3383942400, 3402860400, 3415392000, 3434310000, 3446841600, 3465759600, 3478896000, 3497209200, 3510345600, 3528658800, 3541795200, 3560108400, 3573244800, 3592162800, 3604694400, 3623612400, 3636144000, 3655062000, 3668198400, 3686511600, 3699648000, 3717961200, 3731097600, 3750015600, 3762547200, 3781465200, 3793996800, 3812914800, 3825446400, 3844364400, 3857500800, 3875814000, 3888950400, 3907263600, 3920400000, 3939318000, 3951849600, 3970767600, 3983299200, 4002217200, 4015353600, 4033666800, 4046803200, 4065116400, 4078252800, 4096566000, 4109702400, 4128620400, 4141152000, 4160070000, 4172601600, 4191519600, 4204051200, 4222969200, 4236105600, 4254418800, 4267555200, 4285868400, 4299004800, 4317922800, 4330454400, 4349372400, 4361904000, 4380822000, 4393958400, 4412271600, 4425408000, 4443721200, 4456857600, 4475170800, 4488307200, 4507225200, 4519756800, 4538674800, 4551206400, 4570124400, 4583260800, 4601574000, 4614710400, 4633023600, 4646160000, 4665078000, 4677609600, 4696527600, 4709059200, 4727977200, 4741113600, 4759426800, 4772563200, 4790876400, 4804012800, 4822326000, 4835462400, 4854380400, 4866912000, 4885830000, 4898361600, 4917279600, 4930416000, 4948729200, 4961865600, 4980178800, 4993315200, 5012233200, 5024764800, 5043682800, 5056214400, 5075132400, 5087664000, 5106582000, 5119718400, 5138031600, 5151168000, 5169481200, 5182617600, 5201535600, 5214067200, 5232985200, 5245516800, 5264434800, 5277571200, 5295884400, 5309020800, 5327334000, 5340470400, 5358783600, 5371920000, 5390838000, 5403369600, 5422287600, 5434819200, 5453737200, 5466873600, 5485186800, 5498323200, 5516636400, 5529772800, 5548690800, 5561222400, 5580140400, 5592672000, 5611590000, 5624726400, 5643039600, 5656176000, 5674489200, 5687625600, 5705938800, 5719075200, 5737993200, 5750524800, 5769442800, 5781974400, 5800892400, 5814028800, 5832342000, 5845478400, 5863791600, 5876928000, 5895846000, 5908377600, 5927295600, 5939827200, 5958745200, 5971276800, 5990194800, 6003331200, 6021644400, 6034780800, 6053094000, 6066230400, 6085148400, 6097680000, 6116598000, 6129129600, 6148047600, 6161184000, 6179497200, 6192633600, 6210946800, 6224083200, 6242396400, 6255532800, 6274450800, 6286982400, 6305900400, 6318432000, 6337350000, 6350486400, 6368799600, 6381936000, 6400249200, 6413385600, 6432303600, 6444835200, 6463753200, 6476284800, 6495202800, 6508339200, 6526652400, 6539788800, 6558102000, 6571238400, 6589551600, 6602688000, 6621606000, 6634137600, 6653055600, 6665587200, 6684505200, 6697641600, 6715954800, 6729091200, 6747404400, 6760540800, 6779458800, 6791990400, 6810908400, 6823440000, 6842358000, 6854889600, 6873807600, 6886944000, 6905257200, 6918393600, 6936706800, 6949843200, 6968761200, 6981292800, 7000210800, 7012742400, 7031660400, 7044796800, 7063110000, 7076246400, 7094559600, 7107696000, 7126009200, 7139145600, 7158063600, 7170595200, 7189513200, 7202044800, 7220962800, 7234099200, 7252412400, 7265548800, 7283862000, 7296998400, 7315311600, 7328448000, 7347366000, 7359897600, 7378815600, 7391347200, 7410265200, 7423401600, 7441714800, 7454851200, 7473164400, 7486300800, 7504614000, 7517750400, 7536668400, 7549200000, 7568118000, 7580649600, 7599567600, 7612704000, 7631017200, 7644153600, 7662466800, 7675603200, 7694521200, 7707052800, 7725970800, 7738502400, 7757420400, 7770556800, 7788870000, 7802006400, 7820319600, 7833456000, 7851769200, 7864905600, 7883823600, 7896355200, 7915273200, 7927804800, 7946722800, 7959859200, 7978172400, 7991308800, 8009622000, 8022758400, 8041676400, 8054208000, 8073126000, 8085657600, 8104575600, 8117107200, 8136025200, 8149161600, 8167474800, 8180611200, 8198924400, 8212060800, 8230978800, 8243510400, 8262428400, 8274960000, 8293878000, 8307014400, 8325327600, 8338464000, 8356777200, 8369913600, 8388226800, 8401363200, 8420281200, 8432812800, 8451730800, 8464262400, 8483180400, 8496316800, 8514630000, 8527766400, 8546079600, 8559216000, 8578134000, 8590665600, 8609583600, 8622115200, 8641033200, 8654169600, 8672482800, 8685619200, 8703932400, 8717068800, 8735382000, 8748518400, 8767436400, 8779968000, 8798886000, 8811417600, 8830335600, 8843472000, 8861785200, 8874921600, 8893234800, 8906371200, 8925289200, 8937820800, 8956738800, 8969270400, 8988188400, 9000720000, 9019638000, 9032774400, 9051087600, 9064224000, 9082537200, 9095673600, 9114591600, 9127123200, 9146041200, 9158572800, 9177490800, 9190627200, 9208940400, 9222076800, 9240390000, 9253526400, 9271839600, 9284976000, 9303894000, 9316425600, 9335343600, 9347875200, 9366793200, 9379929600, 9398242800, 9411379200, 9429692400, 9442828800, 9461746800, 9474278400, 9493196400, 9505728000, 9524646000, 9537782400, 9556095600, 9569232000, 9587545200, 9600681600, 9618994800, 9632131200, 9651049200, 9663580800, 9682498800, 9695030400, 9713948400, 9727084800, 9745398000, 9758534400, 9776847600, 9789984000, 9808902000, 9821433600, 9840351600, 9852883200, 9871801200, 9884332800, 9903250800, 9916387200, 9934700400, 9947836800, 9966150000, 9979286400, 9998204400, 10010736000, 10029654000, 10042185600, 10061103600, 10074240000, 10092553200, 10105689600, 10124002800, 10137139200, 10155452400, 10168588800, 10187506800, 10200038400, 10218956400, 10231488000, 10250406000, 10263542400, 10281855600, 10294992000, 10313305200, 10326441600, 10345359600, 10357891200, 10376809200, 10389340800, 10408258800, 10420790400, 10439708400, 10452844800, 10471158000, 10484294400, 10502607600, 10515744000, 10534057200, 10547193600, 10566111600, 10578643200, 10597561200, 10610092800, 10629010800, 10642147200, 10660460400, 10673596800, 10691910000, 10705046400, 10723964400, 10736496000, 10755414000, 10767945600, 10786863600, 10800000000, 10818313200, 10831449600, 10849762800, 10862899200, 10881212400, 10894348800, 10913266800, 10925798400, 10944716400, 10957248000, 10976166000, 10989302400, 11007615600, 11020752000, 11039065200, 11052201600, 11071119600, 11083651200, 11102569200, 11115100800, 11134018800, 11146550400, 11165468400, 11178604800, 11196918000, 11210054400, 11228367600, 11241504000, 11260422000, 11272953600, 11291871600, 11304403200, 11323321200, 11336457600, 11354770800, 11367907200, 11386220400, 11399356800, 11417670000, 11430806400, 11449724400, 11462256000, 11481174000, 11493705600, 11512623600, 11525760000, 11544073200, 11557209600, 11575522800, 11588659200, 11607577200, 11620108800, 11639026800, 11651558400, 11670476400, 11683612800, 11701926000, 11715062400, 11733375600, 11746512000, 11764825200, 11777961600, 11796879600, 11809411200, 11828329200, 11840860800, 11859778800, 11872915200, 11891228400, 11904364800, 11922678000, 11935814400, 11954732400, 11967264000, 11986182000, 11998713600, 12017631600, 12030163200, 12049081200, 12062217600, 12080530800, 12093667200, 12111980400, 12125116800, 12144034800, 12156566400, 12175484400, 12188016000, 12206934000, 12220070400, 12238383600, 12251520000, 12269833200, 12282969600, 12301282800, 12314419200, 12333337200, 12345868800, 12364786800, 12377318400, 12396236400, 12409372800, 12427686000, 12440822400, 12459135600, 12472272000, 12491190000, 12503721600, 12522639600, 12535171200, 12554089200, 12567225600, 12585538800, 12598675200, 12616988400, 12630124800, 12648438000, 12661574400, 12680492400, 12693024000, 12711942000, 12724473600, 12743391600, 12756528000, 12774841200, 12787977600, 12806290800, 12819427200, 12838345200, 12850876800, 12869794800, 12882326400, 12901244400, 12913776000, 12932694000, 12945830400, 12964143600, 12977280000, 12995593200, 13008729600, 13027647600, 13040179200, 13059097200, 13071628800, 13090546800, 13103683200, 13121996400, 13135132800, 13153446000, 13166582400, 13184895600, 13198032000, 13216950000, 13229481600, 13248399600, 13260931200, 13279849200, 13292985600, 13311298800, 13324435200, 13342748400, 13355884800, 13374802800, 13387334400, 13406252400, 13418784000, 13437702000, 13450838400, 13469151600, 13482288000, 13500601200, 13513737600, 13532050800, 13545187200, 13564105200, 13576636800, 13595554800, 13608086400, 13627004400, 13640140800, 13658454000, 13671590400, 13689903600, 13703040000, 13721958000, 13734489600, 13753407600, 13765939200, 13784857200, 13797388800, 13816306800, 13829443200, 13847756400, 13860892800, 13879206000, 13892342400, 13911260400, 13923792000, 13942710000, 13955241600, 13974159600, 13987296000, 14005609200 ]),
    Int32List.fromList([ 8440, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 14400, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200 ]),
    1000000,
    [ 'JMT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDDT', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone kabul = DynamicTimezone(
    'Asia/Kabul',
    DynamicTimezoneSpan(
      -1,
      16608000000,
      'LMT',
      TimezoneSpan.range.min,
      -2524538208,
      dst: false,
    ),
    Int64List.fromList([ -2524538208, -788932800 ]),
    Int16List.fromList([ 240, 270 ]),
    60000000,
    [ '+04', '+0430' ],
    [ false, false ],
  );

  static final Timezone kamchatka = DynamicTimezone(
    'Asia/Kamchatka',
    DynamicTimezoneSpan(
      -1,
      38076000000,
      'LMT',
      TimezoneSpan.range.min,
      -1487759676,
      dst: false,
    ),
    Int64List.fromList([ -1487759676, -1247569200, 354888000, 370695600, 386424000, 402231600, 417960000, 433767600, 449582400, 465314400, 481039200, 496764000, 512488800, 528213600, 543938400, 559663200, 575388000, 591112800, 606837600, 622562400, 638287200, 654616800, 670341600, 686070000, 695746800, 701791200, 717516000, 733240800, 748965600, 764690400, 780415200, 796140000, 811864800, 828194400, 846338400, 859644000, 877788000, 891093600, 909237600, 922543200, 941292000, 953992800, 972741600, 985442400, 1004191200, 1017496800, 1035640800, 1048946400, 1067090400, 1080396000, 1099144800, 1111845600, 1130594400, 1143295200, 1162044000, 1174744800, 1193493600, 1206799200, 1224943200, 1238248800, 1256392800, 1269698400, 1288450800, 1301151600 ]),
    Int8List.fromList([ 11, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 12, 11, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 12, 12, 11, 12 ]),
    3600000000,
    [ '+11', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+12', '+11', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+12', '+11', '+12' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone karachi = DynamicTimezone(
    'Asia/Karachi',
    DynamicTimezoneSpan(
      -1,
      16092000000,
      'LMT',
      TimezoneSpan.range.min,
      -1988166492,
      dst: false,
    ),
    Int64List.fromList([ -1988166492, -862637400, -764145000, -576135000, 38775600, 1018119600, 1033840800, 1212260400, 1225476000, 1239735600, 1257012000 ]),
    Int16List.fromList([ 330, 390, 330, 300, 300, 360, 300, 360, 300, 360, 300 ]),
    60000000,
    [ '+0530', '+0630', '+0530', '+05', 'PKT', 'PKST', 'PKT', 'PKST', 'PKT', 'PKST', 'PKT' ],
    [ false, true, false, false, false, true, false, true, false, true, false ],
  );

  static final Timezone kashgar = DynamicTimezone(
    'Asia/Kashgar',
    DynamicTimezoneSpan(
      -1,
      21020000000,
      'LMT',
      TimezoneSpan.range.min,
      -1325483420,
      dst: false,
    ),
    Int64List.fromList([ -1325483420 ]),
    Int8List.fromList([ 6 ]),
    3600000000,
    [ '+06' ],
    [ false ],
  );

  static final Timezone kathmandu = DynamicTimezone(
    'Asia/Kathmandu',
    DynamicTimezoneSpan(
      -1,
      20476000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577943676,
      dst: false,
    ),
    Int64List.fromList([ -1577943676, 504901800 ]),
    Int16List.fromList([ 330, 345 ]),
    60000000,
    [ '+0530', '+0545' ],
    [ false, false ],
  );

  static final Timezone katmandu = DynamicTimezone(
    'Asia/Katmandu',
    DynamicTimezoneSpan(
      -1,
      20476000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577943676,
      dst: false,
    ),
    Int64List.fromList([ -1577943676, 504901800 ]),
    Int16List.fromList([ 330, 345 ]),
    60000000,
    [ '+0530', '+0545' ],
    [ false, false ],
  );

  static final Timezone khandyga = DynamicTimezone(
    'Asia/Khandyga',
    DynamicTimezoneSpan(
      -1,
      32533000000,
      'LMT',
      TimezoneSpan.range.min,
      -1579424533,
      dst: false,
    ),
    Int64List.fromList([ -1579424533, -1247558400, 354898800, 370706400, 386434800, 402242400, 417970800, 433778400, 449593200, 465325200, 481050000, 496774800, 512499600, 528224400, 543949200, 559674000, 575398800, 591123600, 606848400, 622573200, 638298000, 654627600, 670352400, 686080800, 695757600, 701802000, 717526800, 733251600, 748976400, 764701200, 780426000, 796150800, 811875600, 828205200, 846349200, 859654800, 877798800, 891104400, 909248400, 922554000, 941302800, 954003600, 972752400, 985453200, 1004202000, 1017507600, 1035651600, 1048957200, 1067101200, 1072882800, 1080403200, 1099152000, 1111852800, 1130601600, 1143302400, 1162051200, 1174752000, 1193500800, 1206806400, 1224950400, 1238256000, 1256400000, 1269705600, 1288454400, 1301155200, 1315832400, 1414252800 ]),
    Int8List.fromList([ 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 9, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 9 ]),
    3600000000,
    [ '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+09', '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+09' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone kolkata = DynamicTimezone(
    'Asia/Kolkata',
    DynamicTimezoneSpan(
      -1,
      21208000000,
      'LMT',
      TimezoneSpan.range.min,
      -3645237208,
      dst: false,
    ),
    Int64List.fromList([ -3645237208, -3155694800, -2019705670, -891581400, -872058600, -862637400, -764145000 ]),
    Int32List.fromList([ 21200, 19270, 19800, 23400, 19800, 23400, 19800 ]),
    1000000,
    [ 'HMT', 'MMT', 'IST', '+0630', 'IST', '+0630', 'IST' ],
    [ false, false, false, true, false, true, false ],
  );

  static final Timezone krasnoyarsk = DynamicTimezone(
    'Asia/Krasnoyarsk',
    DynamicTimezoneSpan(
      -1,
      22286000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577513486,
      dst: false,
    ),
    Int64List.fromList([ -1577513486, -1247551200, 354906000, 370713600, 386442000, 402249600, 417978000, 433785600, 449600400, 465332400, 481057200, 496782000, 512506800, 528231600, 543956400, 559681200, 575406000, 591130800, 606855600, 622580400, 638305200, 654634800, 670359600, 686088000, 695764800, 701809200, 717534000, 733258800, 748983600, 764708400, 780433200, 796158000, 811882800, 828212400, 846356400, 859662000, 877806000, 891111600, 909255600, 922561200, 941310000, 954010800, 972759600, 985460400, 1004209200, 1017514800, 1035658800, 1048964400, 1067108400, 1080414000, 1099162800, 1111863600, 1130612400, 1143313200, 1162062000, 1174762800, 1193511600, 1206817200, 1224961200, 1238266800, 1256410800, 1269716400, 1288465200, 1301166000, 1414260000 ]),
    Int8List.fromList([ 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7 ]),
    3600000000,
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone kualaLumpur = DynamicTimezone(
    'Asia/Kuala_Lumpur',
    DynamicTimezoneSpan(
      -1,
      24925000000,
      'LMT',
      TimezoneSpan.range.min,
      -2177477725,
      dst: false,
    ),
    Int64List.fromList([ -2177477725, -2038200925, -1167634800, -1073028000, -894180000, -879665400, -767005200, 378662400 ]),
    Int32List.fromList([ 24925, 25200, 26400, 26400, 27000, 32400, 27000, 28800 ]),
    1000000,
    [ 'SMT', '+07', '+0720', '+0720', '+0730', '+09', '+0730', '+08' ],
    [ false, false, true, false, false, false, false, false ],
  );

  static final Timezone kuching = DynamicTimezone(
    'Asia/Kuching',
    DynamicTimezoneSpan(
      -1,
      26480000000,
      'LMT',
      TimezoneSpan.range.min,
      -1383463280,
      dst: false,
    ),
    Int64List.fromList([ -1383463280, -1167636600, -1082448000, -1074586800, -1050825600, -1042964400, -1019289600, -1011428400, -987753600, -979892400, -956217600, -948356400, -924595200, -916734000, -893059200, -885198000, -879667200, -767005200 ]),
    Int16List.fromList([ 450, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 540, 480 ]),
    60000000,
    [ '+0730', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+0820', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone kuwait = DynamicTimezone(
    'Asia/Kuwait',
    DynamicTimezoneSpan(
      -1,
      11212000000,
      'LMT',
      TimezoneSpan.range.min,
      -719636812,
      dst: false,
    ),
    Int64List.fromList([ -719636812 ]),
    Int8List.fromList([ 3 ]),
    3600000000,
    [ '+03' ],
    [ false ],
  );

  static final Timezone macao = DynamicTimezone(
    'Asia/Macao',
    DynamicTimezoneSpan(
      -1,
      27250000000,
      'LMT',
      TimezoneSpan.range.min,
      -2056692850,
      dst: false,
    ),
    Int64List.fromList([ -2056692850, -884509200, -873280800, -855918000, -841744800, -828529200, -765363600, -747046800, -733827600, -716461200, -697021200, -683715600, -667990800, -654771600, -636627600, -623322000, -605178000, -591872400, -573642000, -559818000, -541674000, -528368400, -510224400, -498128400, -478774800, -466678800, -446720400, -435229200, -415258200, -403158600, -383808600, -371709000, -352359000, -340259400, -320909400, -308809800, -288855000, -277360200, -257405400, -245910600, -225955800, -213856200, -194506200, -182406600, -163056600, -148537800, -132820200, -117088200, -101370600, -85638600, -69312600, -53584200, -37863000, -22134600, -6413400, 9315000, 25036200, 40764600, 56485800, 72214200, 88540200, 104268600, 119989800, 126041400, 151439400, 167167800, 182889000, 198617400, 214338600, 295385400, 309292200 ]),
    Int8List.fromList([ 8, 9, 10, 9, 10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', '+09', '+10', '+09', '+10', '+09', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone macau = DynamicTimezone(
    'Asia/Macau',
    DynamicTimezoneSpan(
      -1,
      27250000000,
      'LMT',
      TimezoneSpan.range.min,
      -2056692850,
      dst: false,
    ),
    Int64List.fromList([ -2056692850, -884509200, -873280800, -855918000, -841744800, -828529200, -765363600, -747046800, -733827600, -716461200, -697021200, -683715600, -667990800, -654771600, -636627600, -623322000, -605178000, -591872400, -573642000, -559818000, -541674000, -528368400, -510224400, -498128400, -478774800, -466678800, -446720400, -435229200, -415258200, -403158600, -383808600, -371709000, -352359000, -340259400, -320909400, -308809800, -288855000, -277360200, -257405400, -245910600, -225955800, -213856200, -194506200, -182406600, -163056600, -148537800, -132820200, -117088200, -101370600, -85638600, -69312600, -53584200, -37863000, -22134600, -6413400, 9315000, 25036200, 40764600, 56485800, 72214200, 88540200, 104268600, 119989800, 126041400, 151439400, 167167800, 182889000, 198617400, 214338600, 295385400, 309292200 ]),
    Int8List.fromList([ 8, 9, 10, 9, 10, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', '+09', '+10', '+09', '+10', '+09', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone magadan = DynamicTimezone(
    'Asia/Magadan',
    DynamicTimezoneSpan(
      -1,
      36192000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441188192,
      dst: false,
    ),
    Int64List.fromList([ -1441188192, -1247565600, 354891600, 370699200, 386427600, 402235200, 417963600, 433771200, 449586000, 465318000, 481042800, 496767600, 512492400, 528217200, 543942000, 559666800, 575391600, 591116400, 606841200, 622566000, 638290800, 654620400, 670345200, 686073600, 695750400, 701794800, 717519600, 733244400, 748969200, 764694000, 780418800, 796143600, 811868400, 828198000, 846342000, 859647600, 877791600, 891097200, 909241200, 922546800, 941295600, 953996400, 972745200, 985446000, 1004194800, 1017500400, 1035644400, 1048950000, 1067094000, 1080399600, 1099148400, 1111849200, 1130598000, 1143298800, 1162047600, 1174748400, 1193497200, 1206802800, 1224946800, 1238252400, 1256396400, 1269702000, 1288450800, 1301151600, 1414245600, 1461427200 ]),
    Int8List.fromList([ 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 11, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 10, 11 ]),
    3600000000,
    [ '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+10', '+11' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone makassar = DynamicTimezone(
    'Asia/Makassar',
    DynamicTimezoneSpan(
      -1,
      28656000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577951856,
      dst: false,
    ),
    Int64List.fromList([ -1577951856, -1172908656, -880272000, -766054800 ]),
    Int32List.fromList([ 28656, 28800, 32400, 28800 ]),
    1000000,
    [ 'MMT', '+08', '+09', 'WITA' ],
    [ false, false, false, false ],
  );

  static final Timezone manila = DynamicTimezone(
    'Asia/Manila',
    DynamicTimezoneSpan(
      -1,
      -57360000000,
      'LMT',
      TimezoneSpan.range.min,
      -3944621040,
      dst: false,
    ),
    Int64List.fromList([ -3944621040, -2229321840, -1046678400, -1038733200, -873273600, -794221200, -496224000, -489315600, 259344000, 275151600 ]),
    Int16List.fromList([ 484, 480, 540, 480, 540, 480, 540, 480, 540, 480 ]),
    60000000,
    [ 'LMT', 'PST', 'PDT', 'PST', 'JST', 'PST', 'PDT', 'PST', 'PDT', 'PST' ],
    [ false, false, true, false, false, false, true, false, true, false ],
  );

  static final Timezone muscat = DynamicTimezone(
    'Asia/Muscat',
    DynamicTimezoneSpan(
      -1,
      13272000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577936472,
      dst: false,
    ),
    Int64List.fromList([ -1577936472 ]),
    Int8List.fromList([ 4 ]),
    3600000000,
    [ '+04' ],
    [ false ],
  );

  static final Timezone nicosia = DynamicTimezone(
    'Asia/Nicosia',
    DynamicTimezoneSpan(
      -1,
      8008000000,
      'LMT',
      TimezoneSpan.range.min,
      -1518920008,
      dst: false,
    ),
    Int64List.fromList([ -1518920008, 166572000, 182293200, 200959200, 213829200, 228866400, 243982800, 260316000, 276123600, 291765600, 307486800, 323820000, 338936400, 354664800, 370386000, 386114400, 401835600, 417564000, 433285200, 449013600, 465339600, 481068000, 496789200, 512517600, 528238800, 543967200, 559688400, 575416800, 591138000, 606866400, 622587600, 638316000, 654642000, 670370400, 686091600, 701820000, 717541200, 733269600, 748990800, 764719200, 780440400, 796168800, 811890000, 828223200, 843944400, 859672800, 875394000, 891122400, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2 ]),
    3600000000,

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone novokuznetsk = DynamicTimezone(
    'Asia/Novokuznetsk',
    DynamicTimezoneSpan(
      -1,
      20928000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441259328,
      dst: false,
    ),
    Int64List.fromList([ -1441259328, -1247551200, 354906000, 370713600, 386442000, 402249600, 417978000, 433785600, 449600400, 465332400, 481057200, 496782000, 512506800, 528231600, 543956400, 559681200, 575406000, 591130800, 606855600, 622580400, 638305200, 654634800, 670359600, 686088000, 695764800, 701809200, 717534000, 733258800, 748983600, 764708400, 780433200, 796158000, 811882800, 828212400, 846356400, 859662000, 877806000, 891111600, 909255600, 922561200, 941310000, 954010800, 972759600, 985460400, 1004209200, 1017514800, 1035658800, 1048964400, 1067108400, 1080414000, 1099162800, 1111863600, 1130612400, 1143313200, 1162062000, 1174762800, 1193511600, 1206817200, 1224961200, 1238266800, 1256410800, 1269716400, 1288468800, 1301169600 ]),
    Int8List.fromList([ 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 6, 7 ]),
    3600000000,
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone novosibirsk = DynamicTimezone(
    'Asia/Novosibirsk',
    DynamicTimezoneSpan(
      -1,
      19900000000,
      'LMT',
      TimezoneSpan.range.min,
      -1579476700,
      dst: false,
    ),
    Int64List.fromList([ -1579476700, -1247551200, 354906000, 370713600, 386442000, 402249600, 417978000, 433785600, 449600400, 465332400, 481057200, 496782000, 512506800, 528231600, 543956400, 559681200, 575406000, 591130800, 606855600, 622580400, 638305200, 654634800, 670359600, 686088000, 695764800, 701809200, 717534000, 733258800, 738086400, 748987200, 764712000, 780436800, 796161600, 811886400, 828216000, 846360000, 859665600, 877809600, 891115200, 909259200, 922564800, 941313600, 954014400, 972763200, 985464000, 1004212800, 1017518400, 1035662400, 1048968000, 1067112000, 1080417600, 1099166400, 1111867200, 1130616000, 1143316800, 1162065600, 1174766400, 1193515200, 1206820800, 1224964800, 1238270400, 1256414400, 1269720000, 1288468800, 1301169600, 1414263600, 1469304000 ]),
    Int8List.fromList([ 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 6, 7, 8, 7, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7 ]),
    3600000000,
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone omsk = DynamicTimezone(
    'Asia/Omsk',
    DynamicTimezoneSpan(
      -1,
      17610000000,
      'LMT',
      TimezoneSpan.range.min,
      -1582088010,
      dst: false,
    ),
    Int64List.fromList([ -1582088010, -1247547600, 354909600, 370717200, 386445600, 402253200, 417981600, 433789200, 449604000, 465336000, 481060800, 496785600, 512510400, 528235200, 543960000, 559684800, 575409600, 591134400, 606859200, 622584000, 638308800, 654638400, 670363200, 686091600, 695768400, 701812800, 717537600, 733262400, 748987200, 764712000, 780436800, 796161600, 811886400, 828216000, 846360000, 859665600, 877809600, 891115200, 909259200, 922564800, 941313600, 954014400, 972763200, 985464000, 1004212800, 1017518400, 1035662400, 1048968000, 1067112000, 1080417600, 1099166400, 1111867200, 1130616000, 1143316800, 1162065600, 1174766400, 1193515200, 1206820800, 1224964800, 1238270400, 1256414400, 1269720000, 1288468800, 1301169600, 1414263600 ]),
    Int8List.fromList([ 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6 ]),
    3600000000,
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone oral = DynamicTimezone(
    'Asia/Oral',
    DynamicTimezoneSpan(
      -1,
      12324000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441164324,
      dst: false,
    ),
    Int64List.fromList([ -1441164324, -1247540400, 354913200, 370720800, 386445600, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622591200, 638316000, 654645600, 670370400, 686095200, 695772000, 701816400, 717544800, 733269600, 748994400, 764719200, 780444000, 796168800, 811893600, 828223200, 846367200, 859672800, 877816800, 891122400, 909266400, 922572000, 941320800, 954021600, 972770400, 985471200, 1004220000, 1017525600, 1035669600, 1048975200, 1067119200, 1080424800, 1099173600 ]),
    Int8List.fromList([ 3, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5, 4, 5, 4, 5, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 5 ]),
    3600000000,
    [ '+03', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone phnomPenh = DynamicTimezone(
    'Asia/Phnom_Penh',
    DynamicTimezoneSpan(
      -1,
      24124000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840164924,
      dst: false,
    ),
    Int64List.fromList([ -2840164924, -1570084924 ]),
    Int32List.fromList([ 24124, 25200 ]),
    1000000,
    [ 'BMT', '+07' ],
    [ false, false ],
  );

  static final Timezone pontianak = DynamicTimezone(
    'Asia/Pontianak',
    DynamicTimezoneSpan(
      -1,
      26240000000,
      'LMT',
      TimezoneSpan.range.min,
      -1946186240,
      dst: false,
    ),
    Int64List.fromList([ -1946186240, -1172906240, -881220600, -766054800, -683883000, -620812800, -189415800, 567964800 ]),
    Int32List.fromList([ 26240, 27000, 32400, 27000, 28800, 27000, 28800, 25200 ]),
    1000000,
    [ 'PMT', '+0730', '+09', '+0730', '+08', '+0730', 'WITA', 'WIB' ],
    [ false, false, false, false, false, false, false, false ],
  );

  static final Timezone pyongyang = DynamicTimezone(
    'Asia/Pyongyang',
    DynamicTimezoneSpan(
      -1,
      30180000000,
      'LMT',
      TimezoneSpan.range.min,
      -1948782180,
      dst: false,
    ),
    Int64List.fromList([ -1948782180, -1830414600, -768646800, 1439564400, 1525446000 ]),
    Int16List.fromList([ 510, 540, 540, 510, 540 ]),
    60000000,
    [ 'KST', 'JST', 'KST', 'KST', 'KST' ],
    [ false, false, false, false, false ],
  );

  static final Timezone qatar = DynamicTimezone(
    'Asia/Qatar',
    DynamicTimezoneSpan(
      -1,
      12368000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577935568,
      dst: false,
    ),
    Int64List.fromList([ -1577935568, 76190400 ]),
    Int8List.fromList([ 4, 3 ]),
    3600000000,
    [ '+04', '+03' ],
    [ false, false ],
  );

  static final Timezone qostanay = DynamicTimezone(
    'Asia/Qostanay',
    DynamicTimezoneSpan(
      -1,
      15268000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441167268,
      dst: false,
    ),
    Int64List.fromList([ -1441167268, -1247544000, 354913200, 370720800, 386445600, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686095200, 695772000, 701816400, 717541200, 733266000, 748990800, 764715600, 780440400, 796165200, 811890000, 828219600, 846363600, 859669200, 877813200, 891118800, 909262800, 922568400, 941317200, 954018000, 972766800, 985467600, 1004216400, 1017522000, 1035666000, 1048971600, 1067115600, 1080421200, 1099170000 ]),
    Int8List.fromList([ 4, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 6 ]),
    3600000000,
    [ '+04', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+06' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone qyzylorda = DynamicTimezone(
    'Asia/Qyzylorda',
    DynamicTimezoneSpan(
      -1,
      15712000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441167712,
      dst: false,
    ),
    Int64List.fromList([ -1441167712, -1247544000, 354913200, 370720800, 386445600, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686095200, 695768400, 701812800, 717541200, 733266000, 748990800, 764715600, 780440400, 796165200, 811890000, 828219600, 846363600, 859669200, 877813200, 891118800, 909262800, 922568400, 941317200, 954018000, 972766800, 985467600, 1004216400, 1017522000, 1035666000, 1048971600, 1067115600, 1080421200, 1099170000, 1545328800 ]),
    Int8List.fromList([ 4, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 6, 5 ]),
    3600000000,
    [ '+04', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+05', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+06', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone rangoon = DynamicTimezone(
    'Asia/Rangoon',
    DynamicTimezoneSpan(
      -1,
      23087000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840163887,
      dst: false,
    ),
    Int64List.fromList([ -2840163887, -1577946287, -873268200, -778410000 ]),
    Int32List.fromList([ 23087, 23400, 32400, 23400 ]),
    1000000,
    [ 'RMT', '+0630', '+09', '+0630' ],
    [ false, false, false, false ],
  );

  static final Timezone riyadh = DynamicTimezone(
    'Asia/Riyadh',
    DynamicTimezoneSpan(
      -1,
      11212000000,
      'LMT',
      TimezoneSpan.range.min,
      -719636812,
      dst: false,
    ),
    Int64List.fromList([ -719636812 ]),
    Int8List.fromList([ 3 ]),
    3600000000,
    [ '+03' ],
    [ false ],
  );

  static final Timezone saigon = DynamicTimezone(
    'Asia/Saigon',
    DynamicTimezoneSpan(
      -1,
      25590000000,
      'LMT',
      TimezoneSpan.range.min,
      -2004073590,
      dst: false,
    ),
    Int64List.fromList([ -2004073590, -1851577590, -852105600, -782643600, -767869200, -718095600, -457776000, -315648000, 171820800 ]),
    Int32List.fromList([ 25590, 25200, 28800, 32400, 25200, 28800, 25200, 28800, 25200 ]),
    1000000,
    [ 'PLMT', '+07', '+08', '+09', '+07', '+08', '+07', '+08', '+07' ],
    [ false, false, false, false, false, false, false, false, false ],
  );

  static final Timezone sakhalin = DynamicTimezone(
    'Asia/Sakhalin',
    DynamicTimezoneSpan(
      -1,
      34248000000,
      'LMT',
      TimezoneSpan.range.min,
      -2031039048,
      dst: false,
    ),
    Int64List.fromList([ -2031039048, -768560400, 354891600, 370699200, 386427600, 402235200, 417963600, 433771200, 449586000, 465318000, 481042800, 496767600, 512492400, 528217200, 543942000, 559666800, 575391600, 591116400, 606841200, 622566000, 638290800, 654620400, 670345200, 686073600, 695750400, 701794800, 717519600, 733244400, 748969200, 764694000, 780418800, 796143600, 811868400, 828198000, 846342000, 859647600, 877795200, 891100800, 909244800, 922550400, 941299200, 954000000, 972748800, 985449600, 1004198400, 1017504000, 1035648000, 1048953600, 1067097600, 1080403200, 1099152000, 1111852800, 1130601600, 1143302400, 1162051200, 1174752000, 1193500800, 1206806400, 1224950400, 1238256000, 1256400000, 1269705600, 1288454400, 1301155200, 1414249200, 1459008000 ]),
    Int8List.fromList([ 9, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 11, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11 ]),
    3600000000,
    [ '+09', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone samarkand = DynamicTimezone(
    'Asia/Samarkand',
    DynamicTimezoneSpan(
      -1,
      16073000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441168073,
      dst: false,
    ),
    Int64List.fromList([ -1441168073, -1247544000, 354913200, 370720800, 386445600, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686091600, 694206000 ]),
    Int8List.fromList([ 4, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5 ]),
    3600000000,
    [ '+04', '+05', '+06', '+06', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone seoul = DynamicTimezone(
    'Asia/Seoul',
    DynamicTimezoneSpan(
      -1,
      30472000000,
      'LMT',
      TimezoneSpan.range.min,
      -1948782472,
      dst: false,
    ),
    Int64List.fromList([ -1948782472, -1830414600, -767350800, -681210000, -672228000, -654771600, -640864800, -623408400, -609415200, -588848400, -577965600, -498128400, -462702600, -451733400, -429784200, -418296600, -399544200, -387451800, -368094600, -356002200, -336645000, -324552600, -305195400, -293103000, -264933000, 547578000, 560883600, 579027600, 592333200 ]),
    Int16List.fromList([ 510, 540, 540, 600, 540, 600, 540, 600, 540, 600, 540, 510, 570, 510, 570, 510, 570, 510, 570, 510, 570, 510, 570, 510, 540, 600, 540, 600, 540 ]),
    60000000,
    [ 'KST', 'JST', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KST', 'KDT', 'KST', 'KDT', 'KST' ],
    [ false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false ],
  );

  static final Timezone shanghai = DynamicTimezone(
    'Asia/Shanghai',
    DynamicTimezoneSpan(
      -1,
      29143000000,
      'LMT',
      TimezoneSpan.range.min,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943, -1600675200, -1585904400, -933667200, -922093200, -908870400, -888829200, -881049600, -767869200, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -650019600, 515527200, 527014800, 545162400, 558464400, 577216800, 589914000, 608666400, 621968400, 640116000, 653418000, 671565600, 684867600 ]),
    Int8List.fromList([ 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone singapore = DynamicTimezone(
    'Asia/Singapore',
    DynamicTimezoneSpan(
      -1,
      24925000000,
      'LMT',
      TimezoneSpan.range.min,
      -2177477725,
      dst: false,
    ),
    Int64List.fromList([ -2177477725, -2038200925, -1167634800, -1073028000, -894180000, -879665400, -767005200, 378662400 ]),
    Int32List.fromList([ 24925, 25200, 26400, 26400, 27000, 32400, 27000, 28800 ]),
    1000000,
    [ 'SMT', '+07', '+0720', '+0720', '+0730', '+09', '+0730', '+08' ],
    [ false, false, true, false, false, false, false, false ],
  );

  static final Timezone srednekolymsk = DynamicTimezone(
    'Asia/Srednekolymsk',
    DynamicTimezoneSpan(
      -1,
      36892000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441188892,
      dst: false,
    ),
    Int64List.fromList([ -1441188892, -1247565600, 354891600, 370699200, 386427600, 402235200, 417963600, 433771200, 449586000, 465318000, 481042800, 496767600, 512492400, 528217200, 543942000, 559666800, 575391600, 591116400, 606841200, 622566000, 638290800, 654620400, 670345200, 686073600, 695750400, 701794800, 717519600, 733244400, 748969200, 764694000, 780418800, 796143600, 811868400, 828198000, 846342000, 859647600, 877791600, 891097200, 909241200, 922546800, 941295600, 953996400, 972745200, 985446000, 1004194800, 1017500400, 1035644400, 1048950000, 1067094000, 1080399600, 1099148400, 1111849200, 1130598000, 1143298800, 1162047600, 1174748400, 1193497200, 1206802800, 1224946800, 1238252400, 1256396400, 1269702000, 1288450800, 1301151600, 1414245600 ]),
    Int8List.fromList([ 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 11, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11 ]),
    3600000000,
    [ '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone taipei = DynamicTimezone(
    'Asia/Taipei',
    DynamicTimezoneSpan(
      -1,
      29160000000,
      'LMT',
      TimezoneSpan.range.min,
      -2335248360,
      dst: false,
    ),
    Int64List.fromList([ -2335248360, -1017820800, -766224000, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -639133200, -620812800, -607597200, -589276800, -576061200, -562924800, -541760400, -528710400, -510224400, -497174400, -478688400, -465638400, -449830800, -434016000, -418208400, -402480000, -386672400, -370944000, -355136400, -339408000, -323600400, -302515200, -291978000, -270979200, -260442000, 133977600, 149785200, 165513600, 181321200, 299606400, 307551600 ]),
    Int8List.fromList([ 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', 'JST', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone tashkent = DynamicTimezone(
    'Asia/Tashkent',
    DynamicTimezoneSpan(
      -1,
      16631000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441168631,
      dst: false,
    ),
    Int64List.fromList([ -1441168631, -1247547600, 354909600, 370717200, 386445600, 402253200, 417981600, 433789200, 449604000, 465336000, 481060800, 496785600, 512510400, 528235200, 543960000, 559684800, 575409600, 591134400, 606859200, 622584000, 638308800, 654638400, 670363200, 686091600, 694206000 ]),
    Int8List.fromList([ 5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 5, 5 ]),
    3600000000,
    [ '+05', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+06', '+05', '+05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone tbilisi = DynamicTimezone(
    'Asia/Tbilisi',
    DynamicTimezoneSpan(
      -1,
      10751000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840151551,
      dst: false,
    ),
    Int64List.fromList([ -2840151551, -1441162751, -405140400, 354916800, 370724400, 386452800, 402260400, 417988800, 433796400, 449611200, 465343200, 481068000, 496792800, 512517600, 528242400, 543967200, 559692000, 575416800, 591141600, 606866400, 622591200, 638316000, 654645600, 670370400, 686098800, 694213200, 701816400, 717537600, 733266000, 748987200, 764715600, 780436800, 796161600, 811882800, 828216000, 859662000, 877806000, 891115200, 909255600, 922564800, 941310000, 954014400, 972759600, 985464000, 1004209200, 1017518400, 1035658800, 1048968000, 1067108400, 1080417600, 1088276400, 1099177200, 1111878000 ]),
    Int32List.fromList([ 10751, 10800, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 14400, 10800, 10800, 14400, 10800, 14400, 10800, 14400, 14400, 18000, 14400, 18000, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 18000, 14400, 10800, 14400 ]),
    1000000,
    [ 'TBMT', '+03', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+04', '+03', '+03', '+04', '+03', '+04', '+03', '+04', '+04', '+05', '+04', '+05', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+03', '+04' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, false ],
  );

  static final Timezone tehran = DynamicTimezone(
    'Asia/Tehran',
    DynamicTimezoneSpan(
      -1,
      12344000000,
      'LMT',
      TimezoneSpan.range.min,
      -1704165944,
      dst: false,
    ),
    Int64List.fromList([ -1704165944, -1090466744, 227820600, 246223800, 259617600, 271108800, 283982400, 296598600, 306531000, 322432200, 338499000, 673216200, 685481400, 701209800, 717103800, 732745800, 748639800, 764281800, 780175800, 795817800, 811711800, 827353800, 843247800, 858976200, 874870200, 890512200, 906406200, 922048200, 937942200, 953584200, 969478200, 985206600, 1001100600, 1016742600, 1032636600, 1048278600, 1064172600, 1079814600, 1095708600, 1111437000, 1127331000, 1206045000, 1221939000, 1237667400, 1253561400, 1269203400, 1285097400, 1300739400, 1316633400, 1332275400, 1348169400, 1363897800, 1379791800, 1395433800, 1411327800, 1426969800, 1442863800, 1458505800, 1474399800, 1490128200, 1506022200, 1521664200, 1537558200, 1553200200, 1569094200, 1584736200, 1600630200, 1616358600, 1632252600, 1647894600, 1663788600 ]),
    Int32List.fromList([ 12344, 12600, 16200, 14400, 18000, 14400, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600 ]),
    1000000,

    [ false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone telAviv = DynamicTimezone(
    'Asia/Tel_Aviv',
    DynamicTimezoneSpan(
      -1,
      8454000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840149254,
      dst: false,
    ),
    Int64List.fromList([ -2840149254, -1641003640, -933638400, -923097600, -919036800, -857347200, -844300800, -825811200, -812678400, -794188800, -779846400, -762652800, -748310400, -731116800, -681955200, -673228800, -667958400, -652320000, -636422400, -622080000, -608947200, -591840000, -572486400, -558576000, -542851200, -527731200, -514425600, -490838400, -482976000, -459388800, -451526400, -428544000, -418262400, -400118400, -387417600, 142380000, 150843600, 167176800, 178664400, 334101600, 337730400, 452642400, 462319200, 482277600, 494370000, 516751200, 526424400, 545436000, 558478800, 576626400, 589323600, 609890400, 620773200, 638316000, 651618000, 669765600, 683672400, 701820000, 715726800, 733701600, 747176400, 765151200, 778021200, 796600800, 810075600, 826840800, 842821200, 858895200, 874184400, 890344800, 905029200, 923011200, 936313200, 955670400, 970783200, 986770800, 1001282400, 1017356400, 1033941600, 1048806000, 1065132000, 1081292400, 1095804000, 1112313600, 1128812400, 1143763200, 1159657200, 1175212800, 1189897200, 1206662400, 1223161200, 1238112000, 1254006000, 1269561600, 1284246000, 1301616000, 1317510000, 1333065600, 1348354800, 1364515200, 1382828400, 1395964800, 1414278000, 1427414400, 1445727600, 1458864000, 1477782000, 1490313600, 1509231600, 1521763200, 1540681200, 1553817600, 1572130800, 1585267200, 1603580400, 1616716800, 1635634800, 1648166400, 1667084400, 1679616000, 1698534000, 1711670400, 1729983600, 1743120000, 1761433200, 1774569600, 1792882800, 1806019200, 1824937200, 1837468800, 1856386800, 1868918400, 1887836400, 1900972800, 1919286000, 1932422400, 1950735600, 1963872000, 1982790000, 1995321600, 2014239600, 2026771200, 2045689200, 2058220800, 2077138800, 2090275200, 2108588400, 2121724800, 2140038000, 2153174400, 2172092400, 2184624000, 2203542000, 2216073600, 2234991600, 2248128000, 2266441200, 2279577600, 2297890800, 2311027200, 2329340400, 2342476800, 2361394800, 2373926400, 2392844400, 2405376000, 2424294000, 2437430400, 2455743600, 2468880000, 2487193200, 2500329600, 2519247600, 2531779200, 2550697200, 2563228800, 2582146800, 2595283200, 2613596400, 2626732800, 2645046000, 2658182400, 2676495600, 2689632000, 2708550000, 2721081600, 2739999600, 2752531200, 2771449200, 2784585600, 2802898800, 2816035200, 2834348400, 2847484800, 2866402800, 2878934400, 2897852400, 2910384000, 2929302000, 2941833600, 2960751600, 2973888000, 2992201200, 3005337600, 3023650800, 3036787200, 3055705200, 3068236800, 3087154800, 3099686400, 3118604400, 3131740800, 3150054000, 3163190400, 3181503600, 3194640000, 3212953200, 3226089600, 3245007600, 3257539200, 3276457200, 3288988800, 3307906800, 3321043200, 3339356400, 3352492800, 3370806000, 3383942400, 3402860400, 3415392000, 3434310000, 3446841600, 3465759600, 3478896000, 3497209200, 3510345600, 3528658800, 3541795200, 3560108400, 3573244800, 3592162800, 3604694400, 3623612400, 3636144000, 3655062000, 3668198400, 3686511600, 3699648000, 3717961200, 3731097600, 3750015600, 3762547200, 3781465200, 3793996800, 3812914800, 3825446400, 3844364400, 3857500800, 3875814000, 3888950400, 3907263600, 3920400000, 3939318000, 3951849600, 3970767600, 3983299200, 4002217200, 4015353600, 4033666800, 4046803200, 4065116400, 4078252800, 4096566000, 4109702400, 4128620400, 4141152000, 4160070000, 4172601600, 4191519600, 4204051200, 4222969200, 4236105600, 4254418800, 4267555200, 4285868400, 4299004800, 4317922800, 4330454400, 4349372400, 4361904000, 4380822000, 4393958400, 4412271600, 4425408000, 4443721200, 4456857600, 4475170800, 4488307200, 4507225200, 4519756800, 4538674800, 4551206400, 4570124400, 4583260800, 4601574000, 4614710400, 4633023600, 4646160000, 4665078000, 4677609600, 4696527600, 4709059200, 4727977200, 4741113600, 4759426800, 4772563200, 4790876400, 4804012800, 4822326000, 4835462400, 4854380400, 4866912000, 4885830000, 4898361600, 4917279600, 4930416000, 4948729200, 4961865600, 4980178800, 4993315200, 5012233200, 5024764800, 5043682800, 5056214400, 5075132400, 5087664000, 5106582000, 5119718400, 5138031600, 5151168000, 5169481200, 5182617600, 5201535600, 5214067200, 5232985200, 5245516800, 5264434800, 5277571200, 5295884400, 5309020800, 5327334000, 5340470400, 5358783600, 5371920000, 5390838000, 5403369600, 5422287600, 5434819200, 5453737200, 5466873600, 5485186800, 5498323200, 5516636400, 5529772800, 5548690800, 5561222400, 5580140400, 5592672000, 5611590000, 5624726400, 5643039600, 5656176000, 5674489200, 5687625600, 5705938800, 5719075200, 5737993200, 5750524800, 5769442800, 5781974400, 5800892400, 5814028800, 5832342000, 5845478400, 5863791600, 5876928000, 5895846000, 5908377600, 5927295600, 5939827200, 5958745200, 5971276800, 5990194800, 6003331200, 6021644400, 6034780800, 6053094000, 6066230400, 6085148400, 6097680000, 6116598000, 6129129600, 6148047600, 6161184000, 6179497200, 6192633600, 6210946800, 6224083200, 6242396400, 6255532800, 6274450800, 6286982400, 6305900400, 6318432000, 6337350000, 6350486400, 6368799600, 6381936000, 6400249200, 6413385600, 6432303600, 6444835200, 6463753200, 6476284800, 6495202800, 6508339200, 6526652400, 6539788800, 6558102000, 6571238400, 6589551600, 6602688000, 6621606000, 6634137600, 6653055600, 6665587200, 6684505200, 6697641600, 6715954800, 6729091200, 6747404400, 6760540800, 6779458800, 6791990400, 6810908400, 6823440000, 6842358000, 6854889600, 6873807600, 6886944000, 6905257200, 6918393600, 6936706800, 6949843200, 6968761200, 6981292800, 7000210800, 7012742400, 7031660400, 7044796800, 7063110000, 7076246400, 7094559600, 7107696000, 7126009200, 7139145600, 7158063600, 7170595200, 7189513200, 7202044800, 7220962800, 7234099200, 7252412400, 7265548800, 7283862000, 7296998400, 7315311600, 7328448000, 7347366000, 7359897600, 7378815600, 7391347200, 7410265200, 7423401600, 7441714800, 7454851200, 7473164400, 7486300800, 7504614000, 7517750400, 7536668400, 7549200000, 7568118000, 7580649600, 7599567600, 7612704000, 7631017200, 7644153600, 7662466800, 7675603200, 7694521200, 7707052800, 7725970800, 7738502400, 7757420400, 7770556800, 7788870000, 7802006400, 7820319600, 7833456000, 7851769200, 7864905600, 7883823600, 7896355200, 7915273200, 7927804800, 7946722800, 7959859200, 7978172400, 7991308800, 8009622000, 8022758400, 8041676400, 8054208000, 8073126000, 8085657600, 8104575600, 8117107200, 8136025200, 8149161600, 8167474800, 8180611200, 8198924400, 8212060800, 8230978800, 8243510400, 8262428400, 8274960000, 8293878000, 8307014400, 8325327600, 8338464000, 8356777200, 8369913600, 8388226800, 8401363200, 8420281200, 8432812800, 8451730800, 8464262400, 8483180400, 8496316800, 8514630000, 8527766400, 8546079600, 8559216000, 8578134000, 8590665600, 8609583600, 8622115200, 8641033200, 8654169600, 8672482800, 8685619200, 8703932400, 8717068800, 8735382000, 8748518400, 8767436400, 8779968000, 8798886000, 8811417600, 8830335600, 8843472000, 8861785200, 8874921600, 8893234800, 8906371200, 8925289200, 8937820800, 8956738800, 8969270400, 8988188400, 9000720000, 9019638000, 9032774400, 9051087600, 9064224000, 9082537200, 9095673600, 9114591600, 9127123200, 9146041200, 9158572800, 9177490800, 9190627200, 9208940400, 9222076800, 9240390000, 9253526400, 9271839600, 9284976000, 9303894000, 9316425600, 9335343600, 9347875200, 9366793200, 9379929600, 9398242800, 9411379200, 9429692400, 9442828800, 9461746800, 9474278400, 9493196400, 9505728000, 9524646000, 9537782400, 9556095600, 9569232000, 9587545200, 9600681600, 9618994800, 9632131200, 9651049200, 9663580800, 9682498800, 9695030400, 9713948400, 9727084800, 9745398000, 9758534400, 9776847600, 9789984000, 9808902000, 9821433600, 9840351600, 9852883200, 9871801200, 9884332800, 9903250800, 9916387200, 9934700400, 9947836800, 9966150000, 9979286400, 9998204400, 10010736000, 10029654000, 10042185600, 10061103600, 10074240000, 10092553200, 10105689600, 10124002800, 10137139200, 10155452400, 10168588800, 10187506800, 10200038400, 10218956400, 10231488000, 10250406000, 10263542400, 10281855600, 10294992000, 10313305200, 10326441600, 10345359600, 10357891200, 10376809200, 10389340800, 10408258800, 10420790400, 10439708400, 10452844800, 10471158000, 10484294400, 10502607600, 10515744000, 10534057200, 10547193600, 10566111600, 10578643200, 10597561200, 10610092800, 10629010800, 10642147200, 10660460400, 10673596800, 10691910000, 10705046400, 10723964400, 10736496000, 10755414000, 10767945600, 10786863600, 10800000000, 10818313200, 10831449600, 10849762800, 10862899200, 10881212400, 10894348800, 10913266800, 10925798400, 10944716400, 10957248000, 10976166000, 10989302400, 11007615600, 11020752000, 11039065200, 11052201600, 11071119600, 11083651200, 11102569200, 11115100800, 11134018800, 11146550400, 11165468400, 11178604800, 11196918000, 11210054400, 11228367600, 11241504000, 11260422000, 11272953600, 11291871600, 11304403200, 11323321200, 11336457600, 11354770800, 11367907200, 11386220400, 11399356800, 11417670000, 11430806400, 11449724400, 11462256000, 11481174000, 11493705600, 11512623600, 11525760000, 11544073200, 11557209600, 11575522800, 11588659200, 11607577200, 11620108800, 11639026800, 11651558400, 11670476400, 11683612800, 11701926000, 11715062400, 11733375600, 11746512000, 11764825200, 11777961600, 11796879600, 11809411200, 11828329200, 11840860800, 11859778800, 11872915200, 11891228400, 11904364800, 11922678000, 11935814400, 11954732400, 11967264000, 11986182000, 11998713600, 12017631600, 12030163200, 12049081200, 12062217600, 12080530800, 12093667200, 12111980400, 12125116800, 12144034800, 12156566400, 12175484400, 12188016000, 12206934000, 12220070400, 12238383600, 12251520000, 12269833200, 12282969600, 12301282800, 12314419200, 12333337200, 12345868800, 12364786800, 12377318400, 12396236400, 12409372800, 12427686000, 12440822400, 12459135600, 12472272000, 12491190000, 12503721600, 12522639600, 12535171200, 12554089200, 12567225600, 12585538800, 12598675200, 12616988400, 12630124800, 12648438000, 12661574400, 12680492400, 12693024000, 12711942000, 12724473600, 12743391600, 12756528000, 12774841200, 12787977600, 12806290800, 12819427200, 12838345200, 12850876800, 12869794800, 12882326400, 12901244400, 12913776000, 12932694000, 12945830400, 12964143600, 12977280000, 12995593200, 13008729600, 13027647600, 13040179200, 13059097200, 13071628800, 13090546800, 13103683200, 13121996400, 13135132800, 13153446000, 13166582400, 13184895600, 13198032000, 13216950000, 13229481600, 13248399600, 13260931200, 13279849200, 13292985600, 13311298800, 13324435200, 13342748400, 13355884800, 13374802800, 13387334400, 13406252400, 13418784000, 13437702000, 13450838400, 13469151600, 13482288000, 13500601200, 13513737600, 13532050800, 13545187200, 13564105200, 13576636800, 13595554800, 13608086400, 13627004400, 13640140800, 13658454000, 13671590400, 13689903600, 13703040000, 13721958000, 13734489600, 13753407600, 13765939200, 13784857200, 13797388800, 13816306800, 13829443200, 13847756400, 13860892800, 13879206000, 13892342400, 13911260400, 13923792000, 13942710000, 13955241600, 13974159600, 13987296000, 14005609200 ]),
    Int32List.fromList([ 8440, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 14400, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200 ]),
    1000000,
    [ 'JMT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDDT', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone thimbu = DynamicTimezone(
    'Asia/Thimbu',
    DynamicTimezoneSpan(
      -1,
      21516000000,
      'LMT',
      TimezoneSpan.range.min,
      -706341516,
      dst: false,
    ),
    Int64List.fromList([ -706341516, 560025000 ]),
    Int16List.fromList([ 330, 360 ]),
    60000000,
    [ '+0530', '+06' ],
    [ false, false ],
  );

  static final Timezone thimphu = DynamicTimezone(
    'Asia/Thimphu',
    DynamicTimezoneSpan(
      -1,
      21516000000,
      'LMT',
      TimezoneSpan.range.min,
      -706341516,
      dst: false,
    ),
    Int64List.fromList([ -706341516, 560025000 ]),
    Int16List.fromList([ 330, 360 ]),
    60000000,
    [ '+0530', '+06' ],
    [ false, false ],
  );

  static final Timezone tokyo = DynamicTimezone(
    'Asia/Tokyo',
    DynamicTimezoneSpan(
      -1,
      33539000000,
      'LMT',
      TimezoneSpan.range.min,
      -2587712400,
      dst: false,
    ),
    Int64List.fromList([ -2587712400, -683802000, -672310800, -654771600, -640861200, -620298000, -609411600, -588848400, -577962000 ]),
    Int8List.fromList([ 9, 10, 9, 10, 9, 10, 9, 10, 9 ]),
    3600000000,
    [ 'JST', 'JDT', 'JST', 'JDT', 'JST', 'JDT', 'JST', 'JDT', 'JST' ],
    [ false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone tomsk = DynamicTimezone(
    'Asia/Tomsk',
    DynamicTimezoneSpan(
      -1,
      20391000000,
      'LMT',
      TimezoneSpan.range.min,
      -1578807591,
      dst: false,
    ),
    Int64List.fromList([ -1578807591, -1247551200, 354906000, 370713600, 386442000, 402249600, 417978000, 433785600, 449600400, 465332400, 481057200, 496782000, 512506800, 528231600, 543956400, 559681200, 575406000, 591130800, 606855600, 622580400, 638305200, 654634800, 670359600, 686088000, 695764800, 701809200, 717534000, 733258800, 748983600, 764708400, 780433200, 796158000, 811882800, 828212400, 846356400, 859662000, 877806000, 891111600, 909255600, 922561200, 941310000, 954010800, 972759600, 985460400, 1004209200, 1017514800, 1020193200, 1035662400, 1048968000, 1067112000, 1080417600, 1099166400, 1111867200, 1130616000, 1143316800, 1162065600, 1174766400, 1193515200, 1206820800, 1224964800, 1238270400, 1256414400, 1269720000, 1288468800, 1301169600, 1414263600, 1464465600 ]),
    Int8List.fromList([ 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 7, 6, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7 ]),
    3600000000,
    [ '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+07', '+06', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+08', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07', '+06', '+07' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone ujungPandang = DynamicTimezone(
    'Asia/Ujung_Pandang',
    DynamicTimezoneSpan(
      -1,
      28656000000,
      'LMT',
      TimezoneSpan.range.min,
      -1577951856,
      dst: false,
    ),
    Int64List.fromList([ -1577951856, -1172908656, -880272000, -766054800 ]),
    Int32List.fromList([ 28656, 28800, 32400, 28800 ]),
    1000000,
    [ 'MMT', '+08', '+09', 'WITA' ],
    [ false, false, false, false ],
  );

  static final Timezone ulaanbaatar = DynamicTimezone(
    'Asia/Ulaanbaatar',
    DynamicTimezoneSpan(
      -1,
      25652000000,
      'LMT',
      TimezoneSpan.range.min,
      -2032931252,
      dst: false,
    ),
    Int64List.fromList([ -2032931252, 252435600, 417974400, 433782000, 449596800, 465318000, 481046400, 496767600, 512496000, 528217200, 543945600, 559666800, 575395200, 591116400, 606844800, 622566000, 638294400, 654620400, 670348800, 686070000, 701798400, 717519600, 733248000, 748969200, 764697600, 780418800, 796147200, 811868400, 828201600, 843922800, 859651200, 875372400, 891100800, 906822000, 988394400, 1001696400, 1017424800, 1033146000, 1048874400, 1064595600, 1080324000, 1096045200, 1111773600, 1127494800, 1143223200, 1159549200, 1427479200, 1443193200, 1458928800, 1474642800 ]),
    Int8List.fromList([ 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ '+07', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone ulanBator = DynamicTimezone(
    'Asia/Ulan_Bator',
    DynamicTimezoneSpan(
      -1,
      25652000000,
      'LMT',
      TimezoneSpan.range.min,
      -2032931252,
      dst: false,
    ),
    Int64List.fromList([ -2032931252, 252435600, 417974400, 433782000, 449596800, 465318000, 481046400, 496767600, 512496000, 528217200, 543945600, 559666800, 575395200, 591116400, 606844800, 622566000, 638294400, 654620400, 670348800, 686070000, 701798400, 717519600, 733248000, 748969200, 764697600, 780418800, 796147200, 811868400, 828201600, 843922800, 859651200, 875372400, 891100800, 906822000, 988394400, 1001696400, 1017424800, 1033146000, 1048874400, 1064595600, 1080324000, 1096045200, 1111773600, 1127494800, 1143223200, 1159549200, 1427479200, 1443193200, 1458928800, 1474642800 ]),
    Int8List.fromList([ 7, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ '+07', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08', '+09', '+08' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone urumqi = DynamicTimezone(
    'Asia/Urumqi',
    DynamicTimezoneSpan(
      -1,
      21020000000,
      'LMT',
      TimezoneSpan.range.min,
      -1325483420,
      dst: false,
    ),
    Int64List.fromList([ -1325483420 ]),
    Int8List.fromList([ 6 ]),
    3600000000,
    [ '+06' ],
    [ false ],
  );

  static final Timezone ustNera = DynamicTimezone(
    'Asia/Ust-Nera',
    DynamicTimezoneSpan(
      -1,
      34374000000,
      'LMT',
      TimezoneSpan.range.min,
      -1579426374,
      dst: false,
    ),
    Int64List.fromList([ -1579426374, -1247558400, 354898800, 370699200, 386427600, 402235200, 417963600, 433771200, 449586000, 465318000, 481042800, 496767600, 512492400, 528217200, 543942000, 559666800, 575391600, 591116400, 606841200, 622566000, 638290800, 654620400, 670345200, 686073600, 695750400, 701794800, 717519600, 733244400, 748969200, 764694000, 780418800, 796143600, 811868400, 828198000, 846342000, 859647600, 877791600, 891097200, 909241200, 922546800, 941295600, 953996400, 972745200, 985446000, 1004194800, 1017500400, 1035644400, 1048950000, 1067094000, 1080399600, 1099148400, 1111849200, 1130598000, 1143298800, 1162047600, 1174748400, 1193497200, 1206802800, 1224946800, 1238252400, 1256396400, 1269702000, 1288450800, 1301151600, 1315828800, 1414249200 ]),
    Int8List.fromList([ 8, 9, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 11, 10, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 12, 11, 10 ]),
    3600000000,
    [ '+08', '+09', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+11', '+10', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+10' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, false ],
  );

  static final Timezone vientiane = DynamicTimezone(
    'Asia/Vientiane',
    DynamicTimezoneSpan(
      -1,
      24124000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840164924,
      dst: false,
    ),
    Int64List.fromList([ -2840164924, -1570084924 ]),
    Int32List.fromList([ 24124, 25200 ]),
    1000000,
    [ 'BMT', '+07' ],
    [ false, false ],
  );

  static final Timezone vladivostok = DynamicTimezone(
    'Asia/Vladivostok',
    DynamicTimezoneSpan(
      -1,
      31651000000,
      'LMT',
      TimezoneSpan.range.min,
      -1487321251,
      dst: false,
    ),
    Int64List.fromList([ -1487321251, -1247562000, 354895200, 370702800, 386431200, 402238800, 417967200, 433774800, 449589600, 465321600, 481046400, 496771200, 512496000, 528220800, 543945600, 559670400, 575395200, 591120000, 606844800, 622569600, 638294400, 654624000, 670348800, 686077200, 695754000, 701798400, 717523200, 733248000, 748972800, 764697600, 780422400, 796147200, 811872000, 828201600, 846345600, 859651200, 877795200, 891100800, 909244800, 922550400, 941299200, 954000000, 972748800, 985449600, 1004198400, 1017504000, 1035648000, 1048953600, 1067097600, 1080403200, 1099152000, 1111852800, 1130601600, 1143302400, 1162051200, 1174752000, 1193500800, 1206806400, 1224950400, 1238256000, 1256400000, 1269705600, 1288454400, 1301155200, 1414249200 ]),
    Int8List.fromList([ 9, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 10, 9, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 10 ]),
    3600000000,
    [ '+09', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+10', '+09', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10', '+11', '+10' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone yakutsk = DynamicTimezone(
    'Asia/Yakutsk',
    DynamicTimezoneSpan(
      -1,
      31138000000,
      'LMT',
      TimezoneSpan.range.min,
      -1579423138,
      dst: false,
    ),
    Int64List.fromList([ -1579423138, -1247558400, 354898800, 370706400, 386434800, 402242400, 417970800, 433778400, 449593200, 465325200, 481050000, 496774800, 512499600, 528224400, 543949200, 559674000, 575398800, 591123600, 606848400, 622573200, 638298000, 654627600, 670352400, 686080800, 695757600, 701802000, 717526800, 733251600, 748976400, 764701200, 780426000, 796150800, 811875600, 828205200, 846349200, 859654800, 877798800, 891104400, 909248400, 922554000, 941302800, 954003600, 972752400, 985453200, 1004202000, 1017507600, 1035651600, 1048957200, 1067101200, 1080406800, 1099155600, 1111856400, 1130605200, 1143306000, 1162054800, 1174755600, 1193504400, 1206810000, 1224954000, 1238259600, 1256403600, 1269709200, 1288458000, 1301158800, 1414252800 ]),
    Int8List.fromList([ 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 9, 8, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9, 10, 9 ]),
    3600000000,
    [ '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+09', '+08', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09', '+10', '+09' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone yangon = DynamicTimezone(
    'Asia/Yangon',
    DynamicTimezoneSpan(
      -1,
      23087000000,
      'LMT',
      TimezoneSpan.range.min,
      -2840163887,
      dst: false,
    ),
    Int64List.fromList([ -2840163887, -1577946287, -873268200, -778410000 ]),
    Int32List.fromList([ 23087, 23400, 32400, 23400 ]),
    1000000,
    [ 'RMT', '+0630', '+09', '+0630' ],
    [ false, false, false, false ],
  );

  static final Timezone yekaterinburg = DynamicTimezone(
    'Asia/Yekaterinburg',
    DynamicTimezoneSpan(
      -1,
      14553000000,
      'LMT',
      TimezoneSpan.range.min,
      -1688270553,
      dst: false,
    ),
    Int64List.fromList([ -1688270553, -1592610305, -1247544000, 354913200, 370720800, 386449200, 402256800, 417985200, 433792800, 449607600, 465339600, 481064400, 496789200, 512514000, 528238800, 543963600, 559688400, 575413200, 591138000, 606862800, 622587600, 638312400, 654642000, 670366800, 686095200, 695772000, 701816400, 717541200, 733266000, 748990800, 764715600, 780440400, 796165200, 811890000, 828219600, 846363600, 859669200, 877813200, 891118800, 909262800, 922568400, 941317200, 954018000, 972766800, 985467600, 1004216400, 1017522000, 1035666000, 1048971600, 1067115600, 1080421200, 1099170000, 1111870800, 1130619600, 1143320400, 1162069200, 1174770000, 1193518800, 1206824400, 1224968400, 1238274000, 1256418000, 1269723600, 1288472400, 1301173200, 1414267200 ]),
    Int32List.fromList([ 13505, 14400, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 18000, 14400, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000, 21600, 18000 ]),
    1000000,
    [ 'PMT', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+05', '+04', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05', '+06', '+05' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone yerevan = DynamicTimezone(
    'Asia/Yerevan',
    DynamicTimezoneSpan(
      -1,
      10680000000,
      'LMT',
      TimezoneSpan.range.min,
      -1441162680,
      dst: false,
    ),
    Int64List.fromList([ -1441162680, -405140400, 354916800, 370724400, 386452800, 402260400, 417988800, 433796400, 449611200, 465343200, 481068000, 496792800, 512517600, 528242400, 543967200, 559692000, 575416800, 591141600, 606866400, 622591200, 638316000, 654645600, 670370400, 686098800, 701823600, 717548400, 733273200, 748998000, 764722800, 780447600, 796172400, 811897200, 852062400, 859672800, 877816800, 891122400, 909266400, 922572000, 941320800, 954021600, 972770400, 985471200, 1004220000, 1017525600, 1035669600, 1048975200, 1067119200, 1080424800, 1099173600, 1111874400, 1130623200, 1143324000, 1162072800, 1174773600, 1193522400, 1206828000, 1224972000, 1238277600, 1256421600, 1269727200, 1288476000, 1293825600, 1301176800, 1319925600 ]),
    Int8List.fromList([ 3, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 3, 4, 3, 4, 3, 4, 3, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 5, 4 ]),
    3600000000,
    [ '+03', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+03', '+04', '+04', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+05', '+04', '+04', '+05', '+04' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false ],
  );

}


