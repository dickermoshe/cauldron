// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/generate_timezones.dart
// **************************************************************************
//
// ignore_for_file: type=lint

import 'dart:typed_data';

import 'package:sugar/src/time/offset.dart';
import 'package:sugar/src/time/zone/dynamic_timezone.dart';
import 'package:sugar/src/time/zone/fixed_timezone.dart';
import 'package:sugar/src/time/zone/timezone.dart';
import 'package:sugar/src/time/zone/timezone_span.dart';

extension Asia on Never {
  static final Timezone aden = DynamicTimezone(
    'Asia/Aden',
    DynamicTimezoneSpan(-1, 11212000000, 'LMT', TimezoneSpan.range.min.value, -719636812, dst: false),
    Int64List.fromList([-719636812]),
    Int8List.fromList([3]),
    3600000000,
    ['+03'],
    [false],
  );

  static final Timezone almaty = DynamicTimezone(
    'Asia/Almaty',
    DynamicTimezoneSpan(-1, 18468000000, 'LMT', TimezoneSpan.range.min.value, -1441170468, dst: false),
    Int64List.fromList([
      -1441170468,
      -1247547600,
      354909600,
      370717200,
      386445600,
      402253200,
      417981600,
      433789200,
      449604000,
      465336000,
      481060800,
      496785600,
      512510400,
      528235200,
      543960000,
      559684800,
      575409600,
      591134400,
      606859200,
      622584000,
      638308800,
      654638400,
      670363200,
      686091600,
      695768400,
      701812800,
      717537600,
      733262400,
      748987200,
      764712000,
      780436800,
      796161600,
      811886400,
      828216000,
      846360000,
      859665600,
      877809600,
      891115200,
      909259200,
      922564800,
      941313600,
      954014400,
      972763200,
      985464000,
      1004212800,
      1017518400,
      1035662400,
      1048968000,
      1067112000,
      1080417600,
      1099166400,
      1709229600,
    ]),
    Int8List.fromList([
      5,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      6,
      5,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      5,
    ]),
    3600000000,
    [
      '+05',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+06',
      '+05',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
    ],
  );

  static final Timezone amman = DynamicTimezone(
    'Asia/Amman',
    DynamicTimezoneSpan(-1, 8624000000, 'LMT', TimezoneSpan.range.min.value, -1230776624, dst: false),
    Int64List.fromList([
      -1230776624,
      108165600,
      118270800,
      136591200,
      149806800,
      168127200,
      181342800,
      199749600,
      215643600,
      231285600,
      244501200,
      262735200,
      275950800,
      481154400,
      496962000,
      512949600,
      528670800,
      544399200,
      560120400,
      575848800,
      592174800,
      610581600,
      623624400,
      641167200,
      655074000,
      671839200,
      685918800,
      702856800,
      717973200,
      733701600,
      749422800,
      765151200,
      779662800,
      797205600,
      811116000,
      828655200,
      843170400,
      860104800,
      874620000,
      891554400,
      906069600,
      930780000,
      938124000,
      954367200,
      970178400,
      985816800,
      1001628000,
      1017352800,
      1033077600,
      1048802400,
      1066946400,
      1080252000,
      1097791200,
      1112306400,
      1128031200,
      1143756000,
      1161900000,
      1175205600,
      1193349600,
      1206655200,
      1225404000,
      1238104800,
      1256853600,
      1269554400,
      1288303200,
      1301608800,
      1319752800,
      1333058400,
      1387486800,
      1395957600,
      1414706400,
      1427407200,
      1446156000,
      1459461600,
      1477605600,
      1490911200,
      1509055200,
      1522360800,
      1540504800,
      1553810400,
      1571954400,
      1585260000,
      1604008800,
      1616709600,
      1635458400,
      1645740000,
      1666908000,
    ]),
    Int8List.fromList([
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      3,
    ]),
    3600000000,
    [
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      '+03',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone anadyr = DynamicTimezone(
    'Asia/Anadyr',
    DynamicTimezoneSpan(-1, 42596000000, 'LMT', TimezoneSpan.range.min.value, -1441194596, dst: false),
    Int64List.fromList([
      -1441194596,
      -1247572800,
      354884400,
      370692000,
      386420400,
      402231600,
      417960000,
      433767600,
      449582400,
      465314400,
      481039200,
      496764000,
      512488800,
      528213600,
      543938400,
      559663200,
      575388000,
      591112800,
      606837600,
      622562400,
      638287200,
      654616800,
      670341600,
      686070000,
      695746800,
      701791200,
      717516000,
      733240800,
      748965600,
      764690400,
      780415200,
      796140000,
      811864800,
      828194400,
      846338400,
      859644000,
      877788000,
      891093600,
      909237600,
      922543200,
      941292000,
      953992800,
      972741600,
      985442400,
      1004191200,
      1017496800,
      1035640800,
      1048946400,
      1067090400,
      1080396000,
      1099144800,
      1111845600,
      1130594400,
      1143295200,
      1162044000,
      1174744800,
      1193493600,
      1206799200,
      1224943200,
      1238248800,
      1256392800,
      1269698400,
      1288450800,
      1301151600,
    ]),
    Int8List.fromList([
      12,
      13,
      14,
      13,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      12,
      11,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      12,
      11,
      12,
    ]),
    3600000000,
    [
      '+12',
      '+13',
      '+14',
      '+13',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+12',
      '+11',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+12',
      '+11',
      '+12',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
    ],
  );

  static final Timezone aqtau = DynamicTimezone(
    'Asia/Aqtau',
    DynamicTimezoneSpan(-1, 12064000000, 'LMT', TimezoneSpan.range.min.value, -1441164064, dst: false),
    Int64List.fromList([
      -1441164064,
      -1247544000,
      370724400,
      386445600,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686095200,
      695772000,
      701816400,
      717541200,
      733266000,
      748990800,
      764715600,
      780440400,
      796168800,
      811893600,
      828223200,
      846367200,
      859672800,
      877816800,
      891122400,
      909266400,
      922572000,
      941320800,
      954021600,
      972770400,
      985471200,
      1004220000,
      1017525600,
      1035669600,
      1048975200,
      1067119200,
      1080424800,
      1099173600,
    ]),
    Int8List.fromList([
      4,
      5,
      6,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      5,
      4,
      5,
      6,
      5,
      6,
      5,
      6,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      5,
    ]),
    3600000000,
    [
      '+04',
      '+05',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+05',
    ],
    [
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone aqtobe = DynamicTimezone(
    'Asia/Aqtobe',
    DynamicTimezoneSpan(-1, 13720000000, 'LMT', TimezoneSpan.range.min.value, -1441165720, dst: false),
    Int64List.fromList([
      -1441165720,
      -1247544000,
      354913200,
      370720800,
      386445600,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686095200,
      695772000,
      701816400,
      717541200,
      733266000,
      748990800,
      764715600,
      780440400,
      796165200,
      811890000,
      828219600,
      846363600,
      859669200,
      877813200,
      891118800,
      909262800,
      922568400,
      941317200,
      954018000,
      972766800,
      985467600,
      1004216400,
      1017522000,
      1035666000,
      1048971600,
      1067115600,
      1080421200,
      1099170000,
    ]),
    Int8List.fromList([
      4,
      5,
      6,
      6,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      5,
      4,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
    ]),
    3600000000,
    [
      '+04',
      '+05',
      '+06',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone ashgabat = DynamicTimezone(
    'Asia/Ashgabat',
    DynamicTimezoneSpan(-1, 14012000000, 'LMT', TimezoneSpan.range.min.value, -1441166012, dst: false),
    Int64List.fromList([
      -1441166012,
      -1247544000,
      354913200,
      370720800,
      386449200,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686095200,
      695772000,
    ]),
    Int8List.fromList([4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5]),
    3600000000,
    [
      '+04',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
    ],
  );

  static final Timezone ashkhabad = DynamicTimezone(
    'Asia/Ashkhabad',
    DynamicTimezoneSpan(-1, 14012000000, 'LMT', TimezoneSpan.range.min.value, -1441166012, dst: false),
    Int64List.fromList([
      -1441166012,
      -1247544000,
      354913200,
      370720800,
      386449200,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686095200,
      695772000,
    ]),
    Int8List.fromList([4, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 5, 4, 5]),
    3600000000,
    [
      '+04',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
    ],
  );

  static final Timezone atyrau = DynamicTimezone(
    'Asia/Atyrau',
    DynamicTimezoneSpan(-1, 12464000000, 'LMT', TimezoneSpan.range.min.value, -1441164464, dst: false),
    Int64List.fromList([
      -1441164464,
      -1247540400,
      370724400,
      386445600,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686095200,
      695772000,
      701816400,
      717541200,
      733266000,
      748990800,
      764715600,
      780440400,
      796165200,
      811890000,
      828219600,
      846363600,
      859669200,
      877813200,
      891118800,
      909262800,
      922568400,
      941320800,
      954021600,
      972770400,
      985471200,
      1004220000,
      1017525600,
      1035669600,
      1048975200,
      1067119200,
      1080424800,
      1099173600,
    ]),
    Int8List.fromList([
      3,
      5,
      6,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      5,
      4,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      5,
    ]),
    3600000000,
    [
      '+03',
      '+05',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+05',
    ],
    [
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone baghdad = DynamicTimezone(
    'Asia/Baghdad',
    DynamicTimezoneSpan(-1, 10660000000, 'LMT', TimezoneSpan.range.min.value, -2524532260, dst: false),
    Int64List.fromList([
      -2524532260,
      -1641005856,
      389048400,
      402264000,
      417906000,
      433800000,
      449614800,
      465422400,
      481150800,
      496792800,
      512517600,
      528242400,
      543967200,
      559692000,
      575416800,
      591141600,
      606866400,
      622591200,
      638316000,
      654645600,
      670464000,
      686275200,
      702086400,
      717897600,
      733622400,
      749433600,
      765158400,
      780969600,
      796694400,
      812505600,
      828316800,
      844128000,
      859852800,
      875664000,
      891388800,
      907200000,
      922924800,
      938736000,
      954547200,
      970358400,
      986083200,
      1001894400,
      1017619200,
      1033430400,
      1049155200,
      1064966400,
      1080777600,
      1096588800,
      1112313600,
      1128124800,
      1143849600,
      1159660800,
      1175385600,
      1191196800,
    ]),
    Int32List.fromList([
      10656,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
    ]),
    1000000,
    [
      'BMT',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone bahrain = DynamicTimezone(
    'Asia/Bahrain',
    DynamicTimezoneSpan(-1, 12368000000, 'LMT', TimezoneSpan.range.min.value, -1577935568, dst: false),
    Int64List.fromList([-1577935568, 76190400]),
    Int8List.fromList([4, 3]),
    3600000000,
    ['+04', '+03'],
    [false, false],
  );

  static final Timezone baku = DynamicTimezone(
    'Asia/Baku',
    DynamicTimezoneSpan(-1, 11964000000, 'LMT', TimezoneSpan.range.min.value, -1441163964, dst: false),
    Int64List.fromList([
      -1441163964,
      -405140400,
      354916800,
      370724400,
      386452800,
      402260400,
      417988800,
      433796400,
      449611200,
      465343200,
      481068000,
      496792800,
      512517600,
      528242400,
      543967200,
      559692000,
      575416800,
      591141600,
      606866400,
      622591200,
      638316000,
      654645600,
      670370400,
      686098800,
      701823600,
      717548400,
      828234000,
      846378000,
      859680000,
      877824000,
      891129600,
      909273600,
      922579200,
      941328000,
      954028800,
      972777600,
      985478400,
      1004227200,
      1017532800,
      1035676800,
      1048982400,
      1067126400,
      1080432000,
      1099180800,
      1111881600,
      1130630400,
      1143331200,
      1162080000,
      1174780800,
      1193529600,
      1206835200,
      1224979200,
      1238284800,
      1256428800,
      1269734400,
      1288483200,
      1301184000,
      1319932800,
      1332633600,
      1351382400,
      1364688000,
      1382832000,
      1396137600,
      1414281600,
      1427587200,
      1445731200,
    ]),
    Int8List.fromList([
      3,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      4,
      3,
      4,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
    ]),
    3600000000,
    [
      '+03',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+04',
      '+03',
      '+04',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone bangkok = DynamicTimezone(
    'Asia/Bangkok',
    DynamicTimezoneSpan(-1, 24124000000, 'LMT', TimezoneSpan.range.min.value, -2840164924, dst: false),
    Int64List.fromList([-2840164924, -1570084924]),
    Int32List.fromList([24124, 25200]),
    1000000,
    ['BMT', '+07'],
    [false, false],
  );

  static final Timezone barnaul = DynamicTimezone(
    'Asia/Barnaul',
    DynamicTimezoneSpan(-1, 20100000000, 'LMT', TimezoneSpan.range.min.value, -1579844100, dst: false),
    Int64List.fromList([
      -1579844100,
      -1247551200,
      354906000,
      370713600,
      386442000,
      402249600,
      417978000,
      433785600,
      449600400,
      465332400,
      481057200,
      496782000,
      512506800,
      528231600,
      543956400,
      559681200,
      575406000,
      591130800,
      606855600,
      622580400,
      638305200,
      654634800,
      670359600,
      686088000,
      695764800,
      701809200,
      717534000,
      733258800,
      748983600,
      764708400,
      780433200,
      796158000,
      801590400,
      811886400,
      828216000,
      846360000,
      859665600,
      877809600,
      891115200,
      909259200,
      922564800,
      941313600,
      954014400,
      972763200,
      985464000,
      1004212800,
      1017518400,
      1035662400,
      1048968000,
      1067112000,
      1080417600,
      1099166400,
      1111867200,
      1130616000,
      1143316800,
      1162065600,
      1174766400,
      1193515200,
      1206820800,
      1224964800,
      1238270400,
      1256414400,
      1269720000,
      1288468800,
      1301169600,
      1414263600,
      1459022400,
    ]),
    Int8List.fromList([
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      7,
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
    ]),
    3600000000,
    [
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+07',
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      false,
    ],
  );

  static final Timezone beirut = DynamicTimezone(
    'Asia/Beirut',
    DynamicTimezoneSpan(-1, 8520000000, 'LMT', TimezoneSpan.range.min.value, -2840149320, dst: false),
    Int64List.fromList([
      -2840149320,
      -1570413600,
      -1552186800,
      -1538359200,
      -1522551600,
      -1507514400,
      -1490583600,
      -1473645600,
      -1460948400,
      -399866400,
      -386650800,
      -368330400,
      -355114800,
      -336794400,
      -323578800,
      -305172000,
      -291956400,
      -273636000,
      -260420400,
      78012000,
      86734800,
      105055200,
      118270800,
      136591200,
      149806800,
      168127200,
      181342800,
      199749600,
      212965200,
      231285600,
      244501200,
      262735200,
      275950800,
      452210400,
      466722000,
      483746400,
      498258000,
      515282400,
      529794000,
      546818400,
      561330000,
      581119200,
      592952400,
      610754400,
      624488400,
      641512800,
      656024400,
      673048800,
      687560400,
      704671200,
      718146000,
      733269600,
      748990800,
      764719200,
      780440400,
      796168800,
      811890000,
      828223200,
      843944400,
      859672800,
      875394000,
      891122400,
      906843600,
      922572000,
      941317200,
      954021600,
      972766800,
      985471200,
      1004216400,
      1017525600,
      1035666000,
      1048975200,
      1067115600,
      1080424800,
      1099170000,
      1111874400,
      1130619600,
      1143324000,
      1162069200,
      1174773600,
      1193518800,
      1206828000,
      1224968400,
      1238277600,
      1256418000,
      1269727200,
      1288472400,
      1301176800,
      1319922000,
      1332626400,
      1351371600,
      1364680800,
      1382821200,
      1396130400,
      1414270800,
      1427580000,
      1445720400,
      1459029600,
      1477774800,
      1490479200,
      1509224400,
      1521928800,
      1540674000,
      1553983200,
      1572123600,
      1585432800,
      1603573200,
      1616882400,
      1635627600,
      1648332000,
      1667077200,
      1679781600,
      1698526800,
      1711836000,
      1729976400,
      1743285600,
      1761426000,
      1774735200,
      1792875600,
      1806184800,
      1824930000,
      1837634400,
      1856379600,
      1869084000,
      1887829200,
      1901138400,
      1919278800,
      1932588000,
      1950728400,
      1964037600,
      1982782800,
      1995487200,
      2014232400,
      2026936800,
      2045682000,
      2058386400,
      2077131600,
      2090440800,
      2108581200,
      2121890400,
      2140030800,
    ]),
    Int8List.fromList([
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
    ]),
    3600000000,
    [
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone bishkek = DynamicTimezone(
    'Asia/Bishkek',
    DynamicTimezoneSpan(-1, 17904000000, 'LMT', TimezoneSpan.range.min.value, -1441169904, dst: false),
    Int64List.fromList([
      -1441169904,
      -1247547600,
      354909600,
      370717200,
      386445600,
      402253200,
      417981600,
      433789200,
      449604000,
      465336000,
      481060800,
      496785600,
      512510400,
      528235200,
      543960000,
      559684800,
      575409600,
      591134400,
      606859200,
      622584000,
      638308800,
      654638400,
      670363200,
      683582400,
      703018800,
      717530400,
      734468400,
      748980000,
      765918000,
      780429600,
      797367600,
      811879200,
      828817200,
      843933600,
      859671000,
      877811400,
      891120600,
      909261000,
      922570200,
      941315400,
      954019800,
      972765000,
      985469400,
      1004214600,
      1017523800,
      1035664200,
      1048973400,
      1067113800,
      1080423000,
      1099168200,
      1111872600,
      1123783200,
    ]),
    Int8List.fromList([
      5,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      6,
    ]),
    3600000000,
    [
      '+05',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+06',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone brunei = DynamicTimezone(
    'Asia/Brunei',
    DynamicTimezoneSpan(-1, 26480000000, 'LMT', TimezoneSpan.range.min.value, -1383463280, dst: false),
    Int64List.fromList([
      -1383463280,
      -1167636600,
      -1082448000,
      -1074586800,
      -1050825600,
      -1042964400,
      -1019289600,
      -1011428400,
      -987753600,
      -979892400,
      -956217600,
      -948356400,
      -924595200,
      -916734000,
      -893059200,
      -885198000,
      -879667200,
      -767005200,
    ]),
    Int16List.fromList([450, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 540, 480]),
    60000000,
    [
      '+0730',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+09',
      '+08',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone calcutta = DynamicTimezone(
    'Asia/Calcutta',
    DynamicTimezoneSpan(-1, 21208000000, 'LMT', TimezoneSpan.range.min.value, -3645237208, dst: false),
    Int64List.fromList([-3645237208, -3155694800, -2019705670, -891581400, -872058600, -862637400, -764145000]),
    Int32List.fromList([21200, 19270, 19800, 23400, 19800, 23400, 19800]),
    1000000,
    ['HMT', 'MMT', 'IST', '+0630', 'IST', '+0630', 'IST'],
    [false, false, false, true, false, true, false],
  );

  static final Timezone chita = DynamicTimezone(
    'Asia/Chita',
    DynamicTimezoneSpan(-1, 27232000000, 'LMT', TimezoneSpan.range.min.value, -1579419232, dst: false),
    Int64List.fromList([
      -1579419232,
      -1247558400,
      354898800,
      370706400,
      386434800,
      402242400,
      417970800,
      433778400,
      449593200,
      465325200,
      481050000,
      496774800,
      512499600,
      528224400,
      543949200,
      559674000,
      575398800,
      591123600,
      606848400,
      622573200,
      638298000,
      654627600,
      670352400,
      686080800,
      695757600,
      701802000,
      717526800,
      733251600,
      748976400,
      764701200,
      780426000,
      796150800,
      811875600,
      828205200,
      846349200,
      859654800,
      877798800,
      891104400,
      909248400,
      922554000,
      941302800,
      954003600,
      972752400,
      985453200,
      1004202000,
      1017507600,
      1035651600,
      1048957200,
      1067101200,
      1080406800,
      1099155600,
      1111856400,
      1130605200,
      1143306000,
      1162054800,
      1174755600,
      1193504400,
      1206810000,
      1224954000,
      1238259600,
      1256403600,
      1269709200,
      1288458000,
      1301158800,
      1414252800,
      1459015200,
    ]),
    Int8List.fromList([
      8,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      9,
      8,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      8,
      9,
    ]),
    3600000000,
    [
      '+08',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+09',
      '+08',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+08',
      '+09',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      false,
    ],
  );

  static final Timezone choibalsan = DynamicTimezone(
    'Asia/Choibalsan',
    DynamicTimezoneSpan(-1, 25652000000, 'LMT', TimezoneSpan.range.min.value, -2032931252, dst: false),
    Int64List.fromList([
      -2032931252,
      252435600,
      417974400,
      433782000,
      449596800,
      465318000,
      481046400,
      496767600,
      512496000,
      528217200,
      543945600,
      559666800,
      575395200,
      591116400,
      606844800,
      622566000,
      638294400,
      654620400,
      670348800,
      686070000,
      701798400,
      717519600,
      733248000,
      748969200,
      764697600,
      780418800,
      796147200,
      811868400,
      828201600,
      843922800,
      859651200,
      875372400,
      891100800,
      906822000,
      988394400,
      1001696400,
      1017424800,
      1033146000,
      1048874400,
      1064595600,
      1080324000,
      1096045200,
      1111773600,
      1127494800,
      1143223200,
      1159549200,
      1427479200,
      1443193200,
      1458928800,
      1474642800,
    ]),
    Int8List.fromList([
      7,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
    ]),
    3600000000,
    [
      '+07',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone chongqing = DynamicTimezone(
    'Asia/Chongqing',
    DynamicTimezoneSpan(-1, 29143000000, 'LMT', TimezoneSpan.range.min.value, -2177481943, dst: false),
    Int64List.fromList([
      -2177481943,
      -1600675200,
      -1585904400,
      -933667200,
      -922093200,
      -908870400,
      -888829200,
      -881049600,
      -767869200,
      -745833600,
      -733827600,
      -716889600,
      -699613200,
      -683884800,
      -670669200,
      -652348800,
      -650019600,
      515527200,
      527014800,
      545162400,
      558464400,
      577216800,
      589914000,
      608666400,
      621968400,
      640116000,
      653418000,
      671565600,
      684867600,
    ]),
    Int8List.fromList([8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8]),
    3600000000,
    [
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone chungking = DynamicTimezone(
    'Asia/Chungking',
    DynamicTimezoneSpan(-1, 29143000000, 'LMT', TimezoneSpan.range.min.value, -2177481943, dst: false),
    Int64List.fromList([
      -2177481943,
      -1600675200,
      -1585904400,
      -933667200,
      -922093200,
      -908870400,
      -888829200,
      -881049600,
      -767869200,
      -745833600,
      -733827600,
      -716889600,
      -699613200,
      -683884800,
      -670669200,
      -652348800,
      -650019600,
      515527200,
      527014800,
      545162400,
      558464400,
      577216800,
      589914000,
      608666400,
      621968400,
      640116000,
      653418000,
      671565600,
      684867600,
    ]),
    Int8List.fromList([8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8]),
    3600000000,
    [
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone colombo = DynamicTimezone(
    'Asia/Colombo',
    DynamicTimezoneSpan(-1, 19164000000, 'LMT', TimezoneSpan.range.min.value, -2840159964, dst: false),
    Int64List.fromList([
      -2840159964,
      -2019705572,
      -883287000,
      -862639200,
      -764051400,
      832962600,
      846266400,
      1145039400,
    ]),
    Int32List.fromList([19172, 19800, 21600, 23400, 19800, 23400, 21600, 19800]),
    1000000,
    ['MMT', '+0530', '+06', '+0630', '+0530', '+0630', '+06', '+0530'],
    [false, false, true, true, false, false, false, false],
  );

  static final Timezone dacca = DynamicTimezone(
    'Asia/Dacca',
    DynamicTimezoneSpan(-1, 21700000000, 'LMT', TimezoneSpan.range.min.value, -2524543300, dst: false),
    Int64List.fromList([-2524543300, -891582800, -872058600, -862637400, -576138600, 1245430800, 1262278800]),
    Int32List.fromList([21200, 23400, 19800, 23400, 21600, 25200, 21600]),
    1000000,
    ['HMT', '+0630', '+0530', '+0630', '+06', '+07', '+06'],
    [false, false, false, false, false, true, false],
  );

  static final Timezone damascus = DynamicTimezone(
    'Asia/Damascus',
    DynamicTimezoneSpan(-1, 8712000000, 'LMT', TimezoneSpan.range.min.value, -1577931912, dst: false),
    Int64List.fromList([
      -1577931912,
      -1568592000,
      -1554080400,
      -1537142400,
      -1522630800,
      -1505692800,
      -1491181200,
      -1474243200,
      -1459126800,
      -242265600,
      -228877200,
      -210556800,
      -197427600,
      -178934400,
      -165718800,
      -147398400,
      -134269200,
      -116467200,
      -102646800,
      -84326400,
      -71110800,
      -52704000,
      -39488400,
      -21168000,
      -7952400,
      10368000,
      23583600,
      41904000,
      55119600,
      73526400,
      86742000,
      105062400,
      118278000,
      136598400,
      149814000,
      168134400,
      181350000,
      199756800,
      212972400,
      231292800,
      241916400,
      262828800,
      273452400,
      418694400,
      433810800,
      450316800,
      465433200,
      508896000,
      529196400,
      541555200,
      562633200,
      574387200,
      594255600,
      607305600,
      623199600,
      638928000,
      654649200,
      670456800,
      686264400,
      702684000,
      717886800,
      733096800,
      748904400,
      765151200,
      780958800,
      796687200,
      812494800,
      828309600,
      844117200,
      859759200,
      875653200,
      891208800,
      907189200,
      922917600,
      938725200,
      954540000,
      970347600,
      986076000,
      1001883600,
      1017612000,
      1033419600,
      1049148000,
      1064955600,
      1080770400,
      1096578000,
      1112306400,
      1128114000,
      1143842400,
      1158872400,
      1175205600,
      1193950800,
      1207260000,
      1225486800,
      1238104800,
      1256850000,
      1270159200,
      1288299600,
      1301608800,
      1319749200,
      1333058400,
      1351198800,
      1364508000,
      1382648400,
      1395957600,
      1414702800,
      1427407200,
      1446152400,
      1458856800,
      1477602000,
      1490911200,
      1509051600,
      1522360800,
      1540501200,
      1553810400,
      1571950800,
      1585260000,
      1604005200,
      1616709600,
      1635454800,
      1648159200,
      1666904400,
    ]),
    Int8List.fromList([
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      3,
    ]),
    3600000000,
    [
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      '+03',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone dhaka = DynamicTimezone(
    'Asia/Dhaka',
    DynamicTimezoneSpan(-1, 21700000000, 'LMT', TimezoneSpan.range.min.value, -2524543300, dst: false),
    Int64List.fromList([-2524543300, -891582800, -872058600, -862637400, -576138600, 1245430800, 1262278800]),
    Int32List.fromList([21200, 23400, 19800, 23400, 21600, 25200, 21600]),
    1000000,
    ['HMT', '+0630', '+0530', '+0630', '+06', '+07', '+06'],
    [false, false, false, false, false, true, false],
  );

  static final Timezone dili = DynamicTimezone(
    'Asia/Dili',
    DynamicTimezoneSpan(-1, 30140000000, 'LMT', TimezoneSpan.range.min.value, -1830412800, dst: false),
    Int64List.fromList([-1830412800, -879152400, 199897200, 969120000]),
    Int8List.fromList([8, 9, 8, 9]),
    3600000000,
    ['+08', '+09', '+08', '+09'],
    [false, false, false, false],
  );

  static final Timezone dubai = DynamicTimezone(
    'Asia/Dubai',
    DynamicTimezoneSpan(-1, 13272000000, 'LMT', TimezoneSpan.range.min.value, -1577936472, dst: false),
    Int64List.fromList([-1577936472]),
    Int8List.fromList([4]),
    3600000000,
    ['+04'],
    [false],
  );

  static final Timezone dushanbe = DynamicTimezone(
    'Asia/Dushanbe',
    DynamicTimezoneSpan(-1, 16512000000, 'LMT', TimezoneSpan.range.min.value, -1441168512, dst: false),
    Int64List.fromList([
      -1441168512,
      -1247547600,
      354909600,
      370717200,
      386445600,
      402253200,
      417981600,
      433789200,
      449604000,
      465336000,
      481060800,
      496785600,
      512510400,
      528235200,
      543960000,
      559684800,
      575409600,
      591134400,
      606859200,
      622584000,
      638308800,
      654638400,
      670363200,
      684363600,
    ]),
    Int8List.fromList([5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 5]),
    3600000000,
    [
      '+05',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+06',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone famagusta = DynamicTimezone(
    'Asia/Famagusta',
    DynamicTimezoneSpan(-1, 8148000000, 'LMT', TimezoneSpan.range.min.value, -1518920148, dst: false),
    Int64List.fromList([
      -1518920148,
      166572000,
      182293200,
      200959200,
      213829200,
      228866400,
      243982800,
      260316000,
      276123600,
      291765600,
      307486800,
      323820000,
      338936400,
      354664800,
      370386000,
      386114400,
      401835600,
      417564000,
      433285200,
      449013600,
      465339600,
      481068000,
      496789200,
      512517600,
      528238800,
      543967200,
      559688400,
      575416800,
      591138000,
      606866400,
      622587600,
      638316000,
      654642000,
      670370400,
      686091600,
      701820000,
      717541200,
      733269600,
      748990800,
      764719200,
      780440400,
      796168800,
      811890000,
      828223200,
      843944400,
      859672800,
      875394000,
      891122400,
      909277200,
      922582800,
      941331600,
      954032400,
      972781200,
      985482000,
      1004230800,
      1017536400,
      1035680400,
      1048986000,
      1067130000,
      1080435600,
      1099184400,
      1111885200,
      1130634000,
      1143334800,
      1162083600,
      1174784400,
      1193533200,
      1206838800,
      1224982800,
      1238288400,
      1256432400,
      1269738000,
      1288486800,
      1301187600,
      1319936400,
      1332637200,
      1351386000,
      1364691600,
      1382835600,
      1396141200,
      1414285200,
      1427590800,
      1445734800,
      1459040400,
      1473282000,
      1509238800,
      1521939600,
      1540688400,
      1553994000,
      1572138000,
      1585443600,
      1603587600,
      1616893200,
      1635642000,
      1648342800,
      1667091600,
      1679792400,
      1698541200,
      1711846800,
      1729990800,
      1743296400,
      1761440400,
      1774746000,
      1792890000,
      1806195600,
      1824944400,
      1837645200,
      1856394000,
      1869094800,
      1887843600,
      1901149200,
      1919293200,
      1932598800,
      1950742800,
      1964048400,
      1982797200,
      1995498000,
      2014246800,
      2026947600,
      2045696400,
      2058397200,
      2077146000,
      2090451600,
      2108595600,
      2121901200,
      2140045200,
    ]),
    Int8List.fromList([
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
    ]),
    3600000000,
    [
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      '+03',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone gaza = DynamicTimezone(
    'Asia/Gaza',
    DynamicTimezoneSpan(-1, 8272000000, 'LMT', TimezoneSpan.range.min.value, -2185409872, dst: false),
    Int64List.fromList([
      -2185409872,
      -933638400,
      -923097600,
      -919036800,
      -857347200,
      -844300800,
      -825811200,
      -812678400,
      -794188800,
      -779846400,
      -762652800,
      -748310400,
      -731116800,
      -399088800,
      -386650800,
      -368330400,
      -355114800,
      -336790800,
      -323654400,
      -305168400,
      -292032000,
      -273632400,
      -260496000,
      -242096400,
      -228960000,
      -210560400,
      -197424000,
      -178938000,
      -165801600,
      -147402000,
      -134265600,
      -115866000,
      -102643200,
      -84330000,
      -81313200,
      142380000,
      150843600,
      167176800,
      178664400,
      334101600,
      337730400,
      452642400,
      462319200,
      482277600,
      494370000,
      516751200,
      526424400,
      545436000,
      558478800,
      576626400,
      589323600,
      609890400,
      620773200,
      638316000,
      651618000,
      669765600,
      683672400,
      701820000,
      715726800,
      733701600,
      747176400,
      765151200,
      778021200,
      796600800,
      810075600,
      820447200,
      828655200,
      843170400,
      860104800,
      874620000,
      891554400,
      906069600,
      924213600,
      939934800,
      956268000,
      971989200,
      987717600,
      1003438800,
      1019167200,
      1034888400,
      1050616800,
      1066338000,
      1082066400,
      1096581600,
      1113516000,
      1128380400,
      1143842400,
      1158872400,
      1175378400,
      1189638000,
      1206655200,
      1219957200,
      1238104800,
      1252015200,
      1269640860,
      1281474000,
      1301608860,
      1312146000,
      1333058400,
      1348178400,
      1364508000,
      1380229200,
      1395957600,
      1414098000,
      1427493600,
      1445551200,
      1458946800,
      1477692000,
      1490396400,
      1509141600,
      1521846000,
      1540591200,
      1553810400,
      1572037200,
      1585346400,
      1603490400,
      1616796000,
      1635458400,
      1648332000,
      1666998000,
      1682726400,
      1698447600,
      1713571200,
      1729897200,
      1744416000,
      1761346800,
      1774656000,
      1792796400,
      1806105600,
      1824850800,
      1837555200,
      1856300400,
      1869004800,
      1887750000,
      1901059200,
      1919199600,
      1932508800,
      1950649200,
      1963958400,
      1982703600,
      1995408000,
      2014153200,
      2026857600,
      2045602800,
      2058307200,
      2077052400,
      2090361600,
      2107897200,
      2121811200,
      2138742000,
      2153260800,
      2168982000,
      2184710400,
      2199826800,
      2216160000,
      2230066800,
      2234304000,
      2234905200,
      2248214400,
      2260911600,
      2264544000,
      2266354800,
      2279664000,
      2291756400,
      2295388800,
      2297804400,
      2311113600,
      2321996400,
      2326233600,
      2329254000,
      2342563200,
      2352841200,
      2356473600,
      2361308400,
      2374012800,
      2383686000,
      2387318400,
      2392758000,
      2405462400,
      2413926000,
      2418163200,
      2424207600,
      2437516800,
      2444770800,
      2448403200,
      2455657200,
      2468966400,
      2475010800,
      2479248000,
      2487106800,
      2500416000,
      2505855600,
      2509488000,
      2519161200,
      2531865600,
      2536700400,
      2540332800,
      2550610800,
      2563315200,
      2566940400,
      2571177600,
      2582060400,
      2595369600,
      2597785200,
      2601417600,
      2613510000,
      2626819200,
      2628025200,
      2632262400,
      2644959600,
      2658268800,
      2658870000,
      2663107200,
      2676409200,
      2693347200,
      2708463600,
      2724192000,
      2739913200,
      2754432000,
      2771362800,
      2785276800,
      2802812400,
      2816121600,
      2834262000,
      2847571200,
      2866316400,
      2879020800,
      2897766000,
      2910470400,
      2929215600,
      2941920000,
      2960665200,
      2973974400,
      2992114800,
      3005424000,
      3023564400,
      3036873600,
      3055618800,
      3068323200,
      3087068400,
      3099772800,
      3117913200,
      3131827200,
      3148758000,
      3163276800,
      3179602800,
      3194726400,
      3209842800,
      3226176000,
      3240687600,
      3244320000,
      3244921200,
      3257625600,
      3271532400,
      3275164800,
      3276370800,
      3289075200,
      3301772400,
      3306009600,
      3307820400,
      3321129600,
      3332617200,
      3336249600,
      3339270000,
      3352579200,
      3362857200,
      3367094400,
      3370719600,
      3384028800,
      3393702000,
      3397939200,
      3402774000,
      3415478400,
      3424546800,
      3428179200,
      3434223600,
      3446928000,
      3454786800,
      3459024000,
      3465673200,
      3478982400,
      3485631600,
      3489264000,
      3497122800,
      3510432000,
      3516476400,
      3520108800,
      3528572400,
      3541881600,
      3546716400,
      3550953600,
      3560022000,
      3573331200,
      3577561200,
      3581193600,
      3592076400,
      3604780800,
      3607801200,
      3612038400,
      3623526000,
      3636230400,
      3638646000,
      3642883200,
      3654975600,
      3668284800,
      3669490800,
      3673123200,
      3686425200,
    ]),
    Int8List.fromList([
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
    ]),
    3600000000,
    [
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone harbin = DynamicTimezone(
    'Asia/Harbin',
    DynamicTimezoneSpan(-1, 29143000000, 'LMT', TimezoneSpan.range.min.value, -2177481943, dst: false),
    Int64List.fromList([
      -2177481943,
      -1600675200,
      -1585904400,
      -933667200,
      -922093200,
      -908870400,
      -888829200,
      -881049600,
      -767869200,
      -745833600,
      -733827600,
      -716889600,
      -699613200,
      -683884800,
      -670669200,
      -652348800,
      -650019600,
      515527200,
      527014800,
      545162400,
      558464400,
      577216800,
      589914000,
      608666400,
      621968400,
      640116000,
      653418000,
      671565600,
      684867600,
    ]),
    Int8List.fromList([8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8]),
    3600000000,
    [
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone hebron = DynamicTimezone(
    'Asia/Hebron',
    DynamicTimezoneSpan(-1, 8423000000, 'LMT', TimezoneSpan.range.min.value, -2185410023, dst: false),
    Int64List.fromList([
      -2185410023,
      -933638400,
      -923097600,
      -919036800,
      -857347200,
      -844300800,
      -825811200,
      -812678400,
      -794188800,
      -779846400,
      -762652800,
      -748310400,
      -731116800,
      -399088800,
      -386650800,
      -368330400,
      -355114800,
      -336790800,
      -323654400,
      -305168400,
      -292032000,
      -273632400,
      -260496000,
      -242096400,
      -228960000,
      -210560400,
      -197424000,
      -178938000,
      -165801600,
      -147402000,
      -134265600,
      -115866000,
      -102643200,
      -84330000,
      -81313200,
      142380000,
      150843600,
      167176800,
      178664400,
      334101600,
      337730400,
      452642400,
      462319200,
      482277600,
      494370000,
      516751200,
      526424400,
      545436000,
      558478800,
      576626400,
      589323600,
      609890400,
      620773200,
      638316000,
      651618000,
      669765600,
      683672400,
      701820000,
      715726800,
      733701600,
      747176400,
      765151200,
      778021200,
      796600800,
      810075600,
      820447200,
      828655200,
      843170400,
      860104800,
      874620000,
      891554400,
      906069600,
      924213600,
      939934800,
      956268000,
      971989200,
      987717600,
      1003438800,
      1019167200,
      1034888400,
      1050616800,
      1066338000,
      1082066400,
      1096581600,
      1113516000,
      1128380400,
      1143842400,
      1158872400,
      1175378400,
      1189638000,
      1206655200,
      1220216400,
      1238104800,
      1252015200,
      1269554400,
      1281474000,
      1301608860,
      1312146000,
      1314655200,
      1317330000,
      1333058400,
      1348178400,
      1364508000,
      1380229200,
      1395957600,
      1414098000,
      1427493600,
      1445551200,
      1458946800,
      1477692000,
      1490396400,
      1509141600,
      1521846000,
      1540591200,
      1553810400,
      1572037200,
      1585346400,
      1603490400,
      1616796000,
      1635458400,
      1648332000,
      1666998000,
      1682726400,
      1698447600,
      1713571200,
      1729897200,
      1744416000,
      1761346800,
      1774656000,
      1792796400,
      1806105600,
      1824850800,
      1837555200,
      1856300400,
      1869004800,
      1887750000,
      1901059200,
      1919199600,
      1932508800,
      1950649200,
      1963958400,
      1982703600,
      1995408000,
      2014153200,
      2026857600,
      2045602800,
      2058307200,
      2077052400,
      2090361600,
      2107897200,
      2121811200,
      2138742000,
      2153260800,
      2168982000,
      2184710400,
      2199826800,
      2216160000,
      2230066800,
      2234304000,
      2234905200,
      2248214400,
      2260911600,
      2264544000,
      2266354800,
      2279664000,
      2291756400,
      2295388800,
      2297804400,
      2311113600,
      2321996400,
      2326233600,
      2329254000,
      2342563200,
      2352841200,
      2356473600,
      2361308400,
      2374012800,
      2383686000,
      2387318400,
      2392758000,
      2405462400,
      2413926000,
      2418163200,
      2424207600,
      2437516800,
      2444770800,
      2448403200,
      2455657200,
      2468966400,
      2475010800,
      2479248000,
      2487106800,
      2500416000,
      2505855600,
      2509488000,
      2519161200,
      2531865600,
      2536700400,
      2540332800,
      2550610800,
      2563315200,
      2566940400,
      2571177600,
      2582060400,
      2595369600,
      2597785200,
      2601417600,
      2613510000,
      2626819200,
      2628025200,
      2632262400,
      2644959600,
      2658268800,
      2658870000,
      2663107200,
      2676409200,
      2693347200,
      2708463600,
      2724192000,
      2739913200,
      2754432000,
      2771362800,
      2785276800,
      2802812400,
      2816121600,
      2834262000,
      2847571200,
      2866316400,
      2879020800,
      2897766000,
      2910470400,
      2929215600,
      2941920000,
      2960665200,
      2973974400,
      2992114800,
      3005424000,
      3023564400,
      3036873600,
      3055618800,
      3068323200,
      3087068400,
      3099772800,
      3117913200,
      3131827200,
      3148758000,
      3163276800,
      3179602800,
      3194726400,
      3209842800,
      3226176000,
      3240687600,
      3244320000,
      3244921200,
      3257625600,
      3271532400,
      3275164800,
      3276370800,
      3289075200,
      3301772400,
      3306009600,
      3307820400,
      3321129600,
      3332617200,
      3336249600,
      3339270000,
      3352579200,
      3362857200,
      3367094400,
      3370719600,
      3384028800,
      3393702000,
      3397939200,
      3402774000,
      3415478400,
      3424546800,
      3428179200,
      3434223600,
      3446928000,
      3454786800,
      3459024000,
      3465673200,
      3478982400,
      3485631600,
      3489264000,
      3497122800,
      3510432000,
      3516476400,
      3520108800,
      3528572400,
      3541881600,
      3546716400,
      3550953600,
      3560022000,
      3573331200,
      3577561200,
      3581193600,
      3592076400,
      3604780800,
      3607801200,
      3612038400,
      3623526000,
      3636230400,
      3638646000,
      3642883200,
      3654975600,
      3668284800,
      3669490800,
      3673123200,
      3686425200,
    ]),
    Int8List.fromList([
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
    ]),
    3600000000,
    [
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone hoChiMinh = DynamicTimezone(
    'Asia/Ho_Chi_Minh',
    DynamicTimezoneSpan(-1, 25590000000, 'LMT', TimezoneSpan.range.min.value, -2004073590, dst: false),
    Int64List.fromList([
      -2004073590,
      -1851577590,
      -852105600,
      -782643600,
      -767869200,
      -718095600,
      -457772400,
      -315648000,
      171820800,
    ]),
    Int32List.fromList([25590, 25200, 28800, 32400, 25200, 28800, 25200, 28800, 25200]),
    1000000,
    ['PLMT', '+07', '+08', '+09', '+07', '+08', '+07', '+08', '+07'],
    [false, false, false, false, false, false, false, false, false],
  );

  static final Timezone hongKong = DynamicTimezone(
    'Asia/Hong_Kong',
    DynamicTimezoneSpan(-1, 27402000000, 'LMT', TimezoneSpan.range.min.value, -2056690800, dst: false),
    Int64List.fromList([
      -2056690800,
      -900910800,
      -891579600,
      -884248200,
      -761209200,
      -747907200,
      -728541000,
      -717049800,
      -697091400,
      -683785800,
      -668061000,
      -654755400,
      -636611400,
      -623305800,
      -605161800,
      -591856200,
      -573712200,
      -559801800,
      -541657800,
      -528352200,
      -510211800,
      -498112200,
      -478762200,
      -466662600,
      -446707800,
      -435213000,
      -415258200,
      -403158600,
      -383808600,
      -371709000,
      -352359000,
      -340259400,
      -320909400,
      -308809800,
      -288855000,
      -277360200,
      -257405400,
      -245910600,
      -225955800,
      -213856200,
      -194506200,
      -182406600,
      -163056600,
      -148537800,
      -132816600,
      -117088200,
      -101367000,
      -85638600,
      -69312600,
      -53584200,
      -37863000,
      -22134600,
      -6413400,
      9315000,
      25036200,
      40764600,
      56485800,
      72214200,
      88540200,
      104268600,
      119989800,
      126041400,
      151439400,
      167167800,
      182889000,
      198617400,
      214338600,
      295385400,
      309292200,
    ]),
    Int16List.fromList([
      480,
      540,
      510,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
      540,
      480,
    ]),
    60000000,
    [
      'HKT',
      'HKST',
      'HKWT',
      'JST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
      'HKST',
      'HKT',
    ],
    [
      false,
      true,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone hovd = DynamicTimezone(
    'Asia/Hovd',
    DynamicTimezoneSpan(-1, 21996000000, 'LMT', TimezoneSpan.range.min.value, -2032927596, dst: false),
    Int64List.fromList([
      -2032927596,
      252439200,
      417978000,
      433785600,
      449600400,
      465321600,
      481050000,
      496771200,
      512499600,
      528220800,
      543949200,
      559670400,
      575398800,
      591120000,
      606848400,
      622569600,
      638298000,
      654624000,
      670352400,
      686073600,
      701802000,
      717523200,
      733251600,
      748972800,
      764701200,
      780422400,
      796150800,
      811872000,
      828205200,
      843926400,
      859654800,
      875376000,
      891104400,
      906825600,
      988398000,
      1001700000,
      1017428400,
      1033149600,
      1048878000,
      1064599200,
      1080327600,
      1096048800,
      1111777200,
      1127498400,
      1143226800,
      1159552800,
      1427482800,
      1443196800,
      1458932400,
      1474646400,
    ]),
    Int8List.fromList([
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
    ]),
    3600000000,
    [
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone irkutsk = DynamicTimezone(
    'Asia/Irkutsk',
    DynamicTimezoneSpan(-1, 25025000000, 'LMT', TimezoneSpan.range.min.value, -2840165825, dst: false),
    Int64List.fromList([
      -2840165825,
      -1575874625,
      -1247554800,
      354902400,
      370710000,
      386438400,
      402246000,
      417974400,
      433782000,
      449596800,
      465328800,
      481053600,
      496778400,
      512503200,
      528228000,
      543952800,
      559677600,
      575402400,
      591127200,
      606852000,
      622576800,
      638301600,
      654631200,
      670356000,
      686084400,
      695761200,
      701805600,
      717530400,
      733255200,
      748980000,
      764704800,
      780429600,
      796154400,
      811879200,
      828208800,
      846352800,
      859658400,
      877802400,
      891108000,
      909252000,
      922557600,
      941306400,
      954007200,
      972756000,
      985456800,
      1004205600,
      1017511200,
      1035655200,
      1048960800,
      1067104800,
      1080410400,
      1099159200,
      1111860000,
      1130608800,
      1143309600,
      1162058400,
      1174759200,
      1193508000,
      1206813600,
      1224957600,
      1238263200,
      1256407200,
      1269712800,
      1288461600,
      1301162400,
      1414256400,
    ]),
    Int32List.fromList([
      25025,
      25200,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      28800,
      25200,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
    ]),
    1000000,
    [
      'IMT',
      '+07',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+08',
      '+07',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
    ],
    [
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone istanbul = DynamicTimezone(
    'Asia/Istanbul',
    DynamicTimezoneSpan(-1, 6952000000, 'LMT', TimezoneSpan.range.min.value, -2840147752, dst: false),
    Int64List.fromList([
      -2840147752,
      -1869875816,
      -1693706400,
      -1680490800,
      -1570413600,
      -1552186800,
      -1538359200,
      -1522551600,
      -1507514400,
      -1490583600,
      -1440208800,
      -1428030000,
      -1409709600,
      -1396494000,
      -931053600,
      -922676400,
      -917834400,
      -892436400,
      -875844000,
      -764737200,
      -744343200,
      -733806000,
      -716436000,
      -701924400,
      -684986400,
      -670474800,
      -654141600,
      -639025200,
      -622087200,
      -606970800,
      -590032800,
      -575521200,
      -235620000,
      -194842800,
      -177732000,
      -165726000,
      107910000,
      121215600,
      133920000,
      152665200,
      164678400,
      184114800,
      196214400,
      215564400,
      228873600,
      245804400,
      260323200,
      267915600,
      428454000,
      433893600,
      468111600,
      482799600,
      496710000,
      512521200,
      528246000,
      543970800,
      559695600,
      575420400,
      591145200,
      606870000,
      622594800,
      638319600,
      654649200,
      670374000,
      686098800,
      701823600,
      717548400,
      733273200,
      748998000,
      764118000,
      780447600,
      796172400,
      811897200,
      828226800,
      846370800,
      859676400,
      877820400,
      891126000,
      909270000,
      922575600,
      941324400,
      954025200,
      972774000,
      985474800,
      1004223600,
      1017529200,
      1035673200,
      1048978800,
      1067122800,
      1080428400,
      1099177200,
      1111878000,
      1130626800,
      1143327600,
      1162076400,
      1174784400,
      1193533200,
      1206838800,
      1224982800,
      1238288400,
      1256432400,
      1269738000,
      1288486800,
      1301274000,
      1319936400,
      1332637200,
      1351386000,
      1364691600,
      1382835600,
      1396227600,
      1414285200,
      1427590800,
      1446944400,
      1459040400,
      1473195600,
    ]),
    Int32List.fromList([
      7016,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      10800,
      14400,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      10800,
    ]),
    1000000,
    [
      'IMT',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      '+03',
      '+04',
      '+03',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      '+03',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone jakarta = DynamicTimezone(
    'Asia/Jakarta',
    DynamicTimezoneSpan(-1, 25632000000, 'LMT', TimezoneSpan.range.min.value, -3231299232, dst: false),
    Int64List.fromList([
      -3231299232,
      -1451719200,
      -1172906400,
      -876641400,
      -766054800,
      -683883000,
      -620812800,
      -189415800,
    ]),
    Int32List.fromList([25632, 26400, 27000, 32400, 27000, 28800, 27000, 25200]),
    1000000,
    ['BMT', '+0720', '+0730', '+09', '+0730', '+08', '+0730', 'WIB'],
    [false, false, false, false, false, false, false, false],
  );

  static final Timezone jayapura = DynamicTimezone(
    'Asia/Jayapura',
    DynamicTimezoneSpan(-1, 33768000000, 'LMT', TimezoneSpan.range.min.value, -1172913768, dst: false),
    Int64List.fromList([-1172913768, -799491600, -189423000]),
    Int16List.fromList([540, 570, 540]),
    60000000,
    ['+09', '+0930', 'WIT'],
    [false, false, false],
  );

  static final Timezone jerusalem = DynamicTimezone(
    'Asia/Jerusalem',
    DynamicTimezoneSpan(-1, 8454000000, 'LMT', TimezoneSpan.range.min.value, -2840149254, dst: false),
    Int64List.fromList([
      -2840149254,
      -1641003640,
      -933638400,
      -923097600,
      -919036800,
      -857347200,
      -844300800,
      -825811200,
      -812678400,
      -794188800,
      -779846400,
      -762652800,
      -748310400,
      -731116800,
      -681955200,
      -673228800,
      -667958400,
      -652320000,
      -636422400,
      -622080000,
      -608947200,
      -591840000,
      -572486400,
      -558576000,
      -542851200,
      -527731200,
      -514425600,
      -490838400,
      -482976000,
      -459388800,
      -451526400,
      -428544000,
      -418262400,
      -400118400,
      -387417600,
      142380000,
      150843600,
      167176800,
      178664400,
      334101600,
      337730400,
      452642400,
      462319200,
      482277600,
      494370000,
      516751200,
      526424400,
      545436000,
      558478800,
      576626400,
      589323600,
      609890400,
      620773200,
      638316000,
      651618000,
      669765600,
      683672400,
      701820000,
      715726800,
      733701600,
      747176400,
      765151200,
      778021200,
      796600800,
      810075600,
      826840800,
      842821200,
      858895200,
      874184400,
      890344800,
      905029200,
      923011200,
      936313200,
      955670400,
      970783200,
      986770800,
      1001282400,
      1017356400,
      1033941600,
      1048806000,
      1065132000,
      1081292400,
      1095804000,
      1112313600,
      1128812400,
      1143763200,
      1159657200,
      1175212800,
      1189897200,
      1206662400,
      1223161200,
      1238112000,
      1254006000,
      1269561600,
      1284246000,
      1301616000,
      1317510000,
      1333065600,
      1348354800,
      1364515200,
      1382828400,
      1395964800,
      1414278000,
      1427414400,
      1445727600,
      1458864000,
      1477782000,
      1490313600,
      1509231600,
      1521763200,
      1540681200,
      1553817600,
      1572130800,
      1585267200,
      1603580400,
      1616716800,
      1635634800,
      1648166400,
      1667084400,
      1679616000,
      1698534000,
      1711670400,
      1729983600,
      1743120000,
      1761433200,
      1774569600,
      1792882800,
      1806019200,
      1824937200,
      1837468800,
      1856386800,
      1868918400,
      1887836400,
      1900972800,
      1919286000,
      1932422400,
      1950735600,
      1963872000,
      1982790000,
      1995321600,
      2014239600,
      2026771200,
      2045689200,
      2058220800,
      2077138800,
      2090275200,
      2108588400,
      2121724800,
      2140038000,
    ]),
    Int32List.fromList([
      8440,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      14400,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
    ]),
    1000000,
    [
      'JMT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDDT',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone kabul = DynamicTimezone(
    'Asia/Kabul',
    DynamicTimezoneSpan(-1, 16608000000, 'LMT', TimezoneSpan.range.min.value, -2524538208, dst: false),
    Int64List.fromList([-2524538208, -788932800]),
    Int16List.fromList([240, 270]),
    60000000,
    ['+04', '+0430'],
    [false, false],
  );

  static final Timezone kamchatka = DynamicTimezone(
    'Asia/Kamchatka',
    DynamicTimezoneSpan(-1, 38076000000, 'LMT', TimezoneSpan.range.min.value, -1487759676, dst: false),
    Int64List.fromList([
      -1487759676,
      -1247569200,
      354888000,
      370695600,
      386424000,
      402231600,
      417960000,
      433767600,
      449582400,
      465314400,
      481039200,
      496764000,
      512488800,
      528213600,
      543938400,
      559663200,
      575388000,
      591112800,
      606837600,
      622562400,
      638287200,
      654616800,
      670341600,
      686070000,
      695746800,
      701791200,
      717516000,
      733240800,
      748965600,
      764690400,
      780415200,
      796140000,
      811864800,
      828194400,
      846338400,
      859644000,
      877788000,
      891093600,
      909237600,
      922543200,
      941292000,
      953992800,
      972741600,
      985442400,
      1004191200,
      1017496800,
      1035640800,
      1048946400,
      1067090400,
      1080396000,
      1099144800,
      1111845600,
      1130594400,
      1143295200,
      1162044000,
      1174744800,
      1193493600,
      1206799200,
      1224943200,
      1238248800,
      1256392800,
      1269698400,
      1288450800,
      1301151600,
    ]),
    Int8List.fromList([
      11,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      12,
      11,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      13,
      12,
      12,
      11,
      12,
    ]),
    3600000000,
    [
      '+11',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+12',
      '+11',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+13',
      '+12',
      '+12',
      '+11',
      '+12',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
    ],
  );

  static final Timezone karachi = DynamicTimezone(
    'Asia/Karachi',
    DynamicTimezoneSpan(-1, 16092000000, 'LMT', TimezoneSpan.range.min.value, -1988166492, dst: false),
    Int64List.fromList([
      -1988166492,
      -862637400,
      -764145000,
      -576135000,
      38775600,
      1018119600,
      1033840800,
      1212260400,
      1225476000,
      1239735600,
      1257012000,
    ]),
    Int16List.fromList([330, 390, 330, 300, 300, 360, 300, 360, 300, 360, 300]),
    60000000,
    ['+0530', '+0630', '+0530', '+05', 'PKT', 'PKST', 'PKT', 'PKST', 'PKT', 'PKST', 'PKT'],
    [false, true, false, false, false, true, false, true, false, true, false],
  );

  static final Timezone kashgar = DynamicTimezone(
    'Asia/Kashgar',
    DynamicTimezoneSpan(-1, 21020000000, 'LMT', TimezoneSpan.range.min.value, -1325483420, dst: false),
    Int64List.fromList([-1325483420]),
    Int8List.fromList([6]),
    3600000000,
    ['+06'],
    [false],
  );

  static final Timezone kathmandu = DynamicTimezone(
    'Asia/Kathmandu',
    DynamicTimezoneSpan(-1, 20476000000, 'LMT', TimezoneSpan.range.min.value, -1577943676, dst: false),
    Int64List.fromList([-1577943676, 504901800]),
    Int16List.fromList([330, 345]),
    60000000,
    ['+0530', '+0545'],
    [false, false],
  );

  static final Timezone katmandu = DynamicTimezone(
    'Asia/Katmandu',
    DynamicTimezoneSpan(-1, 20476000000, 'LMT', TimezoneSpan.range.min.value, -1577943676, dst: false),
    Int64List.fromList([-1577943676, 504901800]),
    Int16List.fromList([330, 345]),
    60000000,
    ['+0530', '+0545'],
    [false, false],
  );

  static final Timezone khandyga = DynamicTimezone(
    'Asia/Khandyga',
    DynamicTimezoneSpan(-1, 32533000000, 'LMT', TimezoneSpan.range.min.value, -1579424533, dst: false),
    Int64List.fromList([
      -1579424533,
      -1247558400,
      354898800,
      370706400,
      386434800,
      402242400,
      417970800,
      433778400,
      449593200,
      465325200,
      481050000,
      496774800,
      512499600,
      528224400,
      543949200,
      559674000,
      575398800,
      591123600,
      606848400,
      622573200,
      638298000,
      654627600,
      670352400,
      686080800,
      695757600,
      701802000,
      717526800,
      733251600,
      748976400,
      764701200,
      780426000,
      796150800,
      811875600,
      828205200,
      846349200,
      859654800,
      877798800,
      891104400,
      909248400,
      922554000,
      941302800,
      954003600,
      972752400,
      985453200,
      1004202000,
      1017507600,
      1035651600,
      1048957200,
      1067101200,
      1072882800,
      1080403200,
      1099152000,
      1111852800,
      1130601600,
      1143302400,
      1162051200,
      1174752000,
      1193500800,
      1206806400,
      1224950400,
      1238256000,
      1256400000,
      1269705600,
      1288454400,
      1301155200,
      1315832400,
      1414252800,
    ]),
    Int8List.fromList([
      8,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      9,
      8,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      9,
    ]),
    3600000000,
    [
      '+08',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+09',
      '+08',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+09',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      false,
    ],
  );

  static final Timezone kolkata = DynamicTimezone(
    'Asia/Kolkata',
    DynamicTimezoneSpan(-1, 21208000000, 'LMT', TimezoneSpan.range.min.value, -3645237208, dst: false),
    Int64List.fromList([-3645237208, -3155694800, -2019705670, -891581400, -872058600, -862637400, -764145000]),
    Int32List.fromList([21200, 19270, 19800, 23400, 19800, 23400, 19800]),
    1000000,
    ['HMT', 'MMT', 'IST', '+0630', 'IST', '+0630', 'IST'],
    [false, false, false, true, false, true, false],
  );

  static final Timezone krasnoyarsk = DynamicTimezone(
    'Asia/Krasnoyarsk',
    DynamicTimezoneSpan(-1, 22286000000, 'LMT', TimezoneSpan.range.min.value, -1577513486, dst: false),
    Int64List.fromList([
      -1577513486,
      -1247551200,
      354906000,
      370713600,
      386442000,
      402249600,
      417978000,
      433785600,
      449600400,
      465332400,
      481057200,
      496782000,
      512506800,
      528231600,
      543956400,
      559681200,
      575406000,
      591130800,
      606855600,
      622580400,
      638305200,
      654634800,
      670359600,
      686088000,
      695764800,
      701809200,
      717534000,
      733258800,
      748983600,
      764708400,
      780433200,
      796158000,
      811882800,
      828212400,
      846356400,
      859662000,
      877806000,
      891111600,
      909255600,
      922561200,
      941310000,
      954010800,
      972759600,
      985460400,
      1004209200,
      1017514800,
      1035658800,
      1048964400,
      1067108400,
      1080414000,
      1099162800,
      1111863600,
      1130612400,
      1143313200,
      1162062000,
      1174762800,
      1193511600,
      1206817200,
      1224961200,
      1238266800,
      1256410800,
      1269716400,
      1288465200,
      1301166000,
      1414260000,
    ]),
    Int8List.fromList([
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      7,
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
    ]),
    3600000000,
    [
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+07',
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone kualaLumpur = DynamicTimezone(
    'Asia/Kuala_Lumpur',
    DynamicTimezoneSpan(-1, 24925000000, 'LMT', TimezoneSpan.range.min.value, -2177477725, dst: false),
    Int64List.fromList([
      -2177477725,
      -2038200925,
      -1167634800,
      -1073028000,
      -894180000,
      -879665400,
      -767005200,
      378662400,
    ]),
    Int32List.fromList([24925, 25200, 26400, 26400, 27000, 32400, 27000, 28800]),
    1000000,
    ['SMT', '+07', '+0720', '+0720', '+0730', '+09', '+0730', '+08'],
    [false, false, true, false, false, false, false, false],
  );

  static final Timezone kuching = DynamicTimezone(
    'Asia/Kuching',
    DynamicTimezoneSpan(-1, 26480000000, 'LMT', TimezoneSpan.range.min.value, -1383463280, dst: false),
    Int64List.fromList([
      -1383463280,
      -1167636600,
      -1082448000,
      -1074586800,
      -1050825600,
      -1042964400,
      -1019289600,
      -1011428400,
      -987753600,
      -979892400,
      -956217600,
      -948356400,
      -924595200,
      -916734000,
      -893059200,
      -885198000,
      -879667200,
      -767005200,
    ]),
    Int16List.fromList([450, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 500, 480, 540, 480]),
    60000000,
    [
      '+0730',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+0820',
      '+08',
      '+09',
      '+08',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone kuwait = DynamicTimezone(
    'Asia/Kuwait',
    DynamicTimezoneSpan(-1, 11212000000, 'LMT', TimezoneSpan.range.min.value, -719636812, dst: false),
    Int64List.fromList([-719636812]),
    Int8List.fromList([3]),
    3600000000,
    ['+03'],
    [false],
  );

  static final Timezone macao = DynamicTimezone(
    'Asia/Macao',
    DynamicTimezoneSpan(-1, 27250000000, 'LMT', TimezoneSpan.range.min.value, -2056692850, dst: false),
    Int64List.fromList([
      -2056692850,
      -884509200,
      -873280800,
      -855918000,
      -841744800,
      -828529200,
      -765363600,
      -747046800,
      -733827600,
      -716461200,
      -697021200,
      -683715600,
      -667990800,
      -654771600,
      -636627600,
      -623322000,
      -605178000,
      -591872400,
      -573642000,
      -559818000,
      -541674000,
      -528368400,
      -510224400,
      -498128400,
      -478774800,
      -466678800,
      -446720400,
      -435229200,
      -415258200,
      -403158600,
      -383808600,
      -371709000,
      -352359000,
      -340259400,
      -320909400,
      -308809800,
      -288855000,
      -277360200,
      -257405400,
      -245910600,
      -225955800,
      -213856200,
      -194506200,
      -182406600,
      -163056600,
      -148537800,
      -132820200,
      -117088200,
      -101370600,
      -85638600,
      -69312600,
      -53584200,
      -37863000,
      -22134600,
      -6413400,
      9315000,
      25036200,
      40764600,
      56485800,
      72214200,
      88540200,
      104268600,
      119989800,
      126041400,
      151439400,
      167167800,
      182889000,
      198617400,
      214338600,
      295385400,
      309292200,
    ]),
    Int8List.fromList([
      8,
      9,
      10,
      9,
      10,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
    ]),
    3600000000,
    [
      'CST',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone macau = DynamicTimezone(
    'Asia/Macau',
    DynamicTimezoneSpan(-1, 27250000000, 'LMT', TimezoneSpan.range.min.value, -2056692850, dst: false),
    Int64List.fromList([
      -2056692850,
      -884509200,
      -873280800,
      -855918000,
      -841744800,
      -828529200,
      -765363600,
      -747046800,
      -733827600,
      -716461200,
      -697021200,
      -683715600,
      -667990800,
      -654771600,
      -636627600,
      -623322000,
      -605178000,
      -591872400,
      -573642000,
      -559818000,
      -541674000,
      -528368400,
      -510224400,
      -498128400,
      -478774800,
      -466678800,
      -446720400,
      -435229200,
      -415258200,
      -403158600,
      -383808600,
      -371709000,
      -352359000,
      -340259400,
      -320909400,
      -308809800,
      -288855000,
      -277360200,
      -257405400,
      -245910600,
      -225955800,
      -213856200,
      -194506200,
      -182406600,
      -163056600,
      -148537800,
      -132820200,
      -117088200,
      -101370600,
      -85638600,
      -69312600,
      -53584200,
      -37863000,
      -22134600,
      -6413400,
      9315000,
      25036200,
      40764600,
      56485800,
      72214200,
      88540200,
      104268600,
      119989800,
      126041400,
      151439400,
      167167800,
      182889000,
      198617400,
      214338600,
      295385400,
      309292200,
    ]),
    Int8List.fromList([
      8,
      9,
      10,
      9,
      10,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
    ]),
    3600000000,
    [
      'CST',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone magadan = DynamicTimezone(
    'Asia/Magadan',
    DynamicTimezoneSpan(-1, 36192000000, 'LMT', TimezoneSpan.range.min.value, -1441188192, dst: false),
    Int64List.fromList([
      -1441188192,
      -1247565600,
      354891600,
      370699200,
      386427600,
      402235200,
      417963600,
      433771200,
      449586000,
      465318000,
      481042800,
      496767600,
      512492400,
      528217200,
      543942000,
      559666800,
      575391600,
      591116400,
      606841200,
      622566000,
      638290800,
      654620400,
      670345200,
      686073600,
      695750400,
      701794800,
      717519600,
      733244400,
      748969200,
      764694000,
      780418800,
      796143600,
      811868400,
      828198000,
      846342000,
      859647600,
      877791600,
      891097200,
      909241200,
      922546800,
      941295600,
      953996400,
      972745200,
      985446000,
      1004194800,
      1017500400,
      1035644400,
      1048950000,
      1067094000,
      1080399600,
      1099148400,
      1111849200,
      1130598000,
      1143298800,
      1162047600,
      1174748400,
      1193497200,
      1206802800,
      1224946800,
      1238252400,
      1256396400,
      1269702000,
      1288450800,
      1301151600,
      1414245600,
      1461427200,
    ]),
    Int8List.fromList([
      10,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      11,
      10,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      10,
      11,
    ]),
    3600000000,
    [
      '+10',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+11',
      '+10',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+10',
      '+11',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      false,
    ],
  );

  static final Timezone makassar = DynamicTimezone(
    'Asia/Makassar',
    DynamicTimezoneSpan(-1, 28656000000, 'LMT', TimezoneSpan.range.min.value, -1577951856, dst: false),
    Int64List.fromList([-1577951856, -1172908656, -880272000, -766054800]),
    Int32List.fromList([28656, 28800, 32400, 28800]),
    1000000,
    ['MMT', '+08', '+09', 'WITA'],
    [false, false, false, false],
  );

  static final Timezone manila = DynamicTimezone(
    'Asia/Manila',
    DynamicTimezoneSpan(-1, -57368000000, 'LMT', TimezoneSpan.range.min.value, -3944621032, dst: false),
    Int64List.fromList([
      -3944621032,
      -2219083200,
      -1046678400,
      -1040115600,
      -885024000,
      -880016400,
      -783594000,
      -760093200,
      -496224000,
      -491562000,
      228326400,
      243702000,
      643219200,
      649177200,
    ]),
    Int32List.fromList([
      29032,
      28800,
      32400,
      28800,
      32400,
      32400,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
      32400,
      28800,
    ]),
    1000000,
    ['LMT', 'PST', 'PDT', 'PST', 'PDT', 'JST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST'],
    [false, false, true, false, true, false, true, false, true, false, true, false, true, false],
  );

  static final Timezone muscat = DynamicTimezone(
    'Asia/Muscat',
    DynamicTimezoneSpan(-1, 13272000000, 'LMT', TimezoneSpan.range.min.value, -1577936472, dst: false),
    Int64List.fromList([-1577936472]),
    Int8List.fromList([4]),
    3600000000,
    ['+04'],
    [false],
  );

  static final Timezone nicosia = DynamicTimezone(
    'Asia/Nicosia',
    DynamicTimezoneSpan(-1, 8008000000, 'LMT', TimezoneSpan.range.min.value, -1518920008, dst: false),
    Int64List.fromList([
      -1518920008,
      166572000,
      182293200,
      200959200,
      213829200,
      228866400,
      243982800,
      260316000,
      276123600,
      291765600,
      307486800,
      323820000,
      338936400,
      354664800,
      370386000,
      386114400,
      401835600,
      417564000,
      433285200,
      449013600,
      465339600,
      481068000,
      496789200,
      512517600,
      528238800,
      543967200,
      559688400,
      575416800,
      591138000,
      606866400,
      622587600,
      638316000,
      654642000,
      670370400,
      686091600,
      701820000,
      717541200,
      733269600,
      748990800,
      764719200,
      780440400,
      796168800,
      811890000,
      828223200,
      843944400,
      859672800,
      875394000,
      891122400,
      909277200,
      922582800,
      941331600,
      954032400,
      972781200,
      985482000,
      1004230800,
      1017536400,
      1035680400,
      1048986000,
      1067130000,
      1080435600,
      1099184400,
      1111885200,
      1130634000,
      1143334800,
      1162083600,
      1174784400,
      1193533200,
      1206838800,
      1224982800,
      1238288400,
      1256432400,
      1269738000,
      1288486800,
      1301187600,
      1319936400,
      1332637200,
      1351386000,
      1364691600,
      1382835600,
      1396141200,
      1414285200,
      1427590800,
      1445734800,
      1459040400,
      1477789200,
      1490490000,
      1509238800,
      1521939600,
      1540688400,
      1553994000,
      1572138000,
      1585443600,
      1603587600,
      1616893200,
      1635642000,
      1648342800,
      1667091600,
      1679792400,
      1698541200,
      1711846800,
      1729990800,
      1743296400,
      1761440400,
      1774746000,
      1792890000,
      1806195600,
      1824944400,
      1837645200,
      1856394000,
      1869094800,
      1887843600,
      1901149200,
      1919293200,
      1932598800,
      1950742800,
      1964048400,
      1982797200,
      1995498000,
      2014246800,
      2026947600,
      2045696400,
      2058397200,
      2077146000,
      2090451600,
      2108595600,
      2121901200,
      2140045200,
    ]),
    Int8List.fromList([
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
      3,
      2,
    ]),
    3600000000,
    [
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
      'EEST',
      'EET',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone novokuznetsk = DynamicTimezone(
    'Asia/Novokuznetsk',
    DynamicTimezoneSpan(-1, 20928000000, 'LMT', TimezoneSpan.range.min.value, -1441259328, dst: false),
    Int64List.fromList([
      -1441259328,
      -1247551200,
      354906000,
      370713600,
      386442000,
      402249600,
      417978000,
      433785600,
      449600400,
      465332400,
      481057200,
      496782000,
      512506800,
      528231600,
      543956400,
      559681200,
      575406000,
      591130800,
      606855600,
      622580400,
      638305200,
      654634800,
      670359600,
      686088000,
      695764800,
      701809200,
      717534000,
      733258800,
      748983600,
      764708400,
      780433200,
      796158000,
      811882800,
      828212400,
      846356400,
      859662000,
      877806000,
      891111600,
      909255600,
      922561200,
      941310000,
      954010800,
      972759600,
      985460400,
      1004209200,
      1017514800,
      1035658800,
      1048964400,
      1067108400,
      1080414000,
      1099162800,
      1111863600,
      1130612400,
      1143313200,
      1162062000,
      1174762800,
      1193511600,
      1206817200,
      1224961200,
      1238266800,
      1256410800,
      1269716400,
      1288468800,
      1301169600,
    ]),
    Int8List.fromList([
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      7,
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      7,
      6,
      7,
    ]),
    3600000000,
    [
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+07',
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+07',
      '+06',
      '+07',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
    ],
  );

  static final Timezone novosibirsk = DynamicTimezone(
    'Asia/Novosibirsk',
    DynamicTimezoneSpan(-1, 19900000000, 'LMT', TimezoneSpan.range.min.value, -1579476700, dst: false),
    Int64List.fromList([
      -1579476700,
      -1247551200,
      354906000,
      370713600,
      386442000,
      402249600,
      417978000,
      433785600,
      449600400,
      465332400,
      481057200,
      496782000,
      512506800,
      528231600,
      543956400,
      559681200,
      575406000,
      591130800,
      606855600,
      622580400,
      638305200,
      654634800,
      670359600,
      686088000,
      695764800,
      701809200,
      717534000,
      733258800,
      738086400,
      748987200,
      764712000,
      780436800,
      796161600,
      811886400,
      828216000,
      846360000,
      859665600,
      877809600,
      891115200,
      909259200,
      922564800,
      941313600,
      954014400,
      972763200,
      985464000,
      1004212800,
      1017518400,
      1035662400,
      1048968000,
      1067112000,
      1080417600,
      1099166400,
      1111867200,
      1130616000,
      1143316800,
      1162065600,
      1174766400,
      1193515200,
      1206820800,
      1224964800,
      1238270400,
      1256414400,
      1269720000,
      1288468800,
      1301169600,
      1414263600,
      1469304000,
    ]),
    Int8List.fromList([
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      7,
      6,
      7,
      8,
      7,
      8,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
    ]),
    3600000000,
    [
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+07',
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      false,
    ],
  );

  static final Timezone omsk = DynamicTimezone(
    'Asia/Omsk',
    DynamicTimezoneSpan(-1, 17610000000, 'LMT', TimezoneSpan.range.min.value, -1582088010, dst: false),
    Int64List.fromList([
      -1582088010,
      -1247547600,
      354909600,
      370717200,
      386445600,
      402253200,
      417981600,
      433789200,
      449604000,
      465336000,
      481060800,
      496785600,
      512510400,
      528235200,
      543960000,
      559684800,
      575409600,
      591134400,
      606859200,
      622584000,
      638308800,
      654638400,
      670363200,
      686091600,
      695768400,
      701812800,
      717537600,
      733262400,
      748987200,
      764712000,
      780436800,
      796161600,
      811886400,
      828216000,
      846360000,
      859665600,
      877809600,
      891115200,
      909259200,
      922564800,
      941313600,
      954014400,
      972763200,
      985464000,
      1004212800,
      1017518400,
      1035662400,
      1048968000,
      1067112000,
      1080417600,
      1099166400,
      1111867200,
      1130616000,
      1143316800,
      1162065600,
      1174766400,
      1193515200,
      1206820800,
      1224964800,
      1238270400,
      1256414400,
      1269720000,
      1288468800,
      1301169600,
      1414263600,
    ]),
    Int8List.fromList([
      5,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      6,
      5,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
    ]),
    3600000000,
    [
      '+05',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+06',
      '+05',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone oral = DynamicTimezone(
    'Asia/Oral',
    DynamicTimezoneSpan(-1, 12324000000, 'LMT', TimezoneSpan.range.min.value, -1441164324, dst: false),
    Int64List.fromList([
      -1441164324,
      -1247540400,
      354913200,
      370720800,
      386445600,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622591200,
      638316000,
      654645600,
      670370400,
      686095200,
      695772000,
      701816400,
      717544800,
      733269600,
      748994400,
      764719200,
      780444000,
      796168800,
      811893600,
      828223200,
      846367200,
      859672800,
      877816800,
      891122400,
      909266400,
      922572000,
      941320800,
      954021600,
      972770400,
      985471200,
      1004220000,
      1017525600,
      1035669600,
      1048975200,
      1067119200,
      1080424800,
      1099173600,
    ]),
    Int8List.fromList([
      3,
      5,
      6,
      6,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      5,
    ]),
    3600000000,
    [
      '+03',
      '+05',
      '+06',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone phnomPenh = DynamicTimezone(
    'Asia/Phnom_Penh',
    DynamicTimezoneSpan(-1, 24124000000, 'LMT', TimezoneSpan.range.min.value, -2840164924, dst: false),
    Int64List.fromList([-2840164924, -1570084924]),
    Int32List.fromList([24124, 25200]),
    1000000,
    ['BMT', '+07'],
    [false, false],
  );

  static final Timezone pontianak = DynamicTimezone(
    'Asia/Pontianak',
    DynamicTimezoneSpan(-1, 26240000000, 'LMT', TimezoneSpan.range.min.value, -1946186240, dst: false),
    Int64List.fromList([
      -1946186240,
      -1172906240,
      -881220600,
      -766054800,
      -683883000,
      -620812800,
      -189415800,
      567964800,
    ]),
    Int32List.fromList([26240, 27000, 32400, 27000, 28800, 27000, 28800, 25200]),
    1000000,
    ['PMT', '+0730', '+09', '+0730', '+08', '+0730', 'WITA', 'WIB'],
    [false, false, false, false, false, false, false, false],
  );

  static final Timezone pyongyang = DynamicTimezone(
    'Asia/Pyongyang',
    DynamicTimezoneSpan(-1, 30180000000, 'LMT', TimezoneSpan.range.min.value, -1948782180, dst: false),
    Int64List.fromList([-1948782180, -1830414600, -768646800, 1439564400, 1525446000]),
    Int16List.fromList([510, 540, 540, 510, 540]),
    60000000,
    ['KST', 'JST', 'KST', 'KST', 'KST'],
    [false, false, false, false, false],
  );

  static final Timezone qatar = DynamicTimezone(
    'Asia/Qatar',
    DynamicTimezoneSpan(-1, 12368000000, 'LMT', TimezoneSpan.range.min.value, -1577935568, dst: false),
    Int64List.fromList([-1577935568, 76190400]),
    Int8List.fromList([4, 3]),
    3600000000,
    ['+04', '+03'],
    [false, false],
  );

  static final Timezone qostanay = DynamicTimezone(
    'Asia/Qostanay',
    DynamicTimezoneSpan(-1, 15268000000, 'LMT', TimezoneSpan.range.min.value, -1441167268, dst: false),
    Int64List.fromList([
      -1441167268,
      -1247544000,
      354913200,
      370720800,
      386445600,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686095200,
      695772000,
      701816400,
      717541200,
      733266000,
      748990800,
      764715600,
      780440400,
      796165200,
      811890000,
      828219600,
      846363600,
      859669200,
      877813200,
      891118800,
      909262800,
      922568400,
      941317200,
      954018000,
      972766800,
      985467600,
      1004216400,
      1017522000,
      1035666000,
      1048971600,
      1067115600,
      1080421200,
      1099170000,
      1709229600,
    ]),
    Int8List.fromList([
      4,
      5,
      6,
      6,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      5,
      4,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      6,
      5,
    ]),
    3600000000,
    [
      '+04',
      '+05',
      '+06',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+06',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
    ],
  );

  static final Timezone qyzylorda = DynamicTimezone(
    'Asia/Qyzylorda',
    DynamicTimezoneSpan(-1, 15712000000, 'LMT', TimezoneSpan.range.min.value, -1441167712, dst: false),
    Int64List.fromList([
      -1441167712,
      -1247544000,
      354913200,
      370720800,
      386445600,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686095200,
      695768400,
      701812800,
      717541200,
      733266000,
      748990800,
      764715600,
      780440400,
      796165200,
      811890000,
      828219600,
      846363600,
      859669200,
      877813200,
      891118800,
      909262800,
      922568400,
      941317200,
      954018000,
      972766800,
      985467600,
      1004216400,
      1017522000,
      1035666000,
      1048971600,
      1067115600,
      1080421200,
      1099170000,
      1545328800,
    ]),
    Int8List.fromList([
      4,
      5,
      6,
      6,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      5,
      5,
      6,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      5,
      6,
      6,
      5,
    ]),
    3600000000,
    [
      '+04',
      '+05',
      '+06',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+05',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+06',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
    ],
  );

  static final Timezone rangoon = DynamicTimezone(
    'Asia/Rangoon',
    DynamicTimezoneSpan(-1, 23087000000, 'LMT', TimezoneSpan.range.min.value, -2840163887, dst: false),
    Int64List.fromList([-2840163887, -1577946287, -873268200, -778410000]),
    Int32List.fromList([23087, 23400, 32400, 23400]),
    1000000,
    ['RMT', '+0630', '+09', '+0630'],
    [false, false, false, false],
  );

  static final Timezone riyadh = DynamicTimezone(
    'Asia/Riyadh',
    DynamicTimezoneSpan(-1, 11212000000, 'LMT', TimezoneSpan.range.min.value, -719636812, dst: false),
    Int64List.fromList([-719636812]),
    Int8List.fromList([3]),
    3600000000,
    ['+03'],
    [false],
  );

  static final Timezone saigon = DynamicTimezone(
    'Asia/Saigon',
    DynamicTimezoneSpan(-1, 25590000000, 'LMT', TimezoneSpan.range.min.value, -2004073590, dst: false),
    Int64List.fromList([
      -2004073590,
      -1851577590,
      -852105600,
      -782643600,
      -767869200,
      -718095600,
      -457772400,
      -315648000,
      171820800,
    ]),
    Int32List.fromList([25590, 25200, 28800, 32400, 25200, 28800, 25200, 28800, 25200]),
    1000000,
    ['PLMT', '+07', '+08', '+09', '+07', '+08', '+07', '+08', '+07'],
    [false, false, false, false, false, false, false, false, false],
  );

  static final Timezone sakhalin = DynamicTimezone(
    'Asia/Sakhalin',
    DynamicTimezoneSpan(-1, 34248000000, 'LMT', TimezoneSpan.range.min.value, -2031039048, dst: false),
    Int64List.fromList([
      -2031039048,
      -768560400,
      354891600,
      370699200,
      386427600,
      402235200,
      417963600,
      433771200,
      449586000,
      465318000,
      481042800,
      496767600,
      512492400,
      528217200,
      543942000,
      559666800,
      575391600,
      591116400,
      606841200,
      622566000,
      638290800,
      654620400,
      670345200,
      686073600,
      695750400,
      701794800,
      717519600,
      733244400,
      748969200,
      764694000,
      780418800,
      796143600,
      811868400,
      828198000,
      846342000,
      859647600,
      877795200,
      891100800,
      909244800,
      922550400,
      941299200,
      954000000,
      972748800,
      985449600,
      1004198400,
      1017504000,
      1035648000,
      1048953600,
      1067097600,
      1080403200,
      1099152000,
      1111852800,
      1130601600,
      1143302400,
      1162051200,
      1174752000,
      1193500800,
      1206806400,
      1224950400,
      1238256000,
      1256400000,
      1269705600,
      1288454400,
      1301155200,
      1414249200,
      1459008000,
    ]),
    Int8List.fromList([
      9,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      11,
      10,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
    ]),
    3600000000,
    [
      '+09',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+11',
      '+10',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      false,
    ],
  );

  static final Timezone samarkand = DynamicTimezone(
    'Asia/Samarkand',
    DynamicTimezoneSpan(-1, 16073000000, 'LMT', TimezoneSpan.range.min.value, -1441168073, dst: false),
    Int64List.fromList([
      -1441168073,
      -1247544000,
      354913200,
      370720800,
      386445600,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686091600,
    ]),
    Int8List.fromList([4, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5]),
    3600000000,
    [
      '+04',
      '+05',
      '+06',
      '+06',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone seoul = DynamicTimezone(
    'Asia/Seoul',
    DynamicTimezoneSpan(-1, 30472000000, 'LMT', TimezoneSpan.range.min.value, -1948782472, dst: false),
    Int64List.fromList([
      -1948782472,
      -1830414600,
      -767350800,
      -681210000,
      -672228000,
      -654771600,
      -640864800,
      -623408400,
      -609415200,
      -588848400,
      -577965600,
      -498128400,
      -462702600,
      -451733400,
      -429784200,
      -418296600,
      -399544200,
      -387451800,
      -368094600,
      -356002200,
      -336645000,
      -324552600,
      -305195400,
      -293103000,
      -264933000,
      547578000,
      560883600,
      579027600,
      592333200,
    ]),
    Int16List.fromList([
      510,
      540,
      540,
      600,
      540,
      600,
      540,
      600,
      540,
      600,
      540,
      510,
      570,
      510,
      570,
      510,
      570,
      510,
      570,
      510,
      570,
      510,
      570,
      510,
      540,
      600,
      540,
      600,
      540,
    ]),
    60000000,
    [
      'KST',
      'JST',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
      'KST',
      'KDT',
      'KST',
      'KDT',
      'KST',
    ],
    [
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone shanghai = DynamicTimezone(
    'Asia/Shanghai',
    DynamicTimezoneSpan(-1, 29143000000, 'LMT', TimezoneSpan.range.min.value, -2177481943, dst: false),
    Int64List.fromList([
      -2177481943,
      -1600675200,
      -1585904400,
      -933667200,
      -922093200,
      -908870400,
      -888829200,
      -881049600,
      -767869200,
      -745833600,
      -733827600,
      -716889600,
      -699613200,
      -683884800,
      -670669200,
      -652348800,
      -650019600,
      515527200,
      527014800,
      545162400,
      558464400,
      577216800,
      589914000,
      608666400,
      621968400,
      640116000,
      653418000,
      671565600,
      684867600,
    ]),
    Int8List.fromList([8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8]),
    3600000000,
    [
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
    ],
    [
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone singapore = DynamicTimezone(
    'Asia/Singapore',
    DynamicTimezoneSpan(-1, 24925000000, 'LMT', TimezoneSpan.range.min.value, -2177477725, dst: false),
    Int64List.fromList([
      -2177477725,
      -2038200925,
      -1167634800,
      -1073028000,
      -894180000,
      -879665400,
      -767005200,
      378662400,
    ]),
    Int32List.fromList([24925, 25200, 26400, 26400, 27000, 32400, 27000, 28800]),
    1000000,
    ['SMT', '+07', '+0720', '+0720', '+0730', '+09', '+0730', '+08'],
    [false, false, true, false, false, false, false, false],
  );

  static final Timezone srednekolymsk = DynamicTimezone(
    'Asia/Srednekolymsk',
    DynamicTimezoneSpan(-1, 36892000000, 'LMT', TimezoneSpan.range.min.value, -1441188892, dst: false),
    Int64List.fromList([
      -1441188892,
      -1247565600,
      354891600,
      370699200,
      386427600,
      402235200,
      417963600,
      433771200,
      449586000,
      465318000,
      481042800,
      496767600,
      512492400,
      528217200,
      543942000,
      559666800,
      575391600,
      591116400,
      606841200,
      622566000,
      638290800,
      654620400,
      670345200,
      686073600,
      695750400,
      701794800,
      717519600,
      733244400,
      748969200,
      764694000,
      780418800,
      796143600,
      811868400,
      828198000,
      846342000,
      859647600,
      877791600,
      891097200,
      909241200,
      922546800,
      941295600,
      953996400,
      972745200,
      985446000,
      1004194800,
      1017500400,
      1035644400,
      1048950000,
      1067094000,
      1080399600,
      1099148400,
      1111849200,
      1130598000,
      1143298800,
      1162047600,
      1174748400,
      1193497200,
      1206802800,
      1224946800,
      1238252400,
      1256396400,
      1269702000,
      1288450800,
      1301151600,
      1414245600,
    ]),
    Int8List.fromList([
      10,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      11,
      10,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
    ]),
    3600000000,
    [
      '+10',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+11',
      '+10',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone taipei = DynamicTimezone(
    'Asia/Taipei',
    DynamicTimezoneSpan(-1, 29160000000, 'LMT', TimezoneSpan.range.min.value, -2335248360, dst: false),
    Int64List.fromList([
      -2335248360,
      -1017820800,
      -766224000,
      -745833600,
      -733827600,
      -716889600,
      -699613200,
      -683884800,
      -670669200,
      -652348800,
      -639133200,
      -620812800,
      -607597200,
      -589276800,
      -576061200,
      -562924800,
      -541760400,
      -528710400,
      -510224400,
      -497174400,
      -478688400,
      -465638400,
      -449830800,
      -434016000,
      -418208400,
      -402480000,
      -386672400,
      -370944000,
      -355136400,
      -339408000,
      -323600400,
      -302515200,
      -291978000,
      -270979200,
      -260442000,
      133977600,
      149785200,
      165513600,
      181321200,
      299606400,
      307551600,
    ]),
    Int8List.fromList([
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
    ]),
    3600000000,
    [
      'CST',
      'JST',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
      'CDT',
      'CST',
    ],
    [
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone tashkent = DynamicTimezone(
    'Asia/Tashkent',
    DynamicTimezoneSpan(-1, 16631000000, 'LMT', TimezoneSpan.range.min.value, -1441168631, dst: false),
    Int64List.fromList([
      -1441168631,
      -1247547600,
      354909600,
      370717200,
      386445600,
      402253200,
      417981600,
      433789200,
      449604000,
      465336000,
      481060800,
      496785600,
      512510400,
      528235200,
      543960000,
      559684800,
      575409600,
      591134400,
      606859200,
      622584000,
      638308800,
      654638400,
      670363200,
      686091600,
    ]),
    Int8List.fromList([5, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 6, 5]),
    3600000000,
    [
      '+05',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+06',
      '+05',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone tbilisi = DynamicTimezone(
    'Asia/Tbilisi',
    DynamicTimezoneSpan(-1, 10751000000, 'LMT', TimezoneSpan.range.min.value, -2840151551, dst: false),
    Int64List.fromList([
      -2840151551,
      -1441162751,
      -405140400,
      354916800,
      370724400,
      386452800,
      402260400,
      417988800,
      433796400,
      449611200,
      465343200,
      481068000,
      496792800,
      512517600,
      528242400,
      543967200,
      559692000,
      575416800,
      591141600,
      606866400,
      622591200,
      638316000,
      654645600,
      670370400,
      686098800,
      701816400,
      717537600,
      733266000,
      748987200,
      764715600,
      780436800,
      796161600,
      811882800,
      828216000,
      859662000,
      877806000,
      891115200,
      909255600,
      922564800,
      941310000,
      954014400,
      972759600,
      985464000,
      1004209200,
      1017518400,
      1035658800,
      1048968000,
      1067108400,
      1080417600,
      1088276400,
      1099177200,
      1111878000,
    ]),
    Int32List.fromList([
      10751,
      10800,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      14400,
      10800,
      14400,
      10800,
      14400,
      10800,
      14400,
      14400,
      18000,
      14400,
      18000,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      18000,
      14400,
      10800,
      14400,
    ]),
    1000000,
    [
      'TBMT',
      '+03',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+04',
      '+05',
      '+04',
      '+05',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+03',
      '+04',
    ],
    [
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      true,
      false,
      false,
    ],
  );

  static final Timezone tehran = DynamicTimezone(
    'Asia/Tehran',
    DynamicTimezoneSpan(-1, 12344000000, 'LMT', TimezoneSpan.range.min.value, -1704165944, dst: false),
    Int64List.fromList([
      -1704165944,
      -1090466744,
      227820600,
      246223800,
      259617600,
      271108800,
      283982400,
      296598600,
      306531000,
      322432200,
      338499000,
      673216200,
      685481400,
      701209800,
      717103800,
      732745800,
      748639800,
      764281800,
      780175800,
      795817800,
      811711800,
      827353800,
      843247800,
      858976200,
      874870200,
      890512200,
      906406200,
      922048200,
      937942200,
      953584200,
      969478200,
      985206600,
      1001100600,
      1016742600,
      1032636600,
      1048278600,
      1064172600,
      1079814600,
      1095708600,
      1111437000,
      1127331000,
      1206045000,
      1221939000,
      1237667400,
      1253561400,
      1269203400,
      1285097400,
      1300739400,
      1316633400,
      1332275400,
      1348169400,
      1363897800,
      1379791800,
      1395433800,
      1411327800,
      1426969800,
      1442863800,
      1458505800,
      1474399800,
      1490128200,
      1506022200,
      1521664200,
      1537558200,
      1553200200,
      1569094200,
      1584736200,
      1600630200,
      1616358600,
      1632252600,
      1647894600,
      1663788600,
    ]),
    Int32List.fromList([
      12344,
      12600,
      16200,
      14400,
      18000,
      14400,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
      16200,
      12600,
    ]),
    1000000,
    [
      'TMT',
      '+0330',
      '+0430',
      '+04',
      '+05',
      '+04',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
      '+0430',
      '+0330',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone telAviv = DynamicTimezone(
    'Asia/Tel_Aviv',
    DynamicTimezoneSpan(-1, 8454000000, 'LMT', TimezoneSpan.range.min.value, -2840149254, dst: false),
    Int64List.fromList([
      -2840149254,
      -1641003640,
      -933638400,
      -923097600,
      -919036800,
      -857347200,
      -844300800,
      -825811200,
      -812678400,
      -794188800,
      -779846400,
      -762652800,
      -748310400,
      -731116800,
      -681955200,
      -673228800,
      -667958400,
      -652320000,
      -636422400,
      -622080000,
      -608947200,
      -591840000,
      -572486400,
      -558576000,
      -542851200,
      -527731200,
      -514425600,
      -490838400,
      -482976000,
      -459388800,
      -451526400,
      -428544000,
      -418262400,
      -400118400,
      -387417600,
      142380000,
      150843600,
      167176800,
      178664400,
      334101600,
      337730400,
      452642400,
      462319200,
      482277600,
      494370000,
      516751200,
      526424400,
      545436000,
      558478800,
      576626400,
      589323600,
      609890400,
      620773200,
      638316000,
      651618000,
      669765600,
      683672400,
      701820000,
      715726800,
      733701600,
      747176400,
      765151200,
      778021200,
      796600800,
      810075600,
      826840800,
      842821200,
      858895200,
      874184400,
      890344800,
      905029200,
      923011200,
      936313200,
      955670400,
      970783200,
      986770800,
      1001282400,
      1017356400,
      1033941600,
      1048806000,
      1065132000,
      1081292400,
      1095804000,
      1112313600,
      1128812400,
      1143763200,
      1159657200,
      1175212800,
      1189897200,
      1206662400,
      1223161200,
      1238112000,
      1254006000,
      1269561600,
      1284246000,
      1301616000,
      1317510000,
      1333065600,
      1348354800,
      1364515200,
      1382828400,
      1395964800,
      1414278000,
      1427414400,
      1445727600,
      1458864000,
      1477782000,
      1490313600,
      1509231600,
      1521763200,
      1540681200,
      1553817600,
      1572130800,
      1585267200,
      1603580400,
      1616716800,
      1635634800,
      1648166400,
      1667084400,
      1679616000,
      1698534000,
      1711670400,
      1729983600,
      1743120000,
      1761433200,
      1774569600,
      1792882800,
      1806019200,
      1824937200,
      1837468800,
      1856386800,
      1868918400,
      1887836400,
      1900972800,
      1919286000,
      1932422400,
      1950735600,
      1963872000,
      1982790000,
      1995321600,
      2014239600,
      2026771200,
      2045689200,
      2058220800,
      2077138800,
      2090275200,
      2108588400,
      2121724800,
      2140038000,
    ]),
    Int32List.fromList([
      8440,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      14400,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
      10800,
      7200,
    ]),
    1000000,
    [
      'JMT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDDT',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
      'IDT',
      'IST',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone thimbu = DynamicTimezone(
    'Asia/Thimbu',
    DynamicTimezoneSpan(-1, 21516000000, 'LMT', TimezoneSpan.range.min.value, -706341516, dst: false),
    Int64List.fromList([-706341516, 560025000]),
    Int16List.fromList([330, 360]),
    60000000,
    ['+0530', '+06'],
    [false, false],
  );

  static final Timezone thimphu = DynamicTimezone(
    'Asia/Thimphu',
    DynamicTimezoneSpan(-1, 21516000000, 'LMT', TimezoneSpan.range.min.value, -706341516, dst: false),
    Int64List.fromList([-706341516, 560025000]),
    Int16List.fromList([330, 360]),
    60000000,
    ['+0530', '+06'],
    [false, false],
  );

  static final Timezone tokyo = DynamicTimezone(
    'Asia/Tokyo',
    DynamicTimezoneSpan(-1, 33539000000, 'LMT', TimezoneSpan.range.min.value, -2587712400, dst: false),
    Int64List.fromList([
      -2587712400,
      -683802000,
      -672310800,
      -654771600,
      -640861200,
      -620298000,
      -609411600,
      -588848400,
      -577962000,
    ]),
    Int8List.fromList([9, 10, 9, 10, 9, 10, 9, 10, 9]),
    3600000000,
    ['JST', 'JDT', 'JST', 'JDT', 'JST', 'JDT', 'JST', 'JDT', 'JST'],
    [false, true, false, true, false, true, false, true, false],
  );

  static final Timezone tomsk = DynamicTimezone(
    'Asia/Tomsk',
    DynamicTimezoneSpan(-1, 20391000000, 'LMT', TimezoneSpan.range.min.value, -1578807591, dst: false),
    Int64List.fromList([
      -1578807591,
      -1247551200,
      354906000,
      370713600,
      386442000,
      402249600,
      417978000,
      433785600,
      449600400,
      465332400,
      481057200,
      496782000,
      512506800,
      528231600,
      543956400,
      559681200,
      575406000,
      591130800,
      606855600,
      622580400,
      638305200,
      654634800,
      670359600,
      686088000,
      695764800,
      701809200,
      717534000,
      733258800,
      748983600,
      764708400,
      780433200,
      796158000,
      811882800,
      828212400,
      846356400,
      859662000,
      877806000,
      891111600,
      909255600,
      922561200,
      941310000,
      954010800,
      972759600,
      985460400,
      1004209200,
      1017514800,
      1020193200,
      1035662400,
      1048968000,
      1067112000,
      1080417600,
      1099166400,
      1111867200,
      1130616000,
      1143316800,
      1162065600,
      1174766400,
      1193515200,
      1206820800,
      1224964800,
      1238270400,
      1256414400,
      1269720000,
      1288468800,
      1301169600,
      1414263600,
      1464465600,
    ]),
    Int8List.fromList([
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      7,
      6,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      8,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
      6,
      7,
    ]),
    3600000000,
    [
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+07',
      '+06',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+08',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
      '+06',
      '+07',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      false,
    ],
  );

  static final Timezone ujungPandang = DynamicTimezone(
    'Asia/Ujung_Pandang',
    DynamicTimezoneSpan(-1, 28656000000, 'LMT', TimezoneSpan.range.min.value, -1577951856, dst: false),
    Int64List.fromList([-1577951856, -1172908656, -880272000, -766054800]),
    Int32List.fromList([28656, 28800, 32400, 28800]),
    1000000,
    ['MMT', '+08', '+09', 'WITA'],
    [false, false, false, false],
  );

  static final Timezone ulaanbaatar = DynamicTimezone(
    'Asia/Ulaanbaatar',
    DynamicTimezoneSpan(-1, 25652000000, 'LMT', TimezoneSpan.range.min.value, -2032931252, dst: false),
    Int64List.fromList([
      -2032931252,
      252435600,
      417974400,
      433782000,
      449596800,
      465318000,
      481046400,
      496767600,
      512496000,
      528217200,
      543945600,
      559666800,
      575395200,
      591116400,
      606844800,
      622566000,
      638294400,
      654620400,
      670348800,
      686070000,
      701798400,
      717519600,
      733248000,
      748969200,
      764697600,
      780418800,
      796147200,
      811868400,
      828201600,
      843922800,
      859651200,
      875372400,
      891100800,
      906822000,
      988394400,
      1001696400,
      1017424800,
      1033146000,
      1048874400,
      1064595600,
      1080324000,
      1096045200,
      1111773600,
      1127494800,
      1143223200,
      1159549200,
      1427479200,
      1443193200,
      1458928800,
      1474642800,
    ]),
    Int8List.fromList([
      7,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
    ]),
    3600000000,
    [
      '+07',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone ulanBator = DynamicTimezone(
    'Asia/Ulan_Bator',
    DynamicTimezoneSpan(-1, 25652000000, 'LMT', TimezoneSpan.range.min.value, -2032931252, dst: false),
    Int64List.fromList([
      -2032931252,
      252435600,
      417974400,
      433782000,
      449596800,
      465318000,
      481046400,
      496767600,
      512496000,
      528217200,
      543945600,
      559666800,
      575395200,
      591116400,
      606844800,
      622566000,
      638294400,
      654620400,
      670348800,
      686070000,
      701798400,
      717519600,
      733248000,
      748969200,
      764697600,
      780418800,
      796147200,
      811868400,
      828201600,
      843922800,
      859651200,
      875372400,
      891100800,
      906822000,
      988394400,
      1001696400,
      1017424800,
      1033146000,
      1048874400,
      1064595600,
      1080324000,
      1096045200,
      1111773600,
      1127494800,
      1143223200,
      1159549200,
      1427479200,
      1443193200,
      1458928800,
      1474642800,
    ]),
    Int8List.fromList([
      7,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
      9,
      8,
    ]),
    3600000000,
    [
      '+07',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
      '+09',
      '+08',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );

  static final Timezone urumqi = DynamicTimezone(
    'Asia/Urumqi',
    DynamicTimezoneSpan(-1, 21020000000, 'LMT', TimezoneSpan.range.min.value, -1325483420, dst: false),
    Int64List.fromList([-1325483420]),
    Int8List.fromList([6]),
    3600000000,
    ['+06'],
    [false],
  );

  static final Timezone ustNera = DynamicTimezone(
    'Asia/Ust-Nera',
    DynamicTimezoneSpan(-1, 34374000000, 'LMT', TimezoneSpan.range.min.value, -1579426374, dst: false),
    Int64List.fromList([
      -1579426374,
      -1247558400,
      354898800,
      370699200,
      386427600,
      402235200,
      417963600,
      433771200,
      449586000,
      465318000,
      481042800,
      496767600,
      512492400,
      528217200,
      543942000,
      559666800,
      575391600,
      591116400,
      606841200,
      622566000,
      638290800,
      654620400,
      670345200,
      686073600,
      695750400,
      701794800,
      717519600,
      733244400,
      748969200,
      764694000,
      780418800,
      796143600,
      811868400,
      828198000,
      846342000,
      859647600,
      877791600,
      891097200,
      909241200,
      922546800,
      941295600,
      953996400,
      972745200,
      985446000,
      1004194800,
      1017500400,
      1035644400,
      1048950000,
      1067094000,
      1080399600,
      1099148400,
      1111849200,
      1130598000,
      1143298800,
      1162047600,
      1174748400,
      1193497200,
      1206802800,
      1224946800,
      1238252400,
      1256396400,
      1269702000,
      1288450800,
      1301151600,
      1315828800,
      1414249200,
    ]),
    Int8List.fromList([
      8,
      9,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      11,
      10,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      12,
      11,
      10,
    ]),
    3600000000,
    [
      '+08',
      '+09',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+11',
      '+10',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+12',
      '+11',
      '+10',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
      false,
    ],
  );

  static final Timezone vientiane = DynamicTimezone(
    'Asia/Vientiane',
    DynamicTimezoneSpan(-1, 24124000000, 'LMT', TimezoneSpan.range.min.value, -2840164924, dst: false),
    Int64List.fromList([-2840164924, -1570084924]),
    Int32List.fromList([24124, 25200]),
    1000000,
    ['BMT', '+07'],
    [false, false],
  );

  static final Timezone vladivostok = DynamicTimezone(
    'Asia/Vladivostok',
    DynamicTimezoneSpan(-1, 31651000000, 'LMT', TimezoneSpan.range.min.value, -1487321251, dst: false),
    Int64List.fromList([
      -1487321251,
      -1247562000,
      354895200,
      370702800,
      386431200,
      402238800,
      417967200,
      433774800,
      449589600,
      465321600,
      481046400,
      496771200,
      512496000,
      528220800,
      543945600,
      559670400,
      575395200,
      591120000,
      606844800,
      622569600,
      638294400,
      654624000,
      670348800,
      686077200,
      695754000,
      701798400,
      717523200,
      733248000,
      748972800,
      764697600,
      780422400,
      796147200,
      811872000,
      828201600,
      846345600,
      859651200,
      877795200,
      891100800,
      909244800,
      922550400,
      941299200,
      954000000,
      972748800,
      985449600,
      1004198400,
      1017504000,
      1035648000,
      1048953600,
      1067097600,
      1080403200,
      1099152000,
      1111852800,
      1130601600,
      1143302400,
      1162051200,
      1174752000,
      1193500800,
      1206806400,
      1224950400,
      1238256000,
      1256400000,
      1269705600,
      1288454400,
      1301155200,
      1414249200,
    ]),
    Int8List.fromList([
      9,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      10,
      9,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
      11,
      10,
    ]),
    3600000000,
    [
      '+09',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+10',
      '+09',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
      '+11',
      '+10',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone yakutsk = DynamicTimezone(
    'Asia/Yakutsk',
    DynamicTimezoneSpan(-1, 31138000000, 'LMT', TimezoneSpan.range.min.value, -1579423138, dst: false),
    Int64List.fromList([
      -1579423138,
      -1247558400,
      354898800,
      370706400,
      386434800,
      402242400,
      417970800,
      433778400,
      449593200,
      465325200,
      481050000,
      496774800,
      512499600,
      528224400,
      543949200,
      559674000,
      575398800,
      591123600,
      606848400,
      622573200,
      638298000,
      654627600,
      670352400,
      686080800,
      695757600,
      701802000,
      717526800,
      733251600,
      748976400,
      764701200,
      780426000,
      796150800,
      811875600,
      828205200,
      846349200,
      859654800,
      877798800,
      891104400,
      909248400,
      922554000,
      941302800,
      954003600,
      972752400,
      985453200,
      1004202000,
      1017507600,
      1035651600,
      1048957200,
      1067101200,
      1080406800,
      1099155600,
      1111856400,
      1130605200,
      1143306000,
      1162054800,
      1174755600,
      1193504400,
      1206810000,
      1224954000,
      1238259600,
      1256403600,
      1269709200,
      1288458000,
      1301158800,
      1414252800,
    ]),
    Int8List.fromList([
      8,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      9,
      8,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
      10,
      9,
    ]),
    3600000000,
    [
      '+08',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+09',
      '+08',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
      '+10',
      '+09',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone yangon = DynamicTimezone(
    'Asia/Yangon',
    DynamicTimezoneSpan(-1, 23087000000, 'LMT', TimezoneSpan.range.min.value, -2840163887, dst: false),
    Int64List.fromList([-2840163887, -1577946287, -873268200, -778410000]),
    Int32List.fromList([23087, 23400, 32400, 23400]),
    1000000,
    ['RMT', '+0630', '+09', '+0630'],
    [false, false, false, false],
  );

  static final Timezone yekaterinburg = DynamicTimezone(
    'Asia/Yekaterinburg',
    DynamicTimezoneSpan(-1, 14553000000, 'LMT', TimezoneSpan.range.min.value, -1688270553, dst: false),
    Int64List.fromList([
      -1688270553,
      -1592610305,
      -1247544000,
      354913200,
      370720800,
      386449200,
      402256800,
      417985200,
      433792800,
      449607600,
      465339600,
      481064400,
      496789200,
      512514000,
      528238800,
      543963600,
      559688400,
      575413200,
      591138000,
      606862800,
      622587600,
      638312400,
      654642000,
      670366800,
      686095200,
      695772000,
      701816400,
      717541200,
      733266000,
      748990800,
      764715600,
      780440400,
      796165200,
      811890000,
      828219600,
      846363600,
      859669200,
      877813200,
      891118800,
      909262800,
      922568400,
      941317200,
      954018000,
      972766800,
      985467600,
      1004216400,
      1017522000,
      1035666000,
      1048971600,
      1067115600,
      1080421200,
      1099170000,
      1111870800,
      1130619600,
      1143320400,
      1162069200,
      1174770000,
      1193518800,
      1206824400,
      1224968400,
      1238274000,
      1256418000,
      1269723600,
      1288472400,
      1301173200,
      1414267200,
    ]),
    Int32List.fromList([
      13505,
      14400,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      18000,
      14400,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
      21600,
      18000,
    ]),
    1000000,
    [
      'PMT',
      '+04',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+05',
      '+04',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
      '+06',
      '+05',
    ],
    [
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      false,
      false,
    ],
  );

  static final Timezone yerevan = DynamicTimezone(
    'Asia/Yerevan',
    DynamicTimezoneSpan(-1, 10680000000, 'LMT', TimezoneSpan.range.min.value, -1441162680, dst: false),
    Int64List.fromList([
      -1441162680,
      -405140400,
      354916800,
      370724400,
      386452800,
      402260400,
      417988800,
      433796400,
      449611200,
      465343200,
      481068000,
      496792800,
      512517600,
      528242400,
      543967200,
      559692000,
      575416800,
      591141600,
      606866400,
      622591200,
      638316000,
      654645600,
      670370400,
      686098800,
      701823600,
      717548400,
      733273200,
      748998000,
      764722800,
      780447600,
      796172400,
      811897200,
      859672800,
      877816800,
      891122400,
      909266400,
      922572000,
      941320800,
      954021600,
      972770400,
      985471200,
      1004220000,
      1017525600,
      1035669600,
      1048975200,
      1067119200,
      1080424800,
      1099173600,
      1111874400,
      1130623200,
      1143324000,
      1162072800,
      1174773600,
      1193522400,
      1206828000,
      1224972000,
      1238277600,
      1256421600,
      1269727200,
      1288476000,
      1301176800,
      1319925600,
    ]),
    Int8List.fromList([
      3,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      4,
      3,
      4,
      3,
      4,
      3,
      4,
      3,
      4,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
      5,
      4,
    ]),
    3600000000,
    [
      '+03',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+03',
      '+04',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
      '+05',
      '+04',
    ],
    [
      false,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ],
  );
}
