// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/main.dart
// **************************************************************************
// 
// ignore_for_file: type=lint

import 'dart:typed_data';

import 'package:sugar/src/time/offset.dart';
import 'package:sugar/src/time/zone/dynamic_timezone_rules.dart';
import 'package:sugar/src/time/zone/fixed_timezone_rules.dart';
import 'package:sugar/src/time/zone/timezone_rules.dart';

extension Pacific on Never {
  static final TimezoneRules apia = DynamicTimezoneRules(
    'Pacific/Apia',
    DynamicTimezone(
      -1,
      45184000,
      'Pacific/Apia',
      'LMT',
      null,
      -2445424384,
      dst: false,
    ),
    Int64List.fromList([ -2445424384, -1861878784, -631110600, 1285498800, 1301752800, 1316872800, 1325239200, 1333202400, 1348927200, 1365256800, 1380376800, 1396706400, 1411826400, 1428156000, 1443276000, 1459605600, 1474725600, 1491055200, 1506175200, 1522504800, 1538229600, 1554559200, 1569679200, 1586008800, 1601128800, 1617458400 ]),
    Int32List.fromList([ -41216000, -41400000, -39600000, -36000000, -39600000, -36000000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000 ]),
    [ 'LMT', '-1130', '-11', '-10', '-11', '-10', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13' ],
    [ false, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules auckland = DynamicTimezoneRules(
    'Pacific/Auckland',
    DynamicTimezone(
      -1,
      41944000,
      'Pacific/Auckland',
      'LMT',
      null,
      -3192435544,
      dst: false,
    ),
    Int64List.fromList([ -3192435544, -1330335000, -1320057000, -1300699800, -1287396000, -1269250200, -1255946400, -1237800600, -1224496800, -1206351000, -1192442400, -1174901400, -1160992800, -1143451800, -1125914400, -1112607000, -1094464800, -1081157400, -1063015200, -1049707800, -1031565600, -1018258200, -1000116000, -986808600, -968061600, -955359000, -936612000, -923304600, -757425600, 152632800, 162309600, 183477600, 194968800, 215532000, 226418400, 246981600, 257868000, 278431200, 289317600, 309880800, 320767200, 341330400, 352216800, 372780000, 384271200, 404834400, 415720800, 436284000, 447170400, 467733600, 478620000, 499183200, 510069600, 530632800, 541519200, 562082400, 573573600, 594136800, 605023200, 623772000, 637682400, 655221600, 669132000, 686671200, 700581600, 718120800, 732636000, 749570400, 764085600, 781020000, 795535200, 812469600, 826984800, 844524000, 858434400, 875973600, 889884000, 907423200, 921938400, 938872800, 953388000, 970322400, 984837600, 1002376800, 1016287200, 1033826400, 1047736800, 1065276000, 1079791200, 1096725600, 1111240800, 1128175200, 1142690400, 1159624800, 1174140000, 1191074400, 1207404000, 1222524000, 1238853600, 1253973600, 1270303200, 1285423200, 1301752800, 1316872800, 1333202400, 1348927200, 1365256800, 1380376800, 1396706400, 1411826400, 1428156000, 1443276000, 1459605600, 1474725600, 1491055200, 1506175200, 1522504800, 1538229600, 1554559200, 1569679200, 1586008800, 1601128800, 1617458400, 1632578400, 1648908000, 1664028000, 1680357600, 1695477600, 1712412000, 1727532000, 1743861600, 1758981600, 1775311200, 1790431200, 1806760800, 1821880800, 1838210400, 1853330400, 1869660000, 1885384800, 1901714400, 1916834400, 1933164000, 1948284000, 1964613600, 1979733600, 1996063200, 2011183200, 2027512800, 2042632800, 2058962400, 2074687200, 2091016800, 2106136800, 2122466400, 2137586400 ]),
    Int32List.fromList([ 41400000, 45000000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000 ]),
    [ 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final TimezoneRules bougainville = DynamicTimezoneRules(
    'Pacific/Bougainville',
    DynamicTimezone(
      -1,
      37336000,
      'Pacific/Bougainville',
      'LMT',
      null,
      -2840178136,
      dst: false,
    ),
    Int64List.fromList([ -2840178136, -2366790512, -868010400, -768906000, 1419696000 ]),
    Int32List.fromList([ 35312000, 36000000, 32400000, 36000000, 39600000 ]),
    [ 'PMMT', '+10', '+09', '+10', '+11' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules chatham = DynamicTimezoneRules(
    'Pacific/Chatham',
    DynamicTimezone(
      -1,
      44028000,
      'Pacific/Chatham',
      'LMT',
      null,
      -3192437628,
      dst: false,
    ),
    Int64List.fromList([ -3192437628, -757426500, 152632800, 162309600, 183477600, 194968800, 215532000, 226418400, 246981600, 257868000, 278431200, 289317600, 309880800, 320767200, 341330400, 352216800, 372780000, 384271200, 404834400, 415720800, 436284000, 447170400, 467733600, 478620000, 499183200, 510069600, 530632800, 541519200, 562082400, 573573600, 594136800, 605023200, 623772000, 637682400, 655221600, 669132000, 686671200, 700581600, 718120800, 732636000, 749570400, 764085600, 781020000, 795535200, 812469600, 826984800, 844524000, 858434400, 875973600, 889884000, 907423200, 921938400, 938872800, 953388000, 970322400, 984837600, 1002376800, 1016287200, 1033826400, 1047736800, 1065276000, 1079791200, 1096725600, 1111240800, 1128175200, 1142690400, 1159624800, 1174140000, 1191074400, 1207404000, 1222524000, 1238853600, 1253973600, 1270303200, 1285423200, 1301752800, 1316872800, 1333202400, 1348927200, 1365256800, 1380376800, 1396706400, 1411826400, 1428156000, 1443276000, 1459605600, 1474725600, 1491055200, 1506175200, 1522504800, 1538229600, 1554559200, 1569679200, 1586008800, 1601128800, 1617458400, 1632578400, 1648908000, 1664028000, 1680357600, 1695477600, 1712412000, 1727532000, 1743861600, 1758981600, 1775311200, 1790431200, 1806760800, 1821880800, 1838210400, 1853330400, 1869660000, 1885384800, 1901714400, 1916834400, 1933164000, 1948284000, 1964613600, 1979733600, 1996063200, 2011183200, 2027512800, 2042632800, 2058962400, 2074687200, 2091016800, 2106136800, 2122466400, 2137586400 ]),
    Int32List.fromList

    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final TimezoneRules chuuk = DynamicTimezoneRules(
    'Pacific/Chuuk',
    DynamicTimezone(
      -1,
      35320000,
      'Pacific/Chuuk',
      'LMT',
      null,
      -2840176120,
      dst: false,
    ),
    Int64List.fromList([ -2840176120, -2366790512 ]),
    Int32List.fromList([ 35312000, 36000000 ]),
    [ 'PMMT', '+10' ],
    [ false, false ],
  );

  static final TimezoneRules easter = DynamicTimezoneRules(
    'Pacific/Easter',
    DynamicTimezone(
      -1,
      -26248000,
      'Pacific/Easter',
      'LMT',
      null,
      -2524495352,
      dst: false,
    ),
    Int64List.fromList([ -2524495352, -1178124152, -36619200, -23922000, -3355200, 7527600, 24465600, 37767600, 55915200, 69217200, 87969600, 100666800, 118209600, 132116400, 150868800, 163566000, 182318400, 195620400, 213768000, 227070000, 245217600, 258519600, 277272000, 289969200, 308721600, 321418800, 340171200, 353473200, 371620800, 384922800, 403070400, 416372400, 434520000, 447822000, 466574400, 479271600, 498024000, 510721200, 529473600, 545194800, 560923200, 574225200, 592372800, 605674800, 624427200, 637124400, 653457600, 668574000, 687326400, 700628400, 718776000, 732078000, 750225600, 763527600, 781675200, 794977200, 813729600, 826426800, 845179200, 859690800, 876628800, 889930800, 906868800, 923194800, 939528000, 952830000, 971582400, 984279600, 1003032000, 1015729200, 1034481600, 1047178800, 1065931200, 1079233200, 1097380800, 1110682800, 1128830400, 1142132400, 1160884800, 1173582000, 1192334400, 1206846000, 1223784000, 1237086000, 1255233600, 1270350000, 1286683200, 1304823600, 1313899200, 1335668400, 1346558400, 1367118000, 1378612800, 1398567600, 1410062400, 1463281200, 1471147200, 1494730800, 1502596800, 1526180400, 1534046400, 1554606000, 1567915200, 1586055600, 1599364800, 1617505200, 1630814400, 1648954800, 1662868800, 1680404400, 1693713600, 1712458800, 1725768000, 1743908400, 1757217600, 1775358000, 1788667200, 1806807600, 1820116800, 1838257200, 1851566400, 1870311600, 1883016000, 1901761200, 1915070400, 1933210800, 1946520000, 1964660400, 1977969600, 1996110000, 2009419200, 2027559600, 2040868800, 2059614000, 2072318400, 2091063600, 2104372800, 2122513200, 2135822400, 2153962800, 2167272000, 2185412400, 2198721600, 2217466800, 2230171200, 2248916400, 2262225600, 2280366000, 2293675200, 2311815600, 2325124800, 2343265200, 2356574400, 2374714800, 2388024000, 2406769200, 2419473600, 2438218800, 2451528000, 2469668400, 2482977600, 2501118000, 2514427200, 2532567600, 2545876800, 2564017200, 2577326400, 2596071600, 2609380800, 2627521200, 2640830400, 2658970800, 2672280000, 2690420400, 2703729600, 2721870000, 2735179200, 2753924400, 2766628800, 2785374000, 2798683200, 2816823600, 2830132800, 2848273200, 2861582400, 2879722800, 2893032000, 2911172400, 2924481600, 2943226800, 2955931200, 2974676400, 2987985600, 3006126000, 3019435200, 3037575600, 3050884800, 3069025200, 3082334400, 3101079600, 3113784000, 3132529200, 3145838400, 3163978800, 3177288000, 3195428400, 3208737600, 3226878000, 3240187200, 3258327600, 3271636800, 3290382000, 3303086400, 3321831600, 3335140800, 3353281200, 3366590400, 3384730800, 3398040000, 3416180400, 3429489600, 3447630000, 3460939200, 3479684400, 3492993600, 3511134000, 3524443200, 3542583600, 3555892800, 3574033200, 3587342400, 3605482800, 3618792000, 3637537200, 3650241600, 3668986800, 3682296000, 3700436400, 3713745600, 3731886000, 3745195200, 3763335600, 3776644800, 3794785200, 3808094400, 3826839600, 3839544000, 3858289200, 3871598400, 3889738800, 3903048000, 3921188400, 3934497600, 3952638000, 3965947200, 3984692400, 3997396800, 4016142000, 4029451200, 4047591600, 4060900800, 4079041200, 4092350400, 4110490800, 4123800000, 4141940400, 4155249600, 4173390000, 4186699200, 4205444400, 4218148800, 4236894000, 4250203200, 4268343600, 4281652800, 4299793200, 4313102400, 4331242800, 4344552000, 4363297200, 4376001600, 4394746800, 4408056000, 4426196400, 4439505600, 4457646000, 4470955200, 4489095600, 4502404800, 4520545200, 4533854400, 4552599600, 4565304000, 4584049200, 4597358400, 4615498800, 4628808000, 4646948400, 4660257600, 4678398000, 4691707200, 4709847600, 4723156800, 4741902000, 4755211200, 4773351600, 4786660800, 4804801200, 4818110400, 4836250800, 4849560000, 4867700400, 4881009600, 4899754800, 4912459200, 4931204400, 4944513600, 4962654000, 4975963200, 4994103600, 5007412800, 5025553200, 5038862400, 5057002800, 5070312000, 5089057200, 5101761600, 5120506800, 5133816000, 5151956400, 5165265600, 5183406000, 5196715200, 5214855600, 5228164800, 5246910000, 5259614400, 5278359600, 5291668800, 5309809200, 5323118400, 5341258800, 5354568000, 5372708400, 5386017600, 5404158000, 5417467200, 5436212400, 5448916800, 5467662000, 5480971200, 5499111600, 5512420800, 5530561200, 5543870400, 5562010800, 5575320000, 5593460400, 5606769600, 5625514800, 5638824000, 5656964400, 5670273600, 5688414000, 5701723200, 5719863600, 5733172800, 5751313200, 5764622400, 5783367600, 5796072000, 5814817200, 5828126400, 5846266800, 5859576000, 5877716400, 5891025600, 5909166000, 5922475200, 5940615600, 5953924800, 5972670000, 5985374400, 6004119600, 6017428800, 6035569200, 6048878400, 6067018800, 6080328000, 6098468400, 6111777600, 6130522800, 6143227200, 6161972400, 6175281600, 6193422000, 6206731200, 6224871600, 6238180800, 6256321200, 6269630400, 6287770800, 6301080000, 6319825200, 6332529600, 6351274800, 6364584000, 6382724400, 6396033600, 6414174000, 6427483200, 6445623600, 6458932800, 6477073200, 6490382400, 6509127600, 6522436800, 6540577200, 6553886400, 6572026800, 6585336000, 6603476400, 6616785600, 6634926000, 6648235200, 6666980400, 6679684800, 6698430000, 6711739200, 6729879600, 6743188800, 6761329200, 6774638400, 6792778800, 6806088000, 6824228400, 6837537600, 6856282800, 6868987200, 6887732400, 6901041600, 6919182000, 6932491200, 6950631600, 6963940800, 6982081200, 6995390400, 7014135600, 7026840000, 7045585200, 7058894400, 7077034800, 7090344000, 7108484400, 7121793600, 7139934000, 7153243200, 7171383600, 7184692800, 7203438000, 7216142400, 7234887600, 7248196800, 7266337200, 7279646400, 7297786800, 7311096000, 7329236400, 7342545600, 7360686000, 7373995200, 7392740400, 7405444800, 7424190000, 7437499200, 7455639600, 7468948800, 7487089200, 7500398400, 7518538800, 7531848000, 7549988400, 7563297600, 7582042800, 7594747200, 7613492400, 7626801600, 7644942000, 7658251200, 7676391600, 7689700800, 7707841200, 7721150400, 7739290800, 7752600000, 7771345200, 7784654400, 7802794800, 7816104000, 7834244400, 7847553600, 7865694000, 7879003200, 7897143600, 7910452800, 7929198000, 7941902400, 7960647600, 7973956800, 7992097200, 8005406400, 8023546800, 8036856000, 8054996400, 8068305600, 8086446000, 8099755200, 8118500400, 8131204800, 8149950000, 8163259200, 8181399600, 8194708800, 8212849200, 8226158400, 8244298800, 8257608000, 8276353200, 8289057600, 8307802800, 8321112000, 8339252400, 8352561600, 8370702000, 8384011200, 8402151600, 8415460800, 8433601200, 8446910400, 8465655600, 8478360000, 8497105200, 8510414400, 8528554800, 8541864000, 8560004400, 8573313600, 8591454000, 8604763200, 8622903600, 8636212800, 8654958000, 8668267200, 8686407600, 8699716800, 8717857200, 8731166400, 8749306800, 8762616000, 8780756400, 8794065600, 8812810800, 8825515200, 8844260400, 8857569600, 8875710000, 8889019200, 8907159600, 8920468800, 8938609200, 8951918400, 8970058800, 8983368000, 9002113200, 9014817600, 9033562800, 9046872000, 9065012400, 9078321600, 9096462000, 9109771200, 9127911600, 9141220800, 9159966000, 9172670400, 9191415600, 9204724800, 9222865200, 9236174400, 9254314800, 9267624000, 9285764400, 9299073600, 9317214000, 9330523200, 9349268400, 9361972800, 9380718000, 9394027200, 9412167600, 9425476800, 9443617200, 9456926400, 9475066800, 9488376000, 9506516400, 9519825600, 9538570800, 9551880000, 9570020400, 9583329600, 9601470000, 9614779200, 9632919600, 9646228800, 9664369200, 9677678400, 9696423600, 9709128000, 9727873200, 9741182400, 9759322800, 9772632000, 9790772400, 9804081600, 9822222000, 9835531200, 9853671600, 9866980800, 9885726000, 9898430400, 9917175600, 9930484800, 9948625200, 9961934400, 9980074800, 9993384000, 10011524400, 10024833600, 10043578800, 10056283200, 10075028400, 10088337600, 10106478000, 10119787200, 10137927600, 10151236800, 10169377200, 10182686400, 10200826800, 10214136000, 10232881200, 10245585600, 10264330800, 10277640000, 10295780400, 10309089600, 10327230000, 10340539200, 10358679600, 10371988800, 10390129200, 10403438400, 10422183600, 10434888000, 10453633200, 10466942400, 10485082800, 10498392000, 10516532400, 10529841600, 10547982000, 10561291200, 10579431600, 10592740800, 10611486000, 10624190400, 10642935600, 10656244800, 10674385200, 10687694400, 10705834800, 10719144000, 10737284400, 10750593600, 10768734000, 10782043200, 10800788400, 10814097600, 10832238000, 10845547200, 10863687600, 10876996800, 10895137200, 10908446400, 10926586800, 10939896000, 10958641200, 10971345600, 10990090800, 11003400000, 11021540400, 11034849600, 11052990000, 11066299200, 11084439600, 11097748800, 11115889200, 11129198400, 11147943600, 11160648000, 11179393200, 11192702400, 11210842800, 11224152000, 11242292400, 11255601600, 11273742000, 11287051200, 11305796400, 11318500800, 11337246000, 11350555200, 11368695600, 11382004800, 11400145200, 11413454400, 11431594800, 11444904000, 11463044400, 11476353600, 11495098800, 11507803200, 11526548400, 11539857600, 11557998000, 11571307200, 11589447600, 11602756800, 11620897200, 11634206400, 11652346800, 11665656000, 11684401200, 11697710400, 11715850800, 11729160000, 11747300400, 11760609600, 11778750000, 11792059200, 11810199600, 11823508800, 11842254000, 11854958400, 11873703600, 11887012800, 11905153200, 11918462400, 11936602800, 11949912000, 11968052400, 11981361600, 11999502000, 12012811200, 12031556400, 12044260800, 12063006000, 12076315200, 12094455600, 12107764800, 12125905200, 12139214400, 12157354800, 12170664000, 12189409200, 12202113600, 12220858800, 12234168000, 12252308400, 12265617600, 12283758000, 12297067200, 12315207600, 12328516800, 12346657200, 12359966400, 12378711600, 12391416000, 12410161200, 12423470400, 12441610800, 12454920000, 12473060400, 12486369600, 12504510000, 12517819200, 12535959600, 12549268800, 12568014000, 12581323200, 12599463600, 12612772800, 12630913200, 12644222400, 12662362800, 12675672000, 12693812400, 12707121600, 12725866800, 12738571200, 12757316400, 12770625600, 12788766000, 12802075200, 12820215600, 12833524800, 12851665200, 12864974400, 12883114800, 12896424000, 12915169200, 12927873600, 12946618800, 12959928000, 12978068400, 12991377600, 13009518000, 13022827200, 13040967600, 13054276800, 13073022000, 13085726400, 13104471600, 13117780800, 13135921200, 13149230400, 13167370800, 13180680000, 13198820400, 13212129600, 13230270000, 13243579200, 13262324400, 13275028800, 13293774000, 13307083200, 13325223600, 13338532800, 13356673200, 13369982400, 13388122800, 13401432000, 13419572400, 13432881600, 13451626800, 13464936000, 13483076400, 13496385600, 13514526000, 13527835200, 13545975600, 13559284800, 13577425200, 13590734400, 13609479600, 13622184000, 13640929200, 13654238400, 13672378800, 13685688000, 13703828400, 13717137600, 13735278000, 13748587200, 13766727600, 13780036800, 13798782000, 13811486400, 13830231600, 13843540800, 13861681200, 13874990400, 13893130800, 13906440000, 13924580400, 13937889600, 13956634800, 13969339200, 13988084400, 14001393600, 14019534000, 14032843200, 14050983600, 14064292800, 14082433200, 14095742400, 14113882800, 14127192000, 14145937200, 14158641600, 14177386800, 14190696000, 14208836400, 14222145600, 14240286000, 14253595200, 14271735600, 14285044800, 14303185200, 14316494400 ]),
    Int32List.fromList([ -26248000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000 ]),
    [ 'EMT', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final TimezoneRules efate = DynamicTimezoneRules(
    'Pacific/Efate',
    DynamicTimezone(
      -1,
      40396000,
      'Pacific/Efate',
      'LMT',
      null,
      -1829387596,
      dst: false,
    ),
    Int64List.fromList([ -1829387596, 125409600, 133876800, 433256400, 448977600, 464706000, 480427200, 496760400, 511876800, 528210000, 543931200, 559659600, 575380800, 591109200, 606830400, 622558800, 638280000, 654008400, 669729600, 686062800, 696340800, 719931600, 727790400 ]),
    Int32List.fromList([ 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000 ]),
    [ '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules enderbury = DynamicTimezoneRules(
    'Pacific/Enderbury',
    DynamicTimezone(
      -1,
      0,
      'Pacific/Enderbury',
      '-00',
      null,
      -1020470400,
      dst: false,
    ),
    Int64List.fromList([ -1020470400, 307627200, 788871600 ]),
    Int32List.fromList([ -43200000, -39600000, 46800000 ]),
    [ '-12', '-11', '+13' ],
    [ false, false, false ],
  );

  static final TimezoneRules fakaofo = DynamicTimezoneRules(
    'Pacific/Fakaofo',
    DynamicTimezone(
      -1,
      -41096000,
      'Pacific/Fakaofo',
      'LMT',
      null,
      -2177411704,
      dst: false,
    ),
    Int64List.fromList([ -2177411704, 1325242800 ]),
    Int32List.fromList([ -39600000, 46800000 ]),
    [ '-11', '+13' ],
    [ false, false ],
  );

  static final TimezoneRules fiji = DynamicTimezoneRules(
    'Pacific/Fiji',
    DynamicTimezone(
      -1,
      42944000,
      'Pacific/Fiji',
      'LMT',
      null,
      -1709985344,
      dst: false,
    ),
    Int64List.fromList([ -1709985344, 909842400, 920124000, 941896800, 951573600, 1259416800, 1269698400, 1287842400, 1299333600, 1319292000, 1327154400, 1350741600, 1358604000, 1382796000, 1390050000, 1414850400, 1421503200, 1446300000, 1452952800, 1478354400, 1484402400, 1509804000, 1515852000, 1541253600, 1547301600, 1573308000, 1578751200, 1608386400, 1610805600 ]),
    Int32List.fromList([ 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000 ]),
    [ '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules funafuti = DynamicTimezoneRules(
    'Pacific/Funafuti',
    DynamicTimezone(
      -1,
      41524000,
      'Pacific/Funafuti',
      'LMT',
      null,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final TimezoneRules galapagos = DynamicTimezoneRules(
    'Pacific/Galapagos',
    DynamicTimezone(
      -1,
      -21504000,
      'Pacific/Galapagos',
      'LMT',
      null,
      -1230746496,
      dst: false,
    ),
    Int64List.fromList([ -1230746496, 504939600, 722930400, 728888400 ]),
    Int32List.fromList([ -18000000, -21600000, -18000000, -21600000 ]),
    [ '-05', '-06', '-05', '-06' ],
    [ false, false, true, false ],
  );

  static final TimezoneRules gambier = DynamicTimezoneRules(
    'Pacific/Gambier',
    DynamicTimezone(
      -1,
      -32388000,
      'Pacific/Gambier',
      'LMT',
      null,
      -1806678012,
      dst: false,
    ),
    Int64List.fromList([ -1806678012 ]),
    Int32List.fromList([ -32400000 ]),
    [ '-09' ],
    [ false ],
  );

  static final TimezoneRules guadalcanal = DynamicTimezoneRules(
    'Pacific/Guadalcanal',
    DynamicTimezone(
      -1,
      38388000,
      'Pacific/Guadalcanal',
      'LMT',
      null,
      -1806748788,
      dst: false,
    ),
    Int64List.fromList([ -1806748788 ]),
    Int32List.fromList([ 39600000 ]),
    [ '+11' ],
    [ false ],
  );

  static final TimezoneRules guam = DynamicTimezoneRules(
    'Pacific/Guam',
    DynamicTimezone(
      -1,
      -51660000,
      'Pacific/Guam',
      'LMT',
      null,
      -3944626740,
      dst: false,
    ),
    Int64List.fromList([ -3944626740, -2177487540, -885549600, -802256400, -331891200, -281610000, -73728000, -29415540, -16704000, -10659600, 9907200, 21394800, 41356800, 52844400, 124819200, 130863600, 201888000, 209487660, 230659200, 241542000, 977493600 ]),
    Int32List.fromList([ 34740000, 36000000, 32400000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 36000000 ]),
    [ 'LMT', 'GST', '+09', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'ChST' ],
    [ false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final TimezoneRules honolulu = DynamicTimezoneRules(
    'Pacific/Honolulu',
    DynamicTimezone(
      -1,
      -37886000,
      'Pacific/Honolulu',
      'LMT',
      null,
      -2334101314,
      dst: false,
    ),
    Int64List.fromList([ -2334101314, -1157283000, -1155436200, -880198200, -769395600, -765376200, -712150200 ]),
    Int32List.fromList([ -37800000, -34200000, -37800000, -34200000, -34200000, -37800000, -36000000 ]),
    [ 'HST', 'HDT', 'HST', 'HWT', 'HPT', 'HST', 'HST' ],
    [ false, true, false, true, true, false, false ],
  );

  static final TimezoneRules johnston = DynamicTimezoneRules(
    'Pacific/Johnston',
    DynamicTimezone(
      -1,
      -37886000,
      'Pacific/Johnston',
      'LMT',
      null,
      -2334101314,
      dst: false,
    ),
    Int64List.fromList([ -2334101314, -1157283000, -1155436200, -880198200, -769395600, -765376200, -712150200 ]),
    Int32List.fromList([ -37800000, -34200000, -37800000, -34200000, -34200000, -37800000, -36000000 ]),
    [ 'HST', 'HDT', 'HST', 'HWT', 'HPT', 'HST', 'HST' ],
    [ false, true, false, true, true, false, false ],
  );

  static final TimezoneRules kanton = DynamicTimezoneRules(
    'Pacific/Kanton',
    DynamicTimezone(
      -1,
      0,
      'Pacific/Kanton',
      '-00',
      null,
      -1020470400,
      dst: false,
    ),
    Int64List.fromList([ -1020470400, 307627200, 788871600 ]),
    Int32List.fromList([ -43200000, -39600000, 46800000 ]),
    [ '-12', '-11', '+13' ],
    [ false, false, false ],
  );

  static final TimezoneRules kiritimati = DynamicTimezoneRules(
    'Pacific/Kiritimati',
    DynamicTimezone(
      -1,
      -37760000,
      'Pacific/Kiritimati',
      'LMT',
      null,
      -2177415040,
      dst: false,
    ),
    Int64List.fromList([ -2177415040, 307622400, 788868000 ]),
    Int32List.fromList([ -38400000, -36000000, 50400000 ]),
    [ '-1040', '-10', '+14' ],
    [ false, false, false ],
  );

  static final TimezoneRules kosrae = DynamicTimezoneRules(
    'Pacific/Kosrae',
    DynamicTimezone(
      -1,
      -47284000,
      'Pacific/Kosrae',
      'LMT',
      null,
      -3944631116,
      dst: false,
    ),
    Int64List.fromList([ -3944631116, -2177491916, -1743678000, -1606813200, -1041418800, -907408800, -770634000, -7988400, 915105600 ]),
    Int32List.fromList([ 39116000, 39600000, 32400000, 39600000, 36000000, 32400000, 39600000, 43200000, 39600000 ]),
    [ 'LMT', '+11', '+09', '+11', '+10', '+09', '+11', '+12', '+11' ],
    [ false, false, false, false, false, false, false, false, false ],
  );

  static final TimezoneRules kwajalein = DynamicTimezoneRules(
    'Pacific/Kwajalein',
    DynamicTimezone(
      -1,
      40160000,
      'Pacific/Kwajalein',
      'LMT',
      null,
      -2177492960,
      dst: false,
    ),
    Int64List.fromList([ -2177492960, -1041418800, -907408800, -817462800, -7988400, 745934400 ]),
    Int32List.fromList([ 39600000, 36000000, 32400000, 39600000, -43200000, 43200000 ]),
    [ '+11', '+10', '+09', '+11', '-12', '+12' ],
    [ false, false, false, false, false, false ],
  );

  static final TimezoneRules majuro = DynamicTimezoneRules(
    'Pacific/Majuro',
    DynamicTimezone(
      -1,
      41524000,
      'Pacific/Majuro',
      'LMT',
      null,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final TimezoneRules marquesas = DynamicTimezoneRules(
    'Pacific/Marquesas',
    DynamicTimezone(
      -1,
      -33480000,
      'Pacific/Marquesas',
      'LMT',
      null,
      -1806676920,
      dst: false,
    ),
    Int64List.fromList([ -1806676920 ]),
    Int32List.fromList([ -34200000 ]),
    [ '-0930' ],
    [ false ],
  );

  static final TimezoneRules midway = DynamicTimezoneRules(
    'Pacific/Midway',
    DynamicTimezone(
      -1,
      45432000,
      'Pacific/Midway',
      'LMT',
      null,
      -2445424632,
      dst: false,
    ),
    Int64List.fromList([ -2445424632, -1861879032 ]),
    Int32List.fromList([ -40968000, -39600000 ]),
    [ 'LMT', 'SST' ],
    [ false, false ],
  );

  static final TimezoneRules nauru = DynamicTimezoneRules(
    'Pacific/Nauru',
    DynamicTimezone(
      -1,
      40060000,
      'Pacific/Nauru',
      'LMT',
      null,
      -1545131260,
      dst: false,
    ),
    Int64List.fromList([ -1545131260, -862918200, -767350800, 287418600 ]),
    Int32List.fromList([ 41400000, 32400000, 41400000, 43200000 ]),
    [ '+1130', '+09', '+1130', '+12' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules niue = DynamicTimezoneRules(
    'Pacific/Niue',
    DynamicTimezone(
      -1,
      -40780000,
      'Pacific/Niue',
      'LMT',
      null,
      -543069620,
      dst: false,
    ),
    Int64List.fromList([ -543069620, -173623200 ]),
    Int32List.fromList([ -40800000, -39600000 ]),
    [ '-1120', '-11' ],
    [ false, false ],
  );

  static final TimezoneRules norfolk = DynamicTimezoneRules(
    'Pacific/Norfolk',
    DynamicTimezone(
      -1,
      40312000,
      'Pacific/Norfolk',
      'LMT',
      null,
      -2177493112,
      dst: false,
    ),
    Int64List.fromList([ -2177493112, -599656320, 152029800, 162916200, 1443882600, 1561899600, 1570287600, 1586012400, 1601737200, 1617462000, 1633186800, 1648911600, 1664636400, 1680361200, 1696086000, 1712415600, 1728140400, 1743865200, 1759590000, 1775314800, 1791039600, 1806764400, 1822489200, 1838214000, 1853938800, 1869663600, 1885993200, 1901718000, 1917442800, 1933167600, 1948892400, 1964617200, 1980342000, 1996066800, 2011791600, 2027516400, 2043241200, 2058966000, 2075295600, 2091020400, 2106745200, 2122470000, 2138194800 ]),
    Int32List.fromList([ 40320000, 41400000, 45000000, 41400000, 39600000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000 ]),
    [ '+1112', '+1130', '+1230', '+1130', '+11', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12' ],
    [ false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final TimezoneRules noumea = DynamicTimezoneRules(
    'Pacific/Noumea',
    DynamicTimezone(
      -1,
      39948000,
      'Pacific/Noumea',
      'LMT',
      null,
      -1829387148,
      dst: false,
    ),
    Int64List.fromList([ -1829387148, 250002000, 257342400, 281451600, 288878400, 849366000, 857228400 ]),
    Int32List.fromList([ 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000 ]),
    [ '+11', '+12', '+11', '+12', '+11', '+12', '+11' ],
    [ false, true, false, true, false, true, false ],
  );

  static final TimezoneRules pagoPago = DynamicTimezoneRules(
    'Pacific/Pago_Pago',
    DynamicTimezone(
      -1,
      45432000,
      'Pacific/Pago_Pago',
      'LMT',
      null,
      -2445424632,
      dst: false,
    ),
    Int64List.fromList([ -2445424632, -1861879032 ]),
    Int32List.fromList([ -40968000, -39600000 ]),
    [ 'LMT', 'SST' ],
    [ false, false ],
  );

  static final TimezoneRules palau = DynamicTimezoneRules(
    'Pacific/Palau',
    DynamicTimezone(
      -1,
      -54124000,
      'Pacific/Palau',
      'LMT',
      null,
      -3944624276,
      dst: false,
    ),
    Int64List.fromList([ -3944624276, -2177485076 ]),
    Int32List.fromList([ 32276000, 32400000 ]),
    [ 'LMT', '+09' ],
    [ false, false ],
  );

  static final TimezoneRules pitcairn = DynamicTimezoneRules(
    'Pacific/Pitcairn',
    DynamicTimezone(
      -1,
      -31220000,
      'Pacific/Pitcairn',
      'LMT',
      null,
      -2177421580,
      dst: false,
    ),
    Int64List.fromList([ -2177421580, 893665800 ]),
    Int32List.fromList([ -30600000, -28800000 ]),
    [ '-0830', '-08' ],
    [ false, false ],
  );

  static final TimezoneRules pohnpei = DynamicTimezoneRules(
    'Pacific/Pohnpei',
    DynamicTimezone(
      -1,
      38388000,
      'Pacific/Pohnpei',
      'LMT',
      null,
      -1806748788,
      dst: false,
    ),
    Int64List.fromList([ -1806748788 ]),
    Int32List.fromList([ 39600000 ]),
    [ '+11' ],
    [ false ],
  );

  static final TimezoneRules ponape = DynamicTimezoneRules(
    'Pacific/Ponape',
    DynamicTimezone(
      -1,
      38388000,
      'Pacific/Ponape',
      'LMT',
      null,
      -1806748788,
      dst: false,
    ),
    Int64List.fromList([ -1806748788 ]),
    Int32List.fromList([ 39600000 ]),
    [ '+11' ],
    [ false ],
  );

  static final TimezoneRules portMoresby = DynamicTimezoneRules(
    'Pacific/Port_Moresby',
    DynamicTimezone(
      -1,
      35320000,
      'Pacific/Port_Moresby',
      'LMT',
      null,
      -2840176120,
      dst: false,
    ),
    Int64List.fromList([ -2840176120, -2366790512 ]),
    Int32List.fromList([ 35312000, 36000000 ]),
    [ 'PMMT', '+10' ],
    [ false, false ],
  );

  static final TimezoneRules rarotonga = DynamicTimezoneRules(
    'Pacific/Rarotonga',
    DynamicTimezone(
      -1,
      48056000,
      'Pacific/Rarotonga',
      'LMT',
      null,
      -2209555256,
      dst: false,
    ),
    Int64List.fromList([ -2209555256, -543072056, 279714600, 289387800, 309952800, 320837400, 341402400, 352287000, 372852000, 384341400, 404906400, 415791000, 436356000, 447240600, 467805600, 478690200, 499255200, 510139800, 530704800, 541589400, 562154400, 573643800, 594208800, 605093400, 625658400, 636543000, 657108000, 667992600 ]),
    Int32List.fromList([ -38344000, -37800000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000 ]),
    [ 'LMT', '-1030', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules saipan = DynamicTimezoneRules(
    'Pacific/Saipan',
    DynamicTimezone(
      -1,
      -51660000,
      'Pacific/Saipan',
      'LMT',
      null,
      -3944626740,
      dst: false,
    ),
    Int64List.fromList([ -3944626740, -2177487540, -885549600, -802256400, -331891200, -281610000, -73728000, -29415540, -16704000, -10659600, 9907200, 21394800, 41356800, 52844400, 124819200, 130863600, 201888000, 209487660, 230659200, 241542000, 977493600 ]),
    Int32List.fromList([ 34740000, 36000000, 32400000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 36000000 ]),
    [ 'LMT', 'GST', '+09', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'ChST' ],
    [ false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final TimezoneRules samoa = DynamicTimezoneRules(
    'Pacific/Samoa',
    DynamicTimezone(
      -1,
      45432000,
      'Pacific/Samoa',
      'LMT',
      null,
      -2445424632,
      dst: false,
    ),
    Int64List.fromList([ -2445424632, -1861879032 ]),
    Int32List.fromList([ -40968000, -39600000 ]),
    [ 'LMT', 'SST' ],
    [ false, false ],
  );

  static final TimezoneRules tahiti = DynamicTimezoneRules(
    'Pacific/Tahiti',
    DynamicTimezone(
      -1,
      -35896000,
      'Pacific/Tahiti',
      'LMT',
      null,
      -1806674504,
      dst: false,
    ),
    Int64List.fromList([ -1806674504 ]),
    Int32List.fromList([ -36000000 ]),
    [ '-10' ],
    [ false ],
  );

  static final TimezoneRules tarawa = DynamicTimezoneRules(
    'Pacific/Tarawa',
    DynamicTimezone(
      -1,
      41524000,
      'Pacific/Tarawa',
      'LMT',
      null,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final TimezoneRules tongatapu = DynamicTimezoneRules(
    'Pacific/Tongatapu',
    DynamicTimezone(
      -1,
      44352000,
      'Pacific/Tongatapu',
      'LMT',
      null,
      -767189952,
      dst: false,
    ),
    Int64List.fromList([ -767189952, -284041200, 939214800, 953384400, 973342800, 980596800, 1004792400, 1012046400, 1478350800, 1484398800 ]),
    Int32List.fromList([ 44400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000 ]),
    [ '+1220', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13' ],
    [ false, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules truk = DynamicTimezoneRules(
    'Pacific/Truk',
    DynamicTimezone(
      -1,
      35320000,
      'Pacific/Truk',
      'LMT',
      null,
      -2840176120,
      dst: false,
    ),
    Int64List.fromList([ -2840176120, -2366790512 ]),
    Int32List.fromList([ 35312000, 36000000 ]),
    [ 'PMMT', '+10' ],
    [ false, false ],
  );

  static final TimezoneRules wake = DynamicTimezoneRules(
    'Pacific/Wake',
    DynamicTimezone(
      -1,
      41524000,
      'Pacific/Wake',
      'LMT',
      null,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final TimezoneRules wallis = DynamicTimezoneRules(
    'Pacific/Wallis',
    DynamicTimezone(
      -1,
      41524000,
      'Pacific/Wallis',
      'LMT',
      null,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final TimezoneRules yap = DynamicTimezoneRules(
    'Pacific/Yap',
    DynamicTimezone(
      -1,
      35320000,
      'Pacific/Yap',
      'LMT',
      null,
      -2840176120,
      dst: false,
    ),
    Int64List.fromList([ -2840176120, -2366790512 ]),
    Int32List.fromList([ 35312000, 36000000 ]),
    [ 'PMMT', '+10' ],
    [ false, false ],
  );

}


