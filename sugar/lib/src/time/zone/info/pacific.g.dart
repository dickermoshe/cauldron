// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/generate_timezones.dart
// **************************************************************************
// 
// ignore_for_file: type=lint

import 'dart:typed_data';

import 'package:sugar/src/time/offset.dart';
import 'package:sugar/src/time/zone/dynamic_timezone.dart';
import 'package:sugar/src/time/zone/fixed_timezone.dart';
import 'package:sugar/src/time/zone/timezone.dart';
import 'package:sugar/src/time/zone/timezone_span.dart';

extension Pacific on Never {
  static final Timezone apia = DynamicTimezone(
    'Pacific/Apia',
    DynamicTimezoneSpan(
      -1,
      45184000,
      'LMT',
      TimezoneSpan.range.min,
      -2445424384,
      dst: false,
    ),
    Int64List.fromList([ -2445424384000, -1861878784000, -631110600000, 1285498800000, 1301752800000, 1316872800000, 1325239200000, 1333202400000, 1348927200000, 1365256800000, 1380376800000, 1396706400000, 1411826400000, 1428156000000, 1443276000000, 1459605600000, 1474725600000, 1491055200000, 1506175200000, 1522504800000, 1538229600000, 1554559200000, 1569679200000, 1586008800000, 1601128800000, 1617458400000 ]),
    Int32List.fromList([ -41216000, -41400000, -39600000, -36000000, -39600000, -36000000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000 ]),
    [ 'LMT', '-1130', '-11', '-10', '-11', '-10', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13' ],
    [ false, false, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone auckland = DynamicTimezone(
    'Pacific/Auckland',
    DynamicTimezoneSpan(
      -1,
      41944000,
      'LMT',
      TimezoneSpan.range.min,
      -3192435544,
      dst: false,
    ),
    Int64List.fromList([ -3192435544000, -1330335000000, -1320057000000, -1300699800000, -1287396000000, -1269250200000, -1255946400000, -1237800600000, -1224496800000, -1206351000000, -1192442400000, -1174901400000, -1160992800000, -1143451800000, -1125914400000, -1112607000000, -1094464800000, -1081157400000, -1063015200000, -1049707800000, -1031565600000, -1018258200000, -1000116000000, -986808600000, -968061600000, -955359000000, -936612000000, -923304600000, -757425600000, 152632800000, 162309600000, 183477600000, 194968800000, 215532000000, 226418400000, 246981600000, 257868000000, 278431200000, 289317600000, 309880800000, 320767200000, 341330400000, 352216800000, 372780000000, 384271200000, 404834400000, 415720800000, 436284000000, 447170400000, 467733600000, 478620000000, 499183200000, 510069600000, 530632800000, 541519200000, 562082400000, 573573600000, 594136800000, 605023200000, 623772000000, 637682400000, 655221600000, 669132000000, 686671200000, 700581600000, 718120800000, 732636000000, 749570400000, 764085600000, 781020000000, 795535200000, 812469600000, 826984800000, 844524000000, 858434400000, 875973600000, 889884000000, 907423200000, 921938400000, 938872800000, 953388000000, 970322400000, 984837600000, 1002376800000, 1016287200000, 1033826400000, 1047736800000, 1065276000000, 1079791200000, 1096725600000, 1111240800000, 1128175200000, 1142690400000, 1159624800000, 1174140000000, 1191074400000, 1207404000000, 1222524000000, 1238853600000, 1253973600000, 1270303200000, 1285423200000, 1301752800000, 1316872800000, 1333202400000, 1348927200000, 1365256800000, 1380376800000, 1396706400000, 1411826400000, 1428156000000, 1443276000000, 1459605600000, 1474725600000, 1491055200000, 1506175200000, 1522504800000, 1538229600000, 1554559200000, 1569679200000, 1586008800000, 1601128800000, 1617458400000, 1632578400000, 1648908000000, 1664028000000, 1680357600000, 1695477600000, 1712412000000, 1727532000000, 1743861600000, 1758981600000, 1775311200000, 1790431200000, 1806760800000, 1821880800000, 1838210400000, 1853330400000, 1869660000000, 1885384800000, 1901714400000, 1916834400000, 1933164000000, 1948284000000, 1964613600000, 1979733600000, 1996063200000, 2011183200000, 2027512800000, 2042632800000, 2058962400000, 2074687200000, 2091016800000, 2106136800000, 2122466400000, 2137586400000 ]),
    Int32List.fromList([ 41400000, 45000000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 41400000, 43200000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000 ]),
    [ 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final Timezone bougainville = DynamicTimezone(
    'Pacific/Bougainville',
    DynamicTimezoneSpan(
      -1,
      37336000,
      'LMT',
      TimezoneSpan.range.min,
      -2840178136,
      dst: false,
    ),
    Int64List.fromList([ -2840178136000, -2366790512000, -868010400000, -768906000000, 1419696000000 ]),
    Int32List.fromList([ 35312000, 36000000, 32400000, 36000000, 39600000 ]),
    [ 'PMMT', '+10', '+09', '+10', '+11' ],
    [ false, false, false, false, false ],
  );

  static final Timezone chatham = DynamicTimezone(
    'Pacific/Chatham',
    DynamicTimezoneSpan(
      -1,
      44028000,
      'LMT',
      TimezoneSpan.range.min,
      -3192437628,
      dst: false,
    ),
    Int64List.fromList([ -3192437628000, -757426500000, 152632800000, 162309600000, 183477600000, 194968800000, 215532000000, 226418400000, 246981600000, 257868000000, 278431200000, 289317600000, 309880800000, 320767200000, 341330400000, 352216800000, 372780000000, 384271200000, 404834400000, 415720800000, 436284000000, 447170400000, 467733600000, 478620000000, 499183200000, 510069600000, 530632800000, 541519200000, 562082400000, 573573600000, 594136800000, 605023200000, 623772000000, 637682400000, 655221600000, 669132000000, 686671200000, 700581600000, 718120800000, 732636000000, 749570400000, 764085600000, 781020000000, 795535200000, 812469600000, 826984800000, 844524000000, 858434400000, 875973600000, 889884000000, 907423200000, 921938400000, 938872800000, 953388000000, 970322400000, 984837600000, 1002376800000, 1016287200000, 1033826400000, 1047736800000, 1065276000000, 1079791200000, 1096725600000, 1111240800000, 1128175200000, 1142690400000, 1159624800000, 1174140000000, 1191074400000, 1207404000000, 1222524000000, 1238853600000, 1253973600000, 1270303200000, 1285423200000, 1301752800000, 1316872800000, 1333202400000, 1348927200000, 1365256800000, 1380376800000, 1396706400000, 1411826400000, 1428156000000, 1443276000000, 1459605600000, 1474725600000, 1491055200000, 1506175200000, 1522504800000, 1538229600000, 1554559200000, 1569679200000, 1586008800000, 1601128800000, 1617458400000, 1632578400000, 1648908000000, 1664028000000, 1680357600000, 1695477600000, 1712412000000, 1727532000000, 1743861600000, 1758981600000, 1775311200000, 1790431200000, 1806760800000, 1821880800000, 1838210400000, 1853330400000, 1869660000000, 1885384800000, 1901714400000, 1916834400000, 1933164000000, 1948284000000, 1964613600000, 1979733600000, 1996063200000, 2011183200000, 2027512800000, 2042632800000, 2058962400000, 2074687200000, 2091016800000, 2106136800000, 2122466400000, 2137586400000 ]),
    Int32List.fromList

    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final Timezone chuuk = DynamicTimezone(
    'Pacific/Chuuk',
    DynamicTimezoneSpan(
      -1,
      35320000,
      'LMT',
      TimezoneSpan.range.min,
      -2840176120,
      dst: false,
    ),
    Int64List.fromList([ -2840176120000, -2366790512000 ]),
    Int32List.fromList([ 35312000, 36000000 ]),
    [ 'PMMT', '+10' ],
    [ false, false ],
  );

  static final Timezone easter = DynamicTimezone(
    'Pacific/Easter',
    DynamicTimezoneSpan(
      -1,
      -26248000,
      'LMT',
      TimezoneSpan.range.min,
      -2524495352,
      dst: false,
    ),
    Int64List.fromList([ -2524495352000, -1178124152000, -36619200000, -23922000000, -3355200000, 7527600000, 24465600000, 37767600000, 55915200000, 69217200000, 87969600000, 100666800000, 118209600000, 132116400000, 150868800000, 163566000000, 182318400000, 195620400000, 213768000000, 227070000000, 245217600000, 258519600000, 277272000000, 289969200000, 308721600000, 321418800000, 340171200000, 353473200000, 371620800000, 384922800000, 403070400000, 416372400000, 434520000000, 447822000000, 466574400000, 479271600000, 498024000000, 510721200000, 529473600000, 545194800000, 560923200000, 574225200000, 592372800000, 605674800000, 624427200000, 637124400000, 653457600000, 668574000000, 687326400000, 700628400000, 718776000000, 732078000000, 750225600000, 763527600000, 781675200000, 794977200000, 813729600000, 826426800000, 845179200000, 859690800000, 876628800000, 889930800000, 906868800000, 923194800000, 939528000000, 952830000000, 971582400000, 984279600000, 1003032000000, 1015729200000, 1034481600000, 1047178800000, 1065931200000, 1079233200000, 1097380800000, 1110682800000, 1128830400000, 1142132400000, 1160884800000, 1173582000000, 1192334400000, 1206846000000, 1223784000000, 1237086000000, 1255233600000, 1270350000000, 1286683200000, 1304823600000, 1313899200000, 1335668400000, 1346558400000, 1367118000000, 1378612800000, 1398567600000, 1410062400000, 1463281200000, 1471147200000, 1494730800000, 1502596800000, 1526180400000, 1534046400000, 1554606000000, 1567915200000, 1586055600000, 1599364800000, 1617505200000, 1630814400000, 1648954800000, 1662868800000, 1680404400000, 1693713600000, 1712458800000, 1725768000000, 1743908400000, 1757217600000, 1775358000000, 1788667200000, 1806807600000, 1820116800000, 1838257200000, 1851566400000, 1870311600000, 1883016000000, 1901761200000, 1915070400000, 1933210800000, 1946520000000, 1964660400000, 1977969600000, 1996110000000, 2009419200000, 2027559600000, 2040868800000, 2059614000000, 2072318400000, 2091063600000, 2104372800000, 2122513200000, 2135822400000, 2153962800000, 2167272000000, 2185412400000, 2198721600000, 2217466800000, 2230171200000, 2248916400000, 2262225600000, 2280366000000, 2293675200000, 2311815600000, 2325124800000, 2343265200000, 2356574400000, 2374714800000, 2388024000000, 2406769200000, 2419473600000, 2438218800000, 2451528000000, 2469668400000, 2482977600000, 2501118000000, 2514427200000, 2532567600000, 2545876800000, 2564017200000, 2577326400000, 2596071600000, 2609380800000, 2627521200000, 2640830400000, 2658970800000, 2672280000000, 2690420400000, 2703729600000, 2721870000000, 2735179200000, 2753924400000, 2766628800000, 2785374000000, 2798683200000, 2816823600000, 2830132800000, 2848273200000, 2861582400000, 2879722800000, 2893032000000, 2911172400000, 2924481600000, 2943226800000, 2955931200000, 2974676400000, 2987985600000, 3006126000000, 3019435200000, 3037575600000, 3050884800000, 3069025200000, 3082334400000, 3101079600000, 3113784000000, 3132529200000, 3145838400000, 3163978800000, 3177288000000, 3195428400000, 3208737600000, 3226878000000, 3240187200000, 3258327600000, 3271636800000, 3290382000000, 3303086400000, 3321831600000, 3335140800000, 3353281200000, 3366590400000, 3384730800000, 3398040000000, 3416180400000, 3429489600000, 3447630000000, 3460939200000, 3479684400000, 3492993600000, 3511134000000, 3524443200000, 3542583600000, 3555892800000, 3574033200000, 3587342400000, 3605482800000, 3618792000000, 3637537200000, 3650241600000, 3668986800000, 3682296000000, 3700436400000, 3713745600000, 3731886000000, 3745195200000, 3763335600000, 3776644800000, 3794785200000, 3808094400000, 3826839600000, 3839544000000, 3858289200000, 3871598400000, 3889738800000, 3903048000000, 3921188400000, 3934497600000, 3952638000000, 3965947200000, 3984692400000, 3997396800000, 4016142000000, 4029451200000, 4047591600000, 4060900800000, 4079041200000, 4092350400000, 4110490800000, 4123800000000, 4141940400000, 4155249600000, 4173390000000, 4186699200000, 4205444400000, 4218148800000, 4236894000000, 4250203200000, 4268343600000, 4281652800000, 4299793200000, 4313102400000, 4331242800000, 4344552000000, 4363297200000, 4376001600000, 4394746800000, 4408056000000, 4426196400000, 4439505600000, 4457646000000, 4470955200000, 4489095600000, 4502404800000, 4520545200000, 4533854400000, 4552599600000, 4565304000000, 4584049200000, 4597358400000, 4615498800000, 4628808000000, 4646948400000, 4660257600000, 4678398000000, 4691707200000, 4709847600000, 4723156800000, 4741902000000, 4755211200000, 4773351600000, 4786660800000, 4804801200000, 4818110400000, 4836250800000, 4849560000000, 4867700400000, 4881009600000, 4899754800000, 4912459200000, 4931204400000, 4944513600000, 4962654000000, 4975963200000, 4994103600000, 5007412800000, 5025553200000, 5038862400000, 5057002800000, 5070312000000, 5089057200000, 5101761600000, 5120506800000, 5133816000000, 5151956400000, 5165265600000, 5183406000000, 5196715200000, 5214855600000, 5228164800000, 5246910000000, 5259614400000, 5278359600000, 5291668800000, 5309809200000, 5323118400000, 5341258800000, 5354568000000, 5372708400000, 5386017600000, 5404158000000, 5417467200000, 5436212400000, 5448916800000, 5467662000000, 5480971200000, 5499111600000, 5512420800000, 5530561200000, 5543870400000, 5562010800000, 5575320000000, 5593460400000, 5606769600000, 5625514800000, 5638824000000, 5656964400000, 5670273600000, 5688414000000, 5701723200000, 5719863600000, 5733172800000, 5751313200000, 5764622400000, 5783367600000, 5796072000000, 5814817200000, 5828126400000, 5846266800000, 5859576000000, 5877716400000, 5891025600000, 5909166000000, 5922475200000, 5940615600000, 5953924800000, 5972670000000, 5985374400000, 6004119600000, 6017428800000, 6035569200000, 6048878400000, 6067018800000, 6080328000000, 6098468400000, 6111777600000, 6130522800000, 6143227200000, 6161972400000, 6175281600000, 6193422000000, 6206731200000, 6224871600000, 6238180800000, 6256321200000, 6269630400000, 6287770800000, 6301080000000, 6319825200000, 6332529600000, 6351274800000, 6364584000000, 6382724400000, 6396033600000, 6414174000000, 6427483200000, 6445623600000, 6458932800000, 6477073200000, 6490382400000, 6509127600000, 6522436800000, 6540577200000, 6553886400000, 6572026800000, 6585336000000, 6603476400000, 6616785600000, 6634926000000, 6648235200000, 6666980400000, 6679684800000, 6698430000000, 6711739200000, 6729879600000, 6743188800000, 6761329200000, 6774638400000, 6792778800000, 6806088000000, 6824228400000, 6837537600000, 6856282800000, 6868987200000, 6887732400000, 6901041600000, 6919182000000, 6932491200000, 6950631600000, 6963940800000, 6982081200000, 6995390400000, 7014135600000, 7026840000000, 7045585200000, 7058894400000, 7077034800000, 7090344000000, 7108484400000, 7121793600000, 7139934000000, 7153243200000, 7171383600000, 7184692800000, 7203438000000, 7216142400000, 7234887600000, 7248196800000, 7266337200000, 7279646400000, 7297786800000, 7311096000000, 7329236400000, 7342545600000, 7360686000000, 7373995200000, 7392740400000, 7405444800000, 7424190000000, 7437499200000, 7455639600000, 7468948800000, 7487089200000, 7500398400000, 7518538800000, 7531848000000, 7549988400000, 7563297600000, 7582042800000, 7594747200000, 7613492400000, 7626801600000, 7644942000000, 7658251200000, 7676391600000, 7689700800000, 7707841200000, 7721150400000, 7739290800000, 7752600000000, 7771345200000, 7784654400000, 7802794800000, 7816104000000, 7834244400000, 7847553600000, 7865694000000, 7879003200000, 7897143600000, 7910452800000, 7929198000000, 7941902400000, 7960647600000, 7973956800000, 7992097200000, 8005406400000, 8023546800000, 8036856000000, 8054996400000, 8068305600000, 8086446000000, 8099755200000, 8118500400000, 8131204800000, 8149950000000, 8163259200000, 8181399600000, 8194708800000, 8212849200000, 8226158400000, 8244298800000, 8257608000000, 8276353200000, 8289057600000, 8307802800000, 8321112000000, 8339252400000, 8352561600000, 8370702000000, 8384011200000, 8402151600000, 8415460800000, 8433601200000, 8446910400000, 8465655600000, 8478360000000, 8497105200000, 8510414400000, 8528554800000, 8541864000000, 8560004400000, 8573313600000, 8591454000000, 8604763200000, 8622903600000, 8636212800000, 8654958000000, 8668267200000, 8686407600000, 8699716800000, 8717857200000, 8731166400000, 8749306800000, 8762616000000, 8780756400000, 8794065600000, 8812810800000, 8825515200000, 8844260400000, 8857569600000, 8875710000000, 8889019200000, 8907159600000, 8920468800000, 8938609200000, 8951918400000, 8970058800000, 8983368000000, 9002113200000, 9014817600000, 9033562800000, 9046872000000, 9065012400000, 9078321600000, 9096462000000, 9109771200000, 9127911600000, 9141220800000, 9159966000000, 9172670400000, 9191415600000, 9204724800000, 9222865200000, 9236174400000, 9254314800000, 9267624000000, 9285764400000, 9299073600000, 9317214000000, 9330523200000, 9349268400000, 9361972800000, 9380718000000, 9394027200000, 9412167600000, 9425476800000, 9443617200000, 9456926400000, 9475066800000, 9488376000000, 9506516400000, 9519825600000, 9538570800000, 9551880000000, 9570020400000, 9583329600000, 9601470000000, 9614779200000, 9632919600000, 9646228800000, 9664369200000, 9677678400000, 9696423600000, 9709128000000, 9727873200000, 9741182400000, 9759322800000, 9772632000000, 9790772400000, 9804081600000, 9822222000000, 9835531200000, 9853671600000, 9866980800000, 9885726000000, 9898430400000, 9917175600000, 9930484800000, 9948625200000, 9961934400000, 9980074800000, 9993384000000, 10011524400000, 10024833600000, 10043578800000, 10056283200000, 10075028400000, 10088337600000, 10106478000000, 10119787200000, 10137927600000, 10151236800000, 10169377200000, 10182686400000, 10200826800000, 10214136000000, 10232881200000, 10245585600000, 10264330800000, 10277640000000, 10295780400000, 10309089600000, 10327230000000, 10340539200000, 10358679600000, 10371988800000, 10390129200000, 10403438400000, 10422183600000, 10434888000000, 10453633200000, 10466942400000, 10485082800000, 10498392000000, 10516532400000, 10529841600000, 10547982000000, 10561291200000, 10579431600000, 10592740800000, 10611486000000, 10624190400000, 10642935600000, 10656244800000, 10674385200000, 10687694400000, 10705834800000, 10719144000000, 10737284400000, 10750593600000, 10768734000000, 10782043200000, 10800788400000, 10814097600000, 10832238000000, 10845547200000, 10863687600000, 10876996800000, 10895137200000, 10908446400000, 10926586800000, 10939896000000, 10958641200000, 10971345600000, 10990090800000, 11003400000000, 11021540400000, 11034849600000, 11052990000000, 11066299200000, 11084439600000, 11097748800000, 11115889200000, 11129198400000, 11147943600000, 11160648000000, 11179393200000, 11192702400000, 11210842800000, 11224152000000, 11242292400000, 11255601600000, 11273742000000, 11287051200000, 11305796400000, 11318500800000, 11337246000000, 11350555200000, 11368695600000, 11382004800000, 11400145200000, 11413454400000, 11431594800000, 11444904000000, 11463044400000, 11476353600000, 11495098800000, 11507803200000, 11526548400000, 11539857600000, 11557998000000, 11571307200000, 11589447600000, 11602756800000, 11620897200000, 11634206400000, 11652346800000, 11665656000000, 11684401200000, 11697710400000, 11715850800000, 11729160000000, 11747300400000, 11760609600000, 11778750000000, 11792059200000, 11810199600000, 11823508800000, 11842254000000, 11854958400000, 11873703600000, 11887012800000, 11905153200000, 11918462400000, 11936602800000, 11949912000000, 11968052400000, 11981361600000, 11999502000000, 12012811200000, 12031556400000, 12044260800000, 12063006000000, 12076315200000, 12094455600000, 12107764800000, 12125905200000, 12139214400000, 12157354800000, 12170664000000, 12189409200000, 12202113600000, 12220858800000, 12234168000000, 12252308400000, 12265617600000, 12283758000000, 12297067200000, 12315207600000, 12328516800000, 12346657200000, 12359966400000, 12378711600000, 12391416000000, 12410161200000, 12423470400000, 12441610800000, 12454920000000, 12473060400000, 12486369600000, 12504510000000, 12517819200000, 12535959600000, 12549268800000, 12568014000000, 12581323200000, 12599463600000, 12612772800000, 12630913200000, 12644222400000, 12662362800000, 12675672000000, 12693812400000, 12707121600000, 12725866800000, 12738571200000, 12757316400000, 12770625600000, 12788766000000, 12802075200000, 12820215600000, 12833524800000, 12851665200000, 12864974400000, 12883114800000, 12896424000000, 12915169200000, 12927873600000, 12946618800000, 12959928000000, 12978068400000, 12991377600000, 13009518000000, 13022827200000, 13040967600000, 13054276800000, 13073022000000, 13085726400000, 13104471600000, 13117780800000, 13135921200000, 13149230400000, 13167370800000, 13180680000000, 13198820400000, 13212129600000, 13230270000000, 13243579200000, 13262324400000, 13275028800000, 13293774000000, 13307083200000, 13325223600000, 13338532800000, 13356673200000, 13369982400000, 13388122800000, 13401432000000, 13419572400000, 13432881600000, 13451626800000, 13464936000000, 13483076400000, 13496385600000, 13514526000000, 13527835200000, 13545975600000, 13559284800000, 13577425200000, 13590734400000, 13609479600000, 13622184000000, 13640929200000, 13654238400000, 13672378800000, 13685688000000, 13703828400000, 13717137600000, 13735278000000, 13748587200000, 13766727600000, 13780036800000, 13798782000000, 13811486400000, 13830231600000, 13843540800000, 13861681200000, 13874990400000, 13893130800000, 13906440000000, 13924580400000, 13937889600000, 13956634800000, 13969339200000, 13988084400000, 14001393600000, 14019534000000, 14032843200000, 14050983600000, 14064292800000, 14082433200000, 14095742400000, 14113882800000, 14127192000000, 14145937200000, 14158641600000, 14177386800000, 14190696000000, 14208836400000, 14222145600000, 14240286000000, 14253595200000, 14271735600000, 14285044800000, 14303185200000, 14316494400000 ]),
    Int32List.fromList([ -26248000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -25200000, -21600000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000, -21600000, -18000000 ]),
    [ 'EMT', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-07', '-06', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05', '-06', '-05' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final Timezone efate = DynamicTimezone(
    'Pacific/Efate',
    DynamicTimezoneSpan(
      -1,
      40396000,
      'LMT',
      TimezoneSpan.range.min,
      -1829387596,
      dst: false,
    ),
    Int64List.fromList([ -1829387596000, 125409600000, 133876800000, 433256400000, 448977600000, 464706000000, 480427200000, 496760400000, 511876800000, 528210000000, 543931200000, 559659600000, 575380800000, 591109200000, 606830400000, 622558800000, 638280000000, 654008400000, 669729600000, 686062800000, 696340800000, 719931600000, 727790400000 ]),
    Int32List.fromList([ 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000 ]),
    [ '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone enderbury = DynamicTimezone(
    'Pacific/Enderbury',
    DynamicTimezoneSpan(
      -1,
      0,
      '-00',
      TimezoneSpan.range.min,
      -1020470400,
      dst: false,
    ),
    Int64List.fromList([ -1020470400000, 307627200000, 788871600000 ]),
    Int32List.fromList([ -43200000, -39600000, 46800000 ]),
    [ '-12', '-11', '+13' ],
    [ false, false, false ],
  );

  static final Timezone fakaofo = DynamicTimezone(
    'Pacific/Fakaofo',
    DynamicTimezoneSpan(
      -1,
      -41096000,
      'LMT',
      TimezoneSpan.range.min,
      -2177411704,
      dst: false,
    ),
    Int64List.fromList([ -2177411704000, 1325242800000 ]),
    Int32List.fromList([ -39600000, 46800000 ]),
    [ '-11', '+13' ],
    [ false, false ],
  );

  static final Timezone fiji = DynamicTimezone(
    'Pacific/Fiji',
    DynamicTimezoneSpan(
      -1,
      42944000,
      'LMT',
      TimezoneSpan.range.min,
      -1709985344,
      dst: false,
    ),
    Int64List.fromList([ -1709985344000, 909842400000, 920124000000, 941896800000, 951573600000, 1259416800000, 1269698400000, 1287842400000, 1299333600000, 1319292000000, 1327154400000, 1350741600000, 1358604000000, 1382796000000, 1390050000000, 1414850400000, 1421503200000, 1446300000000, 1452952800000, 1478354400000, 1484402400000, 1509804000000, 1515852000000, 1541253600000, 1547301600000, 1573308000000, 1578751200000, 1608386400000, 1610805600000 ]),
    Int32List.fromList([ 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000, 46800000, 43200000 ]),
    [ '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12', '+13', '+12' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone funafuti = DynamicTimezone(
    'Pacific/Funafuti',
    DynamicTimezoneSpan(
      -1,
      41524000,
      'LMT',
      TimezoneSpan.range.min,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324000 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final Timezone galapagos = DynamicTimezone(
    'Pacific/Galapagos',
    DynamicTimezoneSpan(
      -1,
      -21504000,
      'LMT',
      TimezoneSpan.range.min,
      -1230746496,
      dst: false,
    ),
    Int64List.fromList([ -1230746496000, 504939600000, 722930400000, 728888400000 ]),
    Int32List.fromList([ -18000000, -21600000, -18000000, -21600000 ]),
    [ '-05', '-06', '-05', '-06' ],
    [ false, false, true, false ],
  );

  static final Timezone gambier = DynamicTimezone(
    'Pacific/Gambier',
    DynamicTimezoneSpan(
      -1,
      -32388000,
      'LMT',
      TimezoneSpan.range.min,
      -1806678012,
      dst: false,
    ),
    Int64List.fromList([ -1806678012000 ]),
    Int32List.fromList([ -32400000 ]),
    [ '-09' ],
    [ false ],
  );

  static final Timezone guadalcanal = DynamicTimezone(
    'Pacific/Guadalcanal',
    DynamicTimezoneSpan(
      -1,
      38388000,
      'LMT',
      TimezoneSpan.range.min,
      -1806748788,
      dst: false,
    ),
    Int64List.fromList([ -1806748788000 ]),
    Int32List.fromList([ 39600000 ]),
    [ '+11' ],
    [ false ],
  );

  static final Timezone guam = DynamicTimezone(
    'Pacific/Guam',
    DynamicTimezoneSpan(
      -1,
      -51660000,
      'LMT',
      TimezoneSpan.range.min,
      -3944626740,
      dst: false,
    ),
    Int64List.fromList([ -3944626740000, -2177487540000, -885549600000, -802256400000, -331891200000, -281610000000, -73728000000, -29415540000, -16704000000, -10659600000, 9907200000, 21394800000, 41356800000, 52844400000, 124819200000, 130863600000, 201888000000, 209487660000, 230659200000, 241542000000, 977493600000 ]),
    Int32List.fromList([ 34740000, 36000000, 32400000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 36000000 ]),
    [ 'LMT', 'GST', '+09', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'ChST' ],
    [ false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone honolulu = DynamicTimezone(
    'Pacific/Honolulu',
    DynamicTimezoneSpan(
      -1,
      -37886000,
      'LMT',
      TimezoneSpan.range.min,
      -2334101314,
      dst: false,
    ),
    Int64List.fromList([ -2334101314000, -1157283000000, -1155436200000, -880198200000, -769395600000, -765376200000, -712150200000 ]),
    Int32List.fromList([ -37800000, -34200000, -37800000, -34200000, -34200000, -37800000, -36000000 ]),
    [ 'HST', 'HDT', 'HST', 'HWT', 'HPT', 'HST', 'HST' ],
    [ false, true, false, true, true, false, false ],
  );

  static final Timezone johnston = DynamicTimezone(
    'Pacific/Johnston',
    DynamicTimezoneSpan(
      -1,
      -37886000,
      'LMT',
      TimezoneSpan.range.min,
      -2334101314,
      dst: false,
    ),
    Int64List.fromList([ -2334101314000, -1157283000000, -1155436200000, -880198200000, -769395600000, -765376200000, -712150200000 ]),
    Int32List.fromList([ -37800000, -34200000, -37800000, -34200000, -34200000, -37800000, -36000000 ]),
    [ 'HST', 'HDT', 'HST', 'HWT', 'HPT', 'HST', 'HST' ],
    [ false, true, false, true, true, false, false ],
  );

  static final Timezone kanton = DynamicTimezone(
    'Pacific/Kanton',
    DynamicTimezoneSpan(
      -1,
      0,
      '-00',
      TimezoneSpan.range.min,
      -1020470400,
      dst: false,
    ),
    Int64List.fromList([ -1020470400000, 307627200000, 788871600000 ]),
    Int32List.fromList([ -43200000, -39600000, 46800000 ]),
    [ '-12', '-11', '+13' ],
    [ false, false, false ],
  );

  static final Timezone kiritimati = DynamicTimezone(
    'Pacific/Kiritimati',
    DynamicTimezoneSpan(
      -1,
      -37760000,
      'LMT',
      TimezoneSpan.range.min,
      -2177415040,
      dst: false,
    ),
    Int64List.fromList([ -2177415040000, 307622400000, 788868000000 ]),
    Int32List.fromList([ -38400000, -36000000, 50400000 ]),
    [ '-1040', '-10', '+14' ],
    [ false, false, false ],
  );

  static final Timezone kosrae = DynamicTimezone(
    'Pacific/Kosrae',
    DynamicTimezoneSpan(
      -1,
      -47284000,
      'LMT',
      TimezoneSpan.range.min,
      -3944631116,
      dst: false,
    ),
    Int64List.fromList([ -3944631116000, -2177491916000, -1743678000000, -1606813200000, -1041418800000, -907408800000, -770634000000, -7988400000, 915105600000 ]),
    Int32List.fromList([ 39116000, 39600000, 32400000, 39600000, 36000000, 32400000, 39600000, 43200000, 39600000 ]),
    [ 'LMT', '+11', '+09', '+11', '+10', '+09', '+11', '+12', '+11' ],
    [ false, false, false, false, false, false, false, false, false ],
  );

  static final Timezone kwajalein = DynamicTimezone(
    'Pacific/Kwajalein',
    DynamicTimezoneSpan(
      -1,
      40160000,
      'LMT',
      TimezoneSpan.range.min,
      -2177492960,
      dst: false,
    ),
    Int64List.fromList([ -2177492960000, -1041418800000, -907408800000, -817462800000, -7988400000, 745934400000 ]),
    Int32List.fromList([ 39600000, 36000000, 32400000, 39600000, -43200000, 43200000 ]),
    [ '+11', '+10', '+09', '+11', '-12', '+12' ],
    [ false, false, false, false, false, false ],
  );

  static final Timezone majuro = DynamicTimezone(
    'Pacific/Majuro',
    DynamicTimezoneSpan(
      -1,
      41524000,
      'LMT',
      TimezoneSpan.range.min,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324000 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final Timezone marquesas = DynamicTimezone(
    'Pacific/Marquesas',
    DynamicTimezoneSpan(
      -1,
      -33480000,
      'LMT',
      TimezoneSpan.range.min,
      -1806676920,
      dst: false,
    ),
    Int64List.fromList([ -1806676920000 ]),
    Int32List.fromList([ -34200000 ]),
    [ '-0930' ],
    [ false ],
  );

  static final Timezone midway = DynamicTimezone(
    'Pacific/Midway',
    DynamicTimezoneSpan(
      -1,
      45432000,
      'LMT',
      TimezoneSpan.range.min,
      -2445424632,
      dst: false,
    ),
    Int64List.fromList([ -2445424632000, -1861879032000 ]),
    Int32List.fromList([ -40968000, -39600000 ]),
    [ 'LMT', 'SST' ],
    [ false, false ],
  );

  static final Timezone nauru = DynamicTimezone(
    'Pacific/Nauru',
    DynamicTimezoneSpan(
      -1,
      40060000,
      'LMT',
      TimezoneSpan.range.min,
      -1545131260,
      dst: false,
    ),
    Int64List.fromList([ -1545131260000, -862918200000, -767350800000, 287418600000 ]),
    Int32List.fromList([ 41400000, 32400000, 41400000, 43200000 ]),
    [ '+1130', '+09', '+1130', '+12' ],
    [ false, false, false, false ],
  );

  static final Timezone niue = DynamicTimezone(
    'Pacific/Niue',
    DynamicTimezoneSpan(
      -1,
      -40780000,
      'LMT',
      TimezoneSpan.range.min,
      -543069620,
      dst: false,
    ),
    Int64List.fromList([ -543069620000, -173623200000 ]),
    Int32List.fromList([ -40800000, -39600000 ]),
    [ '-1120', '-11' ],
    [ false, false ],
  );

  static final Timezone norfolk = DynamicTimezone(
    'Pacific/Norfolk',
    DynamicTimezoneSpan(
      -1,
      40312000,
      'LMT',
      TimezoneSpan.range.min,
      -2177493112,
      dst: false,
    ),
    Int64List.fromList([ -2177493112000, -599656320000, 152029800000, 162916200000, 1443882600000, 1561899600000, 1570287600000, 1586012400000, 1601737200000, 1617462000000, 1633186800000, 1648911600000, 1664636400000, 1680361200000, 1696086000000, 1712415600000, 1728140400000, 1743865200000, 1759590000000, 1775314800000, 1791039600000, 1806764400000, 1822489200000, 1838214000000, 1853938800000, 1869663600000, 1885993200000, 1901718000000, 1917442800000, 1933167600000, 1948892400000, 1964617200000, 1980342000000, 1996066800000, 2011791600000, 2027516400000, 2043241200000, 2058966000000, 2075295600000, 2091020400000, 2106745200000, 2122470000000, 2138194800000 ]),
    Int32List.fromList([ 40320000, 41400000, 45000000, 41400000, 39600000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000, 43200000 ]),
    [ '+1112', '+1130', '+1230', '+1130', '+11', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12', '+11', '+12' ],
    [ false, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final Timezone noumea = DynamicTimezone(
    'Pacific/Noumea',
    DynamicTimezoneSpan(
      -1,
      39948000,
      'LMT',
      TimezoneSpan.range.min,
      -1829387148,
      dst: false,
    ),
    Int64List.fromList([ -1829387148000, 250002000000, 257342400000, 281451600000, 288878400000, 849366000000, 857228400000 ]),
    Int32List.fromList([ 39600000, 43200000, 39600000, 43200000, 39600000, 43200000, 39600000 ]),
    [ '+11', '+12', '+11', '+12', '+11', '+12', '+11' ],
    [ false, true, false, true, false, true, false ],
  );

  static final Timezone pagoPago = DynamicTimezone(
    'Pacific/Pago_Pago',
    DynamicTimezoneSpan(
      -1,
      45432000,
      'LMT',
      TimezoneSpan.range.min,
      -2445424632,
      dst: false,
    ),
    Int64List.fromList([ -2445424632000, -1861879032000 ]),
    Int32List.fromList([ -40968000, -39600000 ]),
    [ 'LMT', 'SST' ],
    [ false, false ],
  );

  static final Timezone palau = DynamicTimezone(
    'Pacific/Palau',
    DynamicTimezoneSpan(
      -1,
      -54124000,
      'LMT',
      TimezoneSpan.range.min,
      -3944624276,
      dst: false,
    ),
    Int64List.fromList([ -3944624276000, -2177485076000 ]),
    Int32List.fromList([ 32276000, 32400000 ]),
    [ 'LMT', '+09' ],
    [ false, false ],
  );

  static final Timezone pitcairn = DynamicTimezone(
    'Pacific/Pitcairn',
    DynamicTimezoneSpan(
      -1,
      -31220000,
      'LMT',
      TimezoneSpan.range.min,
      -2177421580,
      dst: false,
    ),
    Int64List.fromList([ -2177421580000, 893665800000 ]),
    Int32List.fromList([ -30600000, -28800000 ]),
    [ '-0830', '-08' ],
    [ false, false ],
  );

  static final Timezone pohnpei = DynamicTimezone(
    'Pacific/Pohnpei',
    DynamicTimezoneSpan(
      -1,
      38388000,
      'LMT',
      TimezoneSpan.range.min,
      -1806748788,
      dst: false,
    ),
    Int64List.fromList([ -1806748788000 ]),
    Int32List.fromList([ 39600000 ]),
    [ '+11' ],
    [ false ],
  );

  static final Timezone ponape = DynamicTimezone(
    'Pacific/Ponape',
    DynamicTimezoneSpan(
      -1,
      38388000,
      'LMT',
      TimezoneSpan.range.min,
      -1806748788,
      dst: false,
    ),
    Int64List.fromList([ -1806748788000 ]),
    Int32List.fromList([ 39600000 ]),
    [ '+11' ],
    [ false ],
  );

  static final Timezone portMoresby = DynamicTimezone(
    'Pacific/Port_Moresby',
    DynamicTimezoneSpan(
      -1,
      35320000,
      'LMT',
      TimezoneSpan.range.min,
      -2840176120,
      dst: false,
    ),
    Int64List.fromList([ -2840176120000, -2366790512000 ]),
    Int32List.fromList([ 35312000, 36000000 ]),
    [ 'PMMT', '+10' ],
    [ false, false ],
  );

  static final Timezone rarotonga = DynamicTimezone(
    'Pacific/Rarotonga',
    DynamicTimezoneSpan(
      -1,
      48056000,
      'LMT',
      TimezoneSpan.range.min,
      -2209555256,
      dst: false,
    ),
    Int64List.fromList([ -2209555256000, -543072056000, 279714600000, 289387800000, 309952800000, 320837400000, 341402400000, 352287000000, 372852000000, 384341400000, 404906400000, 415791000000, 436356000000, 447240600000, 467805600000, 478690200000, 499255200000, 510139800000, 530704800000, 541589400000, 562154400000, 573643800000, 594208800000, 605093400000, 625658400000, 636543000000, 657108000000, 667992600000 ]),
    Int32List.fromList([ -38344000, -37800000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000, -34200000, -36000000 ]),
    [ 'LMT', '-1030', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10', '-0930', '-10' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone saipan = DynamicTimezone(
    'Pacific/Saipan',
    DynamicTimezoneSpan(
      -1,
      -51660000,
      'LMT',
      TimezoneSpan.range.min,
      -3944626740,
      dst: false,
    ),
    Int64List.fromList([ -3944626740000, -2177487540000, -885549600000, -802256400000, -331891200000, -281610000000, -73728000000, -29415540000, -16704000000, -10659600000, 9907200000, 21394800000, 41356800000, 52844400000, 124819200000, 130863600000, 201888000000, 209487660000, 230659200000, 241542000000, 977493600000 ]),
    Int32List.fromList([ 34740000, 36000000, 32400000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 39600000, 36000000, 36000000 ]),
    [ 'LMT', 'GST', '+09', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'GDT', 'GST', 'ChST' ],
    [ false, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false ],
  );

  static final Timezone samoa = DynamicTimezone(
    'Pacific/Samoa',
    DynamicTimezoneSpan(
      -1,
      45432000,
      'LMT',
      TimezoneSpan.range.min,
      -2445424632,
      dst: false,
    ),
    Int64List.fromList([ -2445424632000, -1861879032000 ]),
    Int32List.fromList([ -40968000, -39600000 ]),
    [ 'LMT', 'SST' ],
    [ false, false ],
  );

  static final Timezone tahiti = DynamicTimezone(
    'Pacific/Tahiti',
    DynamicTimezoneSpan(
      -1,
      -35896000,
      'LMT',
      TimezoneSpan.range.min,
      -1806674504,
      dst: false,
    ),
    Int64List.fromList([ -1806674504000 ]),
    Int32List.fromList([ -36000000 ]),
    [ '-10' ],
    [ false ],
  );

  static final Timezone tarawa = DynamicTimezone(
    'Pacific/Tarawa',
    DynamicTimezoneSpan(
      -1,
      41524000,
      'LMT',
      TimezoneSpan.range.min,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324000 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final Timezone tongatapu = DynamicTimezone(
    'Pacific/Tongatapu',
    DynamicTimezoneSpan(
      -1,
      44352000,
      'LMT',
      TimezoneSpan.range.min,
      -767189952,
      dst: false,
    ),
    Int64List.fromList([ -767189952000, -284041200000, 939214800000, 953384400000, 973342800000, 980596800000, 1004792400000, 1012046400000, 1478350800000, 1484398800000 ]),
    Int32List.fromList([ 44400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000, 50400000, 46800000 ]),
    [ '+1220', '+13', '+14', '+13', '+14', '+13', '+14', '+13', '+14', '+13' ],
    [ false, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone truk = DynamicTimezone(
    'Pacific/Truk',
    DynamicTimezoneSpan(
      -1,
      35320000,
      'LMT',
      TimezoneSpan.range.min,
      -2840176120,
      dst: false,
    ),
    Int64List.fromList([ -2840176120000, -2366790512000 ]),
    Int32List.fromList([ 35312000, 36000000 ]),
    [ 'PMMT', '+10' ],
    [ false, false ],
  );

  static final Timezone wake = DynamicTimezone(
    'Pacific/Wake',
    DynamicTimezoneSpan(
      -1,
      41524000,
      'LMT',
      TimezoneSpan.range.min,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324000 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final Timezone wallis = DynamicTimezone(
    'Pacific/Wallis',
    DynamicTimezoneSpan(
      -1,
      41524000,
      'LMT',
      TimezoneSpan.range.min,
      -2177494324,
      dst: false,
    ),
    Int64List.fromList([ -2177494324000 ]),
    Int32List.fromList([ 43200000 ]),
    [ '+12' ],
    [ false ],
  );

  static final Timezone yap = DynamicTimezone(
    'Pacific/Yap',
    DynamicTimezoneSpan(
      -1,
      35320000,
      'LMT',
      TimezoneSpan.range.min,
      -2840176120,
      dst: false,
    ),
    Int64List.fromList([ -2840176120000, -2366790512000 ]),
    Int32List.fromList([ 35312000, 36000000 ]),
    [ 'PMMT', '+10' ],
    [ false, false ],
  );

}


