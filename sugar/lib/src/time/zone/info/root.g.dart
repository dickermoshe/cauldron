// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/generate_timezones.dart
// **************************************************************************
// 
// ignore_for_file: type=lint

import 'dart:typed_data';

import 'package:sugar/src/time/offset.dart';
import 'package:sugar/src/time/zone/dynamic_timezone.dart';
import 'package:sugar/src/time/zone/fixed_timezone.dart';
import 'package:sugar/src/time/zone/timezone.dart';
import 'package:sugar/src/time/zone/timezone_span.dart';

extension Root on Never {
  static final Timezone cet = DynamicTimezone(
    'CET',
    DynamicTimezoneSpan(
      -1,
      3600000000,
      'CET',
      TimezoneSpan.range.min.value,
      -1693706400,
      dst: false,
    ),
    Int64List.fromList([ -1693706400, -1680483600, -1663455600, -1650150000, -1632006000, -1618700400, -938905200, -857257200, -844556400, -828226800, -812502000, -796777200, -781052400, -766623600, 228877200, 243997200, 260326800, 276051600, 291776400, 307501200, 323830800, 338950800, 354675600, 370400400, 386125200, 401850000, 417574800, 433299600, 449024400, 465354000, 481078800, 496803600, 512528400, 528253200, 543978000, 559702800, 575427600, 591152400, 606877200, 622602000, 638326800, 654656400, 670381200, 686106000, 701830800, 717555600, 733280400, 749005200, 764730000, 780454800, 796179600, 811904400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1 ]),
    3600000000,

    [ true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone cst6cdt = DynamicTimezone(
    'CST6CDT',
    DynamicTimezoneSpan(
      -1,
      -21600000000,
      'CST',
      TimezoneSpan.range.min.value,
      -1633276800,
      dst: false,
    ),
    Int64List.fromList([ -1633276800, -1615136400, -1601827200, -1583686800, -880214400, -769395600, -765392400, -84384000, -68662800, -52934400, -37213200, -21484800, -5763600, 9964800, 25686000, 41414400, 57740400, 73468800, 89190000, 104918400, 120639600, 126691200, 152089200, 162374400, 183538800, 199267200, 215593200, 230716800, 247042800, 262771200, 278492400, 294220800, 309942000, 325670400, 341391600, 357120000, 372841200, 388569600, 404895600, 420019200, 436345200, 452073600, 467794800, 483523200, 499244400, 514972800, 530694000, 544608000, 562143600, 576057600, 594198000, 607507200, 625647600, 638956800, 657097200, 671011200, 688546800, 702460800, 719996400, 733910400, 752050800, 765360000, 783500400, 796809600, 814950000, 828864000, 846399600, 860313600, 877849200, 891763200, 909298800, 923212800, 941353200, 954662400, 972802800, 986112000, 1004252400, 1018166400, 1035702000, 1049616000, 1067151600, 1081065600, 1099206000, 1112515200, 1130655600, 1143964800, 1162105200, 1173600000, 1194159600, 1205049600, 1225609200, 1236499200, 1257058800, 1268553600, 1289113200, 1300003200, 1320562800, 1331452800, 1352012400, 1362902400, 1383462000, 1394352000, 1414911600, 1425801600, 1446361200, 1457856000, 1478415600, 1489305600, 1509865200, 1520755200, 1541314800, 1552204800, 1572764400, 1583654400, 1604214000, 1615708800, 1636268400, 1647158400, 1667718000, 1678608000, 1699167600, 1710057600, 1730617200, 1741507200, 1762066800, 1772956800, 1793516400, 1805011200, 1825570800, 1836460800, 1857020400, 1867910400, 1888470000, 1899360000, 1919919600, 1930809600, 1951369200, 1962864000, 1983423600, 1994313600, 2014873200, 2025763200, 2046322800, 2057212800, 2077772400, 2088662400, 2109222000, 2120112000, 2140671600 ]),
    Int8List.fromList([ -5, -6, -5, -6, -5, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6, -5, -6 ]),
    3600000000,
    [ 'CDT', 'CST', 'CDT', 'CST', 'CWT', 'CPT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone cuba = DynamicTimezone(
    'Cuba',
    DynamicTimezoneSpan(
      -1,
      -19768000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2524501832,
      dst: false,
    ),
    Int64List.fromList([ -2524501832, -1402813824, -1311534000, -1300996800, -933534000, -925675200, -902084400, -893620800, -870030000, -862171200, -775681200, -767822400, -744231600, -736372800, -144702000, -134251200, -113425200, -102542400, -86295600, -72907200, -54154800, -41457600, -21495600, -5774400, 9954000, 25675200, 41403600, 57729600, 73458000, 87364800, 104907600, 118900800, 136357200, 150436800, 167806800, 183528000, 199256400, 215582400, 230706000, 247032000, 263365200, 276667200, 290581200, 308721600, 322030800, 340171200, 358318800, 371620800, 389768400, 403070400, 421218000, 434520000, 452667600, 466574400, 484117200, 498024000, 511333200, 529473600, 542782800, 560923200, 574837200, 592372800, 606286800, 623822400, 638946000, 655876800, 671000400, 687330000, 702450000, 718779600, 733899600, 750229200, 765349200, 781678800, 796798800, 813128400, 828853200, 844578000, 860302800, 876632400, 891147600, 909291600, 922597200, 941346000, 954651600, 972795600, 986101200, 1004245200, 1018155600, 1035694800, 1049605200, 1067144400, 1080450000, 1162098000, 1173589200, 1193547600, 1205643600, 1224997200, 1236488400, 1256446800, 1268542800, 1288501200, 1300597200, 1321160400, 1333256400, 1352005200, 1362891600, 1383454800, 1394341200, 1414904400, 1425790800, 1446354000, 1457845200, 1478408400, 1489294800, 1509858000, 1520744400, 1541307600, 1552194000, 1572757200, 1583643600, 1604206800, 1615698000, 1636261200, 1647147600, 1667710800, 1678597200, 1699160400, 1710046800, 1730610000, 1741496400, 1762059600, 1772946000, 1793509200, 1805000400, 1825563600, 1836450000, 1857013200, 1867899600, 1888462800, 1899349200, 1919912400, 1930798800, 1951362000, 1962853200, 1983416400, 1994302800, 2014866000, 2025752400, 2046315600, 2057202000, 2077765200, 2088651600, 2109214800, 2120101200, 2140664400 ]),
    Int32List.fromList
    1000000,

    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone eet = DynamicTimezone(
    'EET',
    DynamicTimezoneSpan(
      -1,
      7200000000,
      'EET',
      TimezoneSpan.range.min.value,
      228877200,
      dst: false,
    ),
    Int64List.fromList([ 228877200, 243997200, 260326800, 276051600, 291776400, 307501200, 323830800, 338950800, 354675600, 370400400, 386125200, 401850000, 417574800, 433299600, 449024400, 465354000, 481078800, 496803600, 512528400, 528253200, 543978000, 559702800, 575427600, 591152400, 606877200, 622602000, 638326800, 654656400, 670381200, 686106000, 701830800, 717555600, 733280400, 749005200, 764730000, 780454800, 796179600, 811904400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2 ]),
    3600000000,
    [ 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET' ],
    [ true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone est = FixedTimezone(
    'EST',
    FixedTimezoneSpan(
      const LiteralOffset('+00:00', -18000),
      'EST',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone est5edt = DynamicTimezone(
    'EST5EDT',
    DynamicTimezoneSpan(
      -1,
      -18000000000,
      'EST',
      TimezoneSpan.range.min.value,
      -1633280400,
      dst: false,
    ),
    Int64List.fromList([ -1633280400, -1615140000, -1601830800, -1583690400, -880218000, -769395600, -765396000, -84387600, -68666400, -52938000, -37216800, -21488400, -5767200, 9961200, 25682400, 41410800, 57736800, 73465200, 89186400, 104914800, 120636000, 126687600, 152085600, 162370800, 183535200, 199263600, 215589600, 230713200, 247039200, 262767600, 278488800, 294217200, 309938400, 325666800, 341388000, 357116400, 372837600, 388566000, 404892000, 420015600, 436341600, 452070000, 467791200, 483519600, 499240800, 514969200, 530690400, 544604400, 562140000, 576054000, 594194400, 607503600, 625644000, 638953200, 657093600, 671007600, 688543200, 702457200, 719992800, 733906800, 752047200, 765356400, 783496800, 796806000, 814946400, 828860400, 846396000, 860310000, 877845600, 891759600, 909295200, 923209200, 941349600, 954658800, 972799200, 986108400, 1004248800, 1018162800, 1035698400, 1049612400, 1067148000, 1081062000, 1099202400, 1112511600, 1130652000, 1143961200, 1162101600, 1173596400, 1194156000, 1205046000, 1225605600, 1236495600, 1257055200, 1268550000, 1289109600, 1299999600, 1320559200, 1331449200, 1352008800, 1362898800, 1383458400, 1394348400, 1414908000, 1425798000, 1446357600, 1457852400, 1478412000, 1489302000, 1509861600, 1520751600, 1541311200, 1552201200, 1572760800, 1583650800, 1604210400, 1615705200, 1636264800, 1647154800, 1667714400, 1678604400, 1699164000, 1710054000, 1730613600, 1741503600, 1762063200, 1772953200, 1793512800, 1805007600, 1825567200, 1836457200, 1857016800, 1867906800, 1888466400, 1899356400, 1919916000, 1930806000, 1951365600, 1962860400, 1983420000, 1994310000, 2014869600, 2025759600, 2046319200, 2057209200, 2077768800, 2088658800, 2109218400, 2120108400, 2140668000 ]),
    Int8List.fromList([ -4, -5, -4, -5, -4, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5, -4, -5 ]),
    3600000000,

    [ true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone egypt = DynamicTimezone(
    'Egypt',
    DynamicTimezoneSpan(
      -1,
      7509000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2185409109,
      dst: false,
    ),
    Int64List.fromList([ -2185409109, -929844000, -923108400, -906170400, -892868400, -875844000, -857790000, -844308000, -825822000, -812685600, -794199600, -779853600, -762663600, -399088800, -386650800, -368330400, -355114800, -336790800, -323654400, -305168400, -292032000, -273632400, -260496000, -242096400, -228960000, -210560400, -197424000, -178938000, -165801600, -147402000, -134265600, -115866000, -102643200, -84330000, -71107200, -52707600, -39484800, -21171600, -7948800, 10364400, 23587200, 41900400, 55123200, 73522800, 86745600, 105058800, 118281600, 136594800, 149817600, 168130800, 181353600, 199753200, 212976000, 231289200, 244512000, 262825200, 276048000, 294361200, 307584000, 325983600, 339206400, 357519600, 370742400, 396399600, 402278400, 426812400, 433814400, 452214000, 465436800, 483750000, 496972800, 515286000, 528508800, 546822000, 560044800, 578444400, 591667200, 610412400, 623203200, 641516400, 654739200, 673052400, 686275200, 704674800, 717897600, 736210800, 749433600, 767746800, 780969600, 799020000, 812322000, 830469600, 843771600, 861919200, 875221200, 893368800, 906670800, 925423200, 938725200, 956872800, 970174800, 988322400, 1001624400, 1019772000, 1033074000, 1051221600, 1064523600, 1083276000, 1096578000, 1114725600, 1128027600, 1146175200, 1158872400, 1177624800, 1189112400, 1209074400, 1219957200, 1240524000, 1250802000, 1272578400, 1281474000, 1284069600, 1285880400, 1400191200, 1403816400, 1406844000, 1411678800, 1682632800, 1698354000, 1714082400, 1730408400, 1745532000, 1761858000, 1776981600, 1793307600, 1809036000, 1824757200, 1840485600, 1856206800, 1871935200, 1887656400, 1903384800, 1919710800, 1934834400, 1951160400, 1966888800, 1982610000, 1998338400, 2014059600, 2029788000, 2045509200, 2061237600, 2076958800, 2092687200, 2109013200, 2124136800, 2140462800, 2156191200, 2171912400, 2187640800, 2203362000, 2219090400, 2234811600, 2250540000, 2266866000, 2281989600, 2298315600, 2313439200, 2329765200, 2345493600, 2361214800, 2376943200, 2392664400, 2408392800, 2424114000, 2439842400, 2456168400, 2471292000, 2487618000, 2503346400, 2519067600, 2534796000, 2550517200, 2566245600, 2581966800, 2597695200, 2614021200, 2629144800, 2645470800, 2660594400, 2676920400, 2692648800, 2708370000, 2724098400, 2739819600, 2755548000, 2771269200, 2786997600, 2803323600, 2818447200, 2834773200, 2850501600, 2866222800, 2881951200, 2897672400, 2913400800, 2929122000, 2944850400, 2960571600, 2976300000, 2992626000, 3007749600, 3024075600, 3039804000, 3055525200, 3071253600, 3086974800, 3102703200, 3118424400, 3134152800, 3150478800, 3165602400, 3181928400, 3197052000, 3213378000, 3229106400, 3244827600, 3260556000, 3276277200, 3292005600, 3307726800, 3323455200, 3339781200, 3354904800, 3371230800, 3386959200, 3402680400, 3418408800, 3434130000, 3449858400, 3465579600, 3481308000, 3497634000, 3512757600, 3529083600, 3544207200, 3560533200, 3576261600, 3591982800, 3607711200, 3623432400, 3639160800, 3654882000, 3670610400, 3686936400, 3702060000, 3718386000, 3734114400, 3749835600, 3765564000, 3781285200, 3797013600, 3812734800, 3828463200, 3844184400, 3859912800, 3876238800, 3891362400, 3907688400, 3923416800, 3939138000, 3954866400, 3970587600, 3986316000, 4002037200, 4017765600, 4034091600, 4049215200, 4065541200, 4080664800, 4096990800, 4112719200, 4128440400, 4144168800, 4159890000, 4175618400, 4191339600, 4207068000, 4222789200, 4238517600, 4254843600, 4269967200, 4286293200, 4302021600, 4317742800, 4333471200, 4349192400, 4364920800, 4380642000, 4396370400, 4412696400, 4427820000, 4444146000, 4459269600, 4475595600, 4491324000, 4507045200, 4522773600, 4538494800, 4554223200, 4569944400, 4585672800, 4601998800, 4617122400, 4633448400, 4649176800, 4664898000, 4680626400, 4696347600, 4712076000, 4727797200, 4743525600, 4759851600, 4774975200, 4791301200, 4806424800, 4822750800, 4838479200, 4854200400, 4869928800, 4885650000, 4901378400, 4917099600, 4932828000, 4949154000, 4964277600, 4980603600, 4996332000, 5012053200, 5027781600, 5043502800, 5059231200, 5074952400, 5090680800, 5106402000, 5122130400, 5138456400, 5153580000, 5169906000, 5185634400, 5201355600, 5217084000, 5232805200, 5248533600, 5264254800, 5279983200, 5296309200, 5311432800, 5327758800, 5342882400, 5359208400, 5374936800, 5390658000, 5406386400, 5422107600, 5437836000, 5453557200, 5469285600, 5485611600, 5500735200, 5517061200, 5532789600, 5548510800, 5564239200, 5579960400, 5595688800, 5611410000, 5627138400, 5643464400, 5658588000, 5674914000, 5690037600, 5706363600, 5722092000, 5737813200, 5753541600, 5769262800, 5784991200, 5800712400, 5816440800, 5832766800, 5847890400, 5864216400, 5879944800, 5895666000, 5911394400, 5927115600, 5942844000, 5958565200, 5974293600, 5990014800, 6005743200, 6022069200, 6037192800, 6053518800, 6069247200, 6084968400, 6100696800, 6116418000, 6132146400, 6147867600, 6163596000, 6179922000, 6195045600, 6211371600, 6226495200, 6242821200, 6258549600, 6274270800, 6289999200, 6305720400, 6321448800, 6337170000, 6352898400, 6369224400, 6384348000, 6400674000, 6416402400, 6432123600, 6447852000, 6463573200, 6479301600, 6495022800, 6510751200, 6527077200, 6542200800, 6558526800, 6573650400, 6589976400, 6605704800, 6621426000, 6637154400, 6652875600, 6668604000, 6684325200, 6700053600, 6716379600, 6731503200, 6747829200, 6763557600, 6779278800, 6795007200, 6810728400, 6826456800, 6842178000, 6857906400, 6873627600, 6889356000, 6905682000, 6920805600, 6937131600, 6952860000, 6968581200, 6984309600, 7000030800, 7015759200, 7031480400, 7047208800, 7063534800, 7078658400, 7094984400, 7110108000, 7126434000, 7142162400, 7157883600, 7173612000, 7189333200, 7205061600, 7220782800, 7236511200, 7252837200, 7267960800, 7284286800, 7299410400, 7315736400, 7331464800, 7347186000, 7362914400, 7378635600, 7394364000, 7410085200, 7425813600, 7442139600, 7457263200, 7473589200, 7488712800, 7505038800, 7520767200, 7536488400, 7552216800, 7567938000, 7583666400, 7599387600, 7615116000, 7631442000, 7646565600, 7662891600, 7678620000, 7694341200, 7710069600, 7725790800, 7741519200, 7757240400, 7772968800, 7789294800, 7804418400, 7820744400, 7835868000, 7852194000, 7867922400, 7883643600, 7899372000, 7915093200, 7930821600, 7946542800, 7962271200, 7978597200, 7993720800, 8010046800, 8025775200, 8041496400, 8057224800, 8072946000, 8088674400, 8104395600, 8120124000, 8135845200, 8151573600, 8167899600, 8183023200, 8199349200, 8215077600, 8230798800, 8246527200, 8262248400, 8277976800, 8293698000, 8309426400, 8325752400, 8340876000, 8357202000, 8372325600, 8388651600, 8404380000, 8420101200, 8435829600, 8451550800, 8467279200, 8483000400, 8498728800, 8515054800, 8530178400, 8546504400, 8562232800, 8577954000, 8593682400, 8609403600, 8625132000, 8640853200, 8656581600, 8672907600, 8688031200, 8704357200, 8719480800, 8735806800, 8751535200, 8767256400, 8782984800, 8798706000, 8814434400, 8830155600, 8845884000, 8862210000, 8877333600, 8893659600, 8909388000, 8925109200, 8940837600, 8956558800, 8972287200, 8988008400, 9003736800, 9019458000, 9035186400, 9051512400, 9066636000, 9082962000, 9098690400, 9114411600, 9130140000, 9145861200, 9161589600, 9177310800, 9193039200, 9209365200, 9224488800, 9240814800, 9255938400, 9272264400, 9287992800, 9303714000, 9319442400, 9335163600, 9350892000, 9366613200, 9382341600, 9398667600, 9413791200, 9430117200, 9445845600, 9461566800, 9477295200, 9493016400, 9508744800, 9524466000, 9540194400, 9556520400, 9571644000, 9587970000, 9603093600, 9619419600, 9635148000, 9650869200, 9666597600, 9682318800, 9698047200, 9713768400, 9729496800, 9745822800, 9760946400, 9777272400, 9793000800, 9808722000, 9824450400, 9840171600, 9855900000, 9871621200, 9887349600, 9903070800, 9918799200, 9935125200, 9950248800, 9966574800, 9982303200, 9998024400, 10013752800, 10029474000, 10045202400, 10060923600, 10076652000, 10092978000, 10108101600, 10124427600, 10139551200, 10155877200, 10171605600, 10187326800, 10203055200, 10218776400, 10234504800, 10250226000, 10265954400, 10282280400, 10297404000, 10313730000, 10329458400, 10345179600, 10360908000, 10376629200, 10392357600, 10408078800, 10423807200, 10439528400, 10455256800, 10471582800, 10486706400, 10503032400, 10518156000, 10534482000, 10550210400, 10565931600, 10581660000, 10597381200, 10613109600, 10628830800, 10644559200, 10660885200, 10676008800, 10692334800, 10708063200, 10723784400, 10739512800, 10755234000, 10770962400, 10786683600, 10802412000, 10818738000, 10833861600, 10850187600, 10865311200, 10881637200, 10897365600, 10913086800, 10928815200, 10944536400, 10960264800, 10975986000, 10991714400, 11008040400, 11023164000, 11039490000, 11055218400, 11070939600, 11086668000, 11102389200, 11118117600, 11133838800, 11149567200, 11165288400, 11181016800, 11197342800, 11212466400, 11228792400, 11244520800, 11260242000, 11275970400, 11291691600, 11307420000, 11323141200, 11338869600, 11355195600, 11370319200, 11386645200, 11401768800, 11418094800, 11433823200, 11449544400, 11465272800, 11480994000, 11496722400, 11512443600, 11528172000, 11544498000, 11559621600, 11575947600, 11591676000, 11607397200, 11623125600, 11638846800, 11654575200, 11670296400, 11686024800, 11702350800, 11717474400, 11733800400, 11748924000, 11765250000, 11780978400, 11796699600, 11812428000, 11828149200, 11843877600, 11859598800, 11875327200, 11891653200, 11906776800, 11923102800, 11938831200, 11954552400, 11970280800, 11986002000, 12001730400, 12017451600, 12033180000, 12048901200, 12064629600, 12080955600, 12096079200, 12112405200, 12128133600, 12143854800, 12159583200, 12175304400, 12191032800, 12206754000, 12222482400, 12238808400, 12253932000, 12270258000, 12285381600, 12301707600, 12317436000, 12333157200, 12348885600, 12364606800, 12380335200, 12396056400, 12411784800, 12428110800, 12443234400, 12459560400, 12475288800, 12491010000, 12506738400, 12522459600, 12538188000, 12553909200, 12569637600, 12585963600, 12601087200, 12617413200, 12632536800, 12648862800, 12664591200, 12680312400, 12696040800, 12711762000, 12727490400, 12743211600, 12758940000, 12775266000, 12790389600, 12806715600, 12822444000, 12838165200, 12853893600, 12869614800, 12885343200, 12901064400, 12916792800, 12932514000, 12948242400, 12964568400, 12979692000, 12996018000, 13011746400, 13027467600, 13043196000, 13058917200, 13074645600, 13090366800, 13106095200, 13122421200, 13137544800, 13153870800, 13168994400, 13185320400, 13201048800, 13216770000, 13232498400, 13248219600, 13263948000, 13279669200, 13295397600, 13311723600, 13326847200, 13343173200, 13358901600, 13374622800, 13390351200, 13406072400, 13421800800, 13437522000, 13453250400, 13469576400, 13484700000, 13501026000, 13516149600, 13532475600, 13548204000, 13563925200, 13579653600, 13595374800, 13611103200, 13626824400, 13642552800, 13658878800, 13674002400, 13690328400, 13706056800, 13721778000, 13737506400, 13753227600, 13768956000, 13784677200, 13800405600, 13816126800, 13831855200, 13848181200, 13863304800, 13879630800, 13895359200, 13911080400, 13926808800, 13942530000, 13958258400, 13973979600, 13989708000, 14006034000, 14021157600, 14037483600, 14052607200, 14068933200, 14084661600, 14100382800, 14116111200, 14131832400, 14147560800, 14163282000, 14179010400, 14195336400, 14210460000, 14226786000, 14242514400, 14258235600, 14273964000, 14289685200, 14305413600, 14321134800 ]),
    Int8List.fromList([ 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2 ]),
    3600000000,

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone eire = DynamicTimezone(
    'Eire',
    DynamicTimezoneSpan(
      -1,
      -1521000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2821649679,
      dst: false,
    ),
    Int64List.fromList([ -2821649679, -1691962479, -1680471279, -1664143200, -1650146400, -1633903200, -1617487200, -1601848800, -1586037600, -1570399200, -1552168800, -1538344800, -1522533600, -1517011200, -1507500000, -1490565600, -1473631200, -1460930400, -1442786400, -1428876000, -1410732000, -1396216800, -1379282400, -1364767200, -1348437600, -1333317600, -1315778400, -1301263200, -1284328800, -1269813600, -1253484000, -1238364000, -1221429600, -1206914400, -1189980000, -1175464800, -1159135200, -1143410400, -1126476000, -1111960800, -1095631200, -1080511200, -1063576800, -1049061600, -1032127200, -1017612000, -1001282400, -986162400, -969228000, -950479200, -942012000, -733356000, -719445600, -699487200, -684972000, -668037600, -654732000, -636588000, -622072800, -605743200, -590623200, -574293600, -558568800, -542239200, -527119200, -512604000, -496274400, -481154400, -464220000, -449704800, -432165600, -417650400, -401320800, -386200800, -369266400, -354751200, -337816800, -323301600, -306972000, -291852000, -276732000, -257983200, -245282400, -226533600, -213228000, -195084000, -182383200, -163634400, -150933600, -132184800, -119484000, -100735200, -88034400, -68680800, -59004000, -37242000, 57722400, 69818400, 89172000, 101268000, 120621600, 132717600, 152071200, 164167200, 183520800, 196221600, 214970400, 227671200, 246420000, 259120800, 278474400, 290570400, 309924000, 322020000, 341373600, 354675600, 372819600, 386125200, 404269200, 417574800, 435718800, 449024400, 467773200, 481078800, 499222800, 512528400, 530672400, 543978000, 562122000, 575427600, 593571600, 606877200, 625626000, 638326800, 657075600, 670381200, 688525200, 701830800, 719974800, 733280400, 751424400, 764730000, 782874000, 796179600, 814323600, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int32List.fromList([ -1521, 2079, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0, 3600, 0 ]),
    1000000,
    [ 'DMT', 'IST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT', 'IST', 'GMT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final Timezone factory = FixedTimezone(
    'Factory',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      '-00',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone gb = DynamicTimezone(
    'GB',
    DynamicTimezoneSpan(
      -1,
      -75000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -3852662325,
      dst: false,
    ),
    Int64List.fromList([ -3852662325, -1691964000, -1680472800, -1664143200, -1650146400, -1633903200, -1617487200, -1601848800, -1586037600, -1570399200, -1552168800, -1538344800, -1522533600, -1507500000, -1490565600, -1473631200, -1460930400, -1442786400, -1428876000, -1410732000, -1396216800, -1379282400, -1364767200, -1348437600, -1333317600, -1315778400, -1301263200, -1284328800, -1269813600, -1253484000, -1238364000, -1221429600, -1206914400, -1189980000, -1175464800, -1159135200, -1143410400, -1126476000, -1111960800, -1095631200, -1080511200, -1063576800, -1049061600, -1032127200, -1017612000, -1001282400, -986162400, -969228000, -950479200, -942012000, -904518000, -896050800, -875487600, -864601200, -844038000, -832546800, -812588400, -798073200, -781052400, -772066800, -764805600, -748476000, -733356000, -719445600, -717030000, -706748400, -699487200, -687996000, -668037600, -654732000, -636588000, -622072800, -605743200, -590623200, -574293600, -558568800, -542239200, -527119200, -512604000, -496274400, -481154400, -464220000, -449704800, -432165600, -417650400, -401320800, -386200800, -369266400, -354751200, -337816800, -323301600, -306972000, -291852000, -276732000, -257983200, -245282400, -226533600, -213228000, -195084000, -182383200, -163634400, -150933600, -132184800, -119484000, -100735200, -88034400, -68680800, -59004000, -37242000, 57722400, 69818400, 89172000, 101268000, 120621600, 132717600, 152071200, 164167200, 183520800, 196221600, 214970400, 227671200, 246420000, 259120800, 278474400, 290570400, 309924000, 322020000, 341373600, 354675600, 372819600, 386125200, 404269200, 417574800, 435718800, 449024400, 467773200, 481078800, 499222800, 512528400, 530672400, 543978000, 562122000, 575427600, 593571600, 606877200, 625626000, 638326800, 657075600, 670381200, 688525200, 701830800, 719974800, 733280400, 751424400, 764730000, 782874000, 796179600, 814323600, 820454400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ]),
    3600000000,
    [ 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'BDST', 'BST', 'BDST', 'BST', 'BDST', 'BST', 'BDST', 'BST', 'BDST', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'BDST', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone gbEire = DynamicTimezone(
    'GB-Eire',
    DynamicTimezoneSpan(
      -1,
      -75000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -3852662325,
      dst: false,
    ),
    Int64List.fromList([ -3852662325, -1691964000, -1680472800, -1664143200, -1650146400, -1633903200, -1617487200, -1601848800, -1586037600, -1570399200, -1552168800, -1538344800, -1522533600, -1507500000, -1490565600, -1473631200, -1460930400, -1442786400, -1428876000, -1410732000, -1396216800, -1379282400, -1364767200, -1348437600, -1333317600, -1315778400, -1301263200, -1284328800, -1269813600, -1253484000, -1238364000, -1221429600, -1206914400, -1189980000, -1175464800, -1159135200, -1143410400, -1126476000, -1111960800, -1095631200, -1080511200, -1063576800, -1049061600, -1032127200, -1017612000, -1001282400, -986162400, -969228000, -950479200, -942012000, -904518000, -896050800, -875487600, -864601200, -844038000, -832546800, -812588400, -798073200, -781052400, -772066800, -764805600, -748476000, -733356000, -719445600, -717030000, -706748400, -699487200, -687996000, -668037600, -654732000, -636588000, -622072800, -605743200, -590623200, -574293600, -558568800, -542239200, -527119200, -512604000, -496274400, -481154400, -464220000, -449704800, -432165600, -417650400, -401320800, -386200800, -369266400, -354751200, -337816800, -323301600, -306972000, -291852000, -276732000, -257983200, -245282400, -226533600, -213228000, -195084000, -182383200, -163634400, -150933600, -132184800, -119484000, -100735200, -88034400, -68680800, -59004000, -37242000, 57722400, 69818400, 89172000, 101268000, 120621600, 132717600, 152071200, 164167200, 183520800, 196221600, 214970400, 227671200, 246420000, 259120800, 278474400, 290570400, 309924000, 322020000, 341373600, 354675600, 372819600, 386125200, 404269200, 417574800, 435718800, 449024400, 467773200, 481078800, 499222800, 512528400, 530672400, 543978000, 562122000, 575427600, 593571600, 606877200, 625626000, 638326800, 657075600, 670381200, 688525200, 701830800, 719974800, 733280400, 751424400, 764730000, 782874000, 796179600, 814323600, 820454400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ]),
    3600000000,
    [ 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'BDST', 'BST', 'BDST', 'BST', 'BDST', 'BST', 'BDST', 'BST', 'BDST', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'BDST', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT', 'BST', 'GMT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone gmt = FixedTimezone(
    'GMT',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'GMT',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone gmtPlus0 = FixedTimezone(
    'GMT+0',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'GMT',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone gmtMinus0 = FixedTimezone(
    'GMT-0',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'GMT',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone gmt0 = FixedTimezone(
    'GMT0',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'GMT',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone greenwich = FixedTimezone(
    'Greenwich',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'GMT',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone hst = FixedTimezone(
    'HST',
    FixedTimezoneSpan(
      const LiteralOffset('+00:00', -36000),
      'HST',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone hongkong = DynamicTimezone(
    'Hongkong',
    DynamicTimezoneSpan(
      -1,
      27402000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2056690800,
      dst: false,
    ),
    Int64List.fromList([ -2056690800, -900910800, -891579600, -884248200, -761209200, -747907200, -728541000, -717049800, -697091400, -683785800, -668061000, -654755400, -636611400, -623305800, -605161800, -591856200, -573712200, -559801800, -541657800, -528352200, -510211800, -498112200, -478762200, -466662600, -446707800, -435213000, -415258200, -403158600, -383808600, -371709000, -352359000, -340259400, -320909400, -308809800, -288855000, -277360200, -257405400, -245910600, -225955800, -213856200, -194506200, -182406600, -163056600, -148537800, -132816600, -117088200, -101367000, -85638600, -69312600, -53584200, -37863000, -22134600, -6413400, 9315000, 25036200, 40764600, 56485800, 72214200, 88540200, 104268600, 119989800, 126041400, 151439400, 167167800, 182889000, 198617400, 214338600, 295385400, 309292200 ]),
    Int16List.fromList([ 480, 540, 510, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480, 540, 480 ]),
    60000000,
    [ 'HKT', 'HKST', 'HKWT', 'JST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT', 'HKST', 'HKT' ],
    [ false, true, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone iceland = DynamicTimezone(
    'Iceland',
    DynamicTimezoneSpan(
      -1,
      -968000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int8List.fromList([ 0 ]),
    3600000000,
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone iran = DynamicTimezone(
    'Iran',
    DynamicTimezoneSpan(
      -1,
      12344000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -1704165944,
      dst: false,
    ),
    Int64List.fromList([ -1704165944, -1090466744, 227820600, 246223800, 259617600, 271108800, 283982400, 296598600, 306531000, 322432200, 338499000, 673216200, 685481400, 701209800, 717103800, 732745800, 748639800, 764281800, 780175800, 795817800, 811711800, 827353800, 843247800, 858976200, 874870200, 890512200, 906406200, 922048200, 937942200, 953584200, 969478200, 985206600, 1001100600, 1016742600, 1032636600, 1048278600, 1064172600, 1079814600, 1095708600, 1111437000, 1127331000, 1206045000, 1221939000, 1237667400, 1253561400, 1269203400, 1285097400, 1300739400, 1316633400, 1332275400, 1348169400, 1363897800, 1379791800, 1395433800, 1411327800, 1426969800, 1442863800, 1458505800, 1474399800, 1490128200, 1506022200, 1521664200, 1537558200, 1553200200, 1569094200, 1584736200, 1600630200, 1616358600, 1632252600, 1647894600, 1663788600 ]),
    Int32List.fromList([ 12344, 12600, 16200, 14400, 18000, 14400, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600, 16200, 12600 ]),
    1000000,

    [ false, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone israel = DynamicTimezone(
    'Israel',
    DynamicTimezoneSpan(
      -1,
      8454000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2840149254,
      dst: false,
    ),
    Int64List.fromList([ -2840149254, -1641003640, -933638400, -923097600, -919036800, -857347200, -844300800, -825811200, -812678400, -794188800, -779846400, -762652800, -748310400, -731116800, -681955200, -673228800, -667958400, -652320000, -636422400, -622080000, -608947200, -591840000, -572486400, -558576000, -542851200, -527731200, -514425600, -490838400, -482976000, -459388800, -451526400, -428544000, -418262400, -400118400, -387417600, 142380000, 150843600, 167176800, 178664400, 334101600, 337730400, 452642400, 462319200, 482277600, 494370000, 516751200, 526424400, 545436000, 558478800, 576626400, 589323600, 609890400, 620773200, 638316000, 651618000, 669765600, 683672400, 701820000, 715726800, 733701600, 747176400, 765151200, 778021200, 796600800, 810075600, 826840800, 842821200, 858895200, 874184400, 890344800, 905029200, 923011200, 936313200, 955670400, 970783200, 986770800, 1001282400, 1017356400, 1033941600, 1048806000, 1065132000, 1081292400, 1095804000, 1112313600, 1128812400, 1143763200, 1159657200, 1175212800, 1189897200, 1206662400, 1223161200, 1238112000, 1254006000, 1269561600, 1284246000, 1301616000, 1317510000, 1333065600, 1348354800, 1364515200, 1382828400, 1395964800, 1414278000, 1427414400, 1445727600, 1458864000, 1477782000, 1490313600, 1509231600, 1521763200, 1540681200, 1553817600, 1572130800, 1585267200, 1603580400, 1616716800, 1635634800, 1648166400, 1667084400, 1679616000, 1698534000, 1711670400, 1729983600, 1743120000, 1761433200, 1774569600, 1792882800, 1806019200, 1824937200, 1837468800, 1856386800, 1868918400, 1887836400, 1900972800, 1919286000, 1932422400, 1950735600, 1963872000, 1982790000, 1995321600, 2014239600, 2026771200, 2045689200, 2058220800, 2077138800, 2090275200, 2108588400, 2121724800, 2140038000, 2153174400, 2172092400, 2184624000, 2203542000, 2216073600, 2234991600, 2248128000, 2266441200, 2279577600, 2297890800, 2311027200, 2329340400, 2342476800, 2361394800, 2373926400, 2392844400, 2405376000, 2424294000, 2437430400, 2455743600, 2468880000, 2487193200, 2500329600, 2519247600, 2531779200, 2550697200, 2563228800, 2582146800, 2595283200, 2613596400, 2626732800, 2645046000, 2658182400, 2676495600, 2689632000, 2708550000, 2721081600, 2739999600, 2752531200, 2771449200, 2784585600, 2802898800, 2816035200, 2834348400, 2847484800, 2866402800, 2878934400, 2897852400, 2910384000, 2929302000, 2941833600, 2960751600, 2973888000, 2992201200, 3005337600, 3023650800, 3036787200, 3055705200, 3068236800, 3087154800, 3099686400, 3118604400, 3131740800, 3150054000, 3163190400, 3181503600, 3194640000, 3212953200, 3226089600, 3245007600, 3257539200, 3276457200, 3288988800, 3307906800, 3321043200, 3339356400, 3352492800, 3370806000, 3383942400, 3402860400, 3415392000, 3434310000, 3446841600, 3465759600, 3478896000, 3497209200, 3510345600, 3528658800, 3541795200, 3560108400, 3573244800, 3592162800, 3604694400, 3623612400, 3636144000, 3655062000, 3668198400, 3686511600, 3699648000, 3717961200, 3731097600, 3750015600, 3762547200, 3781465200, 3793996800, 3812914800, 3825446400, 3844364400, 3857500800, 3875814000, 3888950400, 3907263600, 3920400000, 3939318000, 3951849600, 3970767600, 3983299200, 4002217200, 4015353600, 4033666800, 4046803200, 4065116400, 4078252800, 4096566000, 4109702400, 4128620400, 4141152000, 4160070000, 4172601600, 4191519600, 4204051200, 4222969200, 4236105600, 4254418800, 4267555200, 4285868400, 4299004800, 4317922800, 4330454400, 4349372400, 4361904000, 4380822000, 4393958400, 4412271600, 4425408000, 4443721200, 4456857600, 4475170800, 4488307200, 4507225200, 4519756800, 4538674800, 4551206400, 4570124400, 4583260800, 4601574000, 4614710400, 4633023600, 4646160000, 4665078000, 4677609600, 4696527600, 4709059200, 4727977200, 4741113600, 4759426800, 4772563200, 4790876400, 4804012800, 4822326000, 4835462400, 4854380400, 4866912000, 4885830000, 4898361600, 4917279600, 4930416000, 4948729200, 4961865600, 4980178800, 4993315200, 5012233200, 5024764800, 5043682800, 5056214400, 5075132400, 5087664000, 5106582000, 5119718400, 5138031600, 5151168000, 5169481200, 5182617600, 5201535600, 5214067200, 5232985200, 5245516800, 5264434800, 5277571200, 5295884400, 5309020800, 5327334000, 5340470400, 5358783600, 5371920000, 5390838000, 5403369600, 5422287600, 5434819200, 5453737200, 5466873600, 5485186800, 5498323200, 5516636400, 5529772800, 5548690800, 5561222400, 5580140400, 5592672000, 5611590000, 5624726400, 5643039600, 5656176000, 5674489200, 5687625600, 5705938800, 5719075200, 5737993200, 5750524800, 5769442800, 5781974400, 5800892400, 5814028800, 5832342000, 5845478400, 5863791600, 5876928000, 5895846000, 5908377600, 5927295600, 5939827200, 5958745200, 5971276800, 5990194800, 6003331200, 6021644400, 6034780800, 6053094000, 6066230400, 6085148400, 6097680000, 6116598000, 6129129600, 6148047600, 6161184000, 6179497200, 6192633600, 6210946800, 6224083200, 6242396400, 6255532800, 6274450800, 6286982400, 6305900400, 6318432000, 6337350000, 6350486400, 6368799600, 6381936000, 6400249200, 6413385600, 6432303600, 6444835200, 6463753200, 6476284800, 6495202800, 6508339200, 6526652400, 6539788800, 6558102000, 6571238400, 6589551600, 6602688000, 6621606000, 6634137600, 6653055600, 6665587200, 6684505200, 6697641600, 6715954800, 6729091200, 6747404400, 6760540800, 6779458800, 6791990400, 6810908400, 6823440000, 6842358000, 6854889600, 6873807600, 6886944000, 6905257200, 6918393600, 6936706800, 6949843200, 6968761200, 6981292800, 7000210800, 7012742400, 7031660400, 7044796800, 7063110000, 7076246400, 7094559600, 7107696000, 7126009200, 7139145600, 7158063600, 7170595200, 7189513200, 7202044800, 7220962800, 7234099200, 7252412400, 7265548800, 7283862000, 7296998400, 7315311600, 7328448000, 7347366000, 7359897600, 7378815600, 7391347200, 7410265200, 7423401600, 7441714800, 7454851200, 7473164400, 7486300800, 7504614000, 7517750400, 7536668400, 7549200000, 7568118000, 7580649600, 7599567600, 7612704000, 7631017200, 7644153600, 7662466800, 7675603200, 7694521200, 7707052800, 7725970800, 7738502400, 7757420400, 7770556800, 7788870000, 7802006400, 7820319600, 7833456000, 7851769200, 7864905600, 7883823600, 7896355200, 7915273200, 7927804800, 7946722800, 7959859200, 7978172400, 7991308800, 8009622000, 8022758400, 8041676400, 8054208000, 8073126000, 8085657600, 8104575600, 8117107200, 8136025200, 8149161600, 8167474800, 8180611200, 8198924400, 8212060800, 8230978800, 8243510400, 8262428400, 8274960000, 8293878000, 8307014400, 8325327600, 8338464000, 8356777200, 8369913600, 8388226800, 8401363200, 8420281200, 8432812800, 8451730800, 8464262400, 8483180400, 8496316800, 8514630000, 8527766400, 8546079600, 8559216000, 8578134000, 8590665600, 8609583600, 8622115200, 8641033200, 8654169600, 8672482800, 8685619200, 8703932400, 8717068800, 8735382000, 8748518400, 8767436400, 8779968000, 8798886000, 8811417600, 8830335600, 8843472000, 8861785200, 8874921600, 8893234800, 8906371200, 8925289200, 8937820800, 8956738800, 8969270400, 8988188400, 9000720000, 9019638000, 9032774400, 9051087600, 9064224000, 9082537200, 9095673600, 9114591600, 9127123200, 9146041200, 9158572800, 9177490800, 9190627200, 9208940400, 9222076800, 9240390000, 9253526400, 9271839600, 9284976000, 9303894000, 9316425600, 9335343600, 9347875200, 9366793200, 9379929600, 9398242800, 9411379200, 9429692400, 9442828800, 9461746800, 9474278400, 9493196400, 9505728000, 9524646000, 9537782400, 9556095600, 9569232000, 9587545200, 9600681600, 9618994800, 9632131200, 9651049200, 9663580800, 9682498800, 9695030400, 9713948400, 9727084800, 9745398000, 9758534400, 9776847600, 9789984000, 9808902000, 9821433600, 9840351600, 9852883200, 9871801200, 9884332800, 9903250800, 9916387200, 9934700400, 9947836800, 9966150000, 9979286400, 9998204400, 10010736000, 10029654000, 10042185600, 10061103600, 10074240000, 10092553200, 10105689600, 10124002800, 10137139200, 10155452400, 10168588800, 10187506800, 10200038400, 10218956400, 10231488000, 10250406000, 10263542400, 10281855600, 10294992000, 10313305200, 10326441600, 10345359600, 10357891200, 10376809200, 10389340800, 10408258800, 10420790400, 10439708400, 10452844800, 10471158000, 10484294400, 10502607600, 10515744000, 10534057200, 10547193600, 10566111600, 10578643200, 10597561200, 10610092800, 10629010800, 10642147200, 10660460400, 10673596800, 10691910000, 10705046400, 10723964400, 10736496000, 10755414000, 10767945600, 10786863600, 10800000000, 10818313200, 10831449600, 10849762800, 10862899200, 10881212400, 10894348800, 10913266800, 10925798400, 10944716400, 10957248000, 10976166000, 10989302400, 11007615600, 11020752000, 11039065200, 11052201600, 11071119600, 11083651200, 11102569200, 11115100800, 11134018800, 11146550400, 11165468400, 11178604800, 11196918000, 11210054400, 11228367600, 11241504000, 11260422000, 11272953600, 11291871600, 11304403200, 11323321200, 11336457600, 11354770800, 11367907200, 11386220400, 11399356800, 11417670000, 11430806400, 11449724400, 11462256000, 11481174000, 11493705600, 11512623600, 11525760000, 11544073200, 11557209600, 11575522800, 11588659200, 11607577200, 11620108800, 11639026800, 11651558400, 11670476400, 11683612800, 11701926000, 11715062400, 11733375600, 11746512000, 11764825200, 11777961600, 11796879600, 11809411200, 11828329200, 11840860800, 11859778800, 11872915200, 11891228400, 11904364800, 11922678000, 11935814400, 11954732400, 11967264000, 11986182000, 11998713600, 12017631600, 12030163200, 12049081200, 12062217600, 12080530800, 12093667200, 12111980400, 12125116800, 12144034800, 12156566400, 12175484400, 12188016000, 12206934000, 12220070400, 12238383600, 12251520000, 12269833200, 12282969600, 12301282800, 12314419200, 12333337200, 12345868800, 12364786800, 12377318400, 12396236400, 12409372800, 12427686000, 12440822400, 12459135600, 12472272000, 12491190000, 12503721600, 12522639600, 12535171200, 12554089200, 12567225600, 12585538800, 12598675200, 12616988400, 12630124800, 12648438000, 12661574400, 12680492400, 12693024000, 12711942000, 12724473600, 12743391600, 12756528000, 12774841200, 12787977600, 12806290800, 12819427200, 12838345200, 12850876800, 12869794800, 12882326400, 12901244400, 12913776000, 12932694000, 12945830400, 12964143600, 12977280000, 12995593200, 13008729600, 13027647600, 13040179200, 13059097200, 13071628800, 13090546800, 13103683200, 13121996400, 13135132800, 13153446000, 13166582400, 13184895600, 13198032000, 13216950000, 13229481600, 13248399600, 13260931200, 13279849200, 13292985600, 13311298800, 13324435200, 13342748400, 13355884800, 13374802800, 13387334400, 13406252400, 13418784000, 13437702000, 13450838400, 13469151600, 13482288000, 13500601200, 13513737600, 13532050800, 13545187200, 13564105200, 13576636800, 13595554800, 13608086400, 13627004400, 13640140800, 13658454000, 13671590400, 13689903600, 13703040000, 13721958000, 13734489600, 13753407600, 13765939200, 13784857200, 13797388800, 13816306800, 13829443200, 13847756400, 13860892800, 13879206000, 13892342400, 13911260400, 13923792000, 13942710000, 13955241600, 13974159600, 13987296000, 14005609200 ]),
    Int32List.fromList([ 8440, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 14400, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200 ]),
    1000000,
    [ 'JMT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDDT', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST', 'IDT', 'IST' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone jamaica = DynamicTimezone(
    'Jamaica',
    DynamicTimezoneSpan(
      -1,
      -18430000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2524503170,
      dst: false,
    ),
    Int64List.fromList([ -2524503170, -1827687170, 126687600, 152085600, 162370800, 183535200, 199263600, 215589600, 230713200, 247039200, 262767600, 278488800, 294217200, 309938400, 325666800, 341388000, 357116400, 372837600, 388566000, 404892000, 420015600, 436341600 ]),
    Int32List.fromList([ -18430, -18000, -14400, -18000, -14400, -18000, -14400, -18000, -14400, -18000, -14400, -18000, -14400, -18000, -14400, -18000, -14400, -18000, -14400, -18000, -14400, -18000 ]),
    1000000,
    [ 'KMT', 'EST', 'EDT', 'EST', 'EDT', 'EST', 'EDT', 'EST', 'EDT', 'EST', 'EDT', 'EST', 'EDT', 'EST', 'EDT', 'EST', 'EDT', 'EST', 'EDT', 'EST', 'EDT', 'EST' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone japan = DynamicTimezone(
    'Japan',
    DynamicTimezoneSpan(
      -1,
      33539000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2587712400,
      dst: false,
    ),
    Int64List.fromList([ -2587712400, -683802000, -672310800, -654771600, -640861200, -620298000, -609411600, -588848400, -577962000 ]),
    Int8List.fromList([ 9, 10, 9, 10, 9, 10, 9, 10, 9 ]),
    3600000000,
    [ 'JST', 'JDT', 'JST', 'JDT', 'JST', 'JDT', 'JST', 'JDT', 'JST' ],
    [ false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone kwajalein = DynamicTimezone(
    'Kwajalein',
    DynamicTimezoneSpan(
      -1,
      40160000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2177492960,
      dst: false,
    ),
    Int64List.fromList([ -2177492960, -1041418800, -907408800, -817462800, -7988400, 745934400 ]),
    Int8List.fromList([ 11, 10, 9, 11, -12, 12 ]),
    3600000000,
    [ '+11', '+10', '+09', '+11', '-12', '+12' ],
    [ false, false, false, false, false, false ],
  );

  static final Timezone libya = DynamicTimezone(
    'Libya',
    DynamicTimezoneSpan(
      -1,
      3164000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -1577926364,
      dst: false,
    ),
    Int64List.fromList([ -1577926364, -574902000, -568087200, -512175600, -504928800, -449888400, -441856800, -347158800, 378684000, 386463600, 402271200, 417999600, 433807200, 449622000, 465429600, 481590000, 496965600, 512953200, 528674400, 544230000, 560037600, 575852400, 591660000, 607388400, 623196000, 641775600, 844034400, 860108400, 875916000, 1352505600, 1364515200, 1382659200 ]),
    Int8List.fromList([ 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2 ]),
    3600000000,
    [ 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'EET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'EET', 'CET', 'CEST', 'EET', 'CET', 'CEST', 'EET' ],
    [ false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false ],
  );

  static final Timezone met = DynamicTimezone(
    'MET',
    DynamicTimezoneSpan(
      -1,
      3600000000,
      'MET',
      TimezoneSpan.range.min.value,
      -1693706400,
      dst: false,
    ),
    Int64List.fromList([ -1693706400, -1680483600, -1663455600, -1650150000, -1632006000, -1618700400, -938905200, -857257200, -844556400, -828226800, -812502000, -796777200, -781052400, -766623600, 228877200, 243997200, 260326800, 276051600, 291776400, 307501200, 323830800, 338950800, 354675600, 370400400, 386125200, 401850000, 417574800, 433299600, 449024400, 465354000, 481078800, 496803600, 512528400, 528253200, 543978000, 559702800, 575427600, 591152400, 606877200, 622602000, 638326800, 654656400, 670381200, 686106000, 701830800, 717555600, 733280400, 749005200, 764730000, 780454800, 796179600, 811904400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1 ]),
    3600000000,

    [ true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone mst = FixedTimezone(
    'MST',
    FixedTimezoneSpan(
      const LiteralOffset('+00:00', -25200),
      'MST',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone mst7mdt = DynamicTimezone(
    'MST7MDT',
    DynamicTimezoneSpan(
      -1,
      -25200000000,
      'MST',
      TimezoneSpan.range.min.value,
      -1633273200,
      dst: false,
    ),
    Int64List.fromList([ -1633273200, -1615132800, -1601823600, -1583683200, -880210800, -769395600, -765388800, -84380400, -68659200, -52930800, -37209600, -21481200, -5760000, 9968400, 25689600, 41418000, 57744000, 73472400, 89193600, 104922000, 120643200, 126694800, 152092800, 162378000, 183542400, 199270800, 215596800, 230720400, 247046400, 262774800, 278496000, 294224400, 309945600, 325674000, 341395200, 357123600, 372844800, 388573200, 404899200, 420022800, 436348800, 452077200, 467798400, 483526800, 499248000, 514976400, 530697600, 544611600, 562147200, 576061200, 594201600, 607510800, 625651200, 638960400, 657100800, 671014800, 688550400, 702464400, 720000000, 733914000, 752054400, 765363600, 783504000, 796813200, 814953600, 828867600, 846403200, 860317200, 877852800, 891766800, 909302400, 923216400, 941356800, 954666000, 972806400, 986115600, 1004256000, 1018170000, 1035705600, 1049619600, 1067155200, 1081069200, 1099209600, 1112518800, 1130659200, 1143968400, 1162108800, 1173603600, 1194163200, 1205053200, 1225612800, 1236502800, 1257062400, 1268557200, 1289116800, 1300006800, 1320566400, 1331456400, 1352016000, 1362906000, 1383465600, 1394355600, 1414915200, 1425805200, 1446364800, 1457859600, 1478419200, 1489309200, 1509868800, 1520758800, 1541318400, 1552208400, 1572768000, 1583658000, 1604217600, 1615712400, 1636272000, 1647162000, 1667721600, 1678611600, 1699171200, 1710061200, 1730620800, 1741510800, 1762070400, 1772960400, 1793520000, 1805014800, 1825574400, 1836464400, 1857024000, 1867914000, 1888473600, 1899363600, 1919923200, 1930813200, 1951372800, 1962867600, 1983427200, 1994317200, 2014876800, 2025766800, 2046326400, 2057216400, 2077776000, 2088666000, 2109225600, 2120115600, 2140675200 ]),
    Int8List.fromList([ -6, -7, -6, -7, -6, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7 ]),
    3600000000,
    [ 'MDT', 'MST', 'MDT', 'MST', 'MWT', 'MPT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST' ],
    [ true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone nz = DynamicTimezone(
    'NZ',
    DynamicTimezoneSpan(
      -1,
      41944000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -3192435544,
      dst: false,
    ),
    Int64List.fromList([ -3192435544, -1330335000, -1320057000, -1300699800, -1287396000, -1269250200, -1255946400, -1237800600, -1224496800, -1206351000, -1192442400, -1174901400, -1160992800, -1143451800, -1125914400, -1112607000, -1094464800, -1081157400, -1063015200, -1049707800, -1031565600, -1018258200, -1000116000, -986808600, -968061600, -955359000, -936612000, -923304600, -757425600, 152632800, 162309600, 183477600, 194968800, 215532000, 226418400, 246981600, 257868000, 278431200, 289317600, 309880800, 320767200, 341330400, 352216800, 372780000, 384271200, 404834400, 415720800, 436284000, 447170400, 467733600, 478620000, 499183200, 510069600, 530632800, 541519200, 562082400, 573573600, 594136800, 605023200, 623772000, 637682400, 655221600, 669132000, 686671200, 700581600, 718120800, 732636000, 749570400, 764085600, 781020000, 795535200, 812469600, 826984800, 844524000, 858434400, 875973600, 889884000, 907423200, 921938400, 938872800, 953388000, 970322400, 984837600, 1002376800, 1016287200, 1033826400, 1047736800, 1065276000, 1079791200, 1096725600, 1111240800, 1128175200, 1142690400, 1159624800, 1174140000, 1191074400, 1207404000, 1222524000, 1238853600, 1253973600, 1270303200, 1285423200, 1301752800, 1316872800, 1333202400, 1348927200, 1365256800, 1380376800, 1396706400, 1411826400, 1428156000, 1443276000, 1459605600, 1474725600, 1491055200, 1506175200, 1522504800, 1538229600, 1554559200, 1569679200, 1586008800, 1601128800, 1617458400, 1632578400, 1648908000, 1664028000, 1680357600, 1695477600, 1712412000, 1727532000, 1743861600, 1758981600, 1775311200, 1790431200, 1806760800, 1821880800, 1838210400, 1853330400, 1869660000, 1885384800, 1901714400, 1916834400, 1933164000, 1948284000, 1964613600, 1979733600, 1996063200, 2011183200, 2027512800, 2042632800, 2058962400, 2074687200, 2091016800, 2106136800, 2122466400, 2137586400 ]),
    Int16List.fromList([ 690, 750, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 690, 720, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780, 720, 780 ]),
    60000000,
    [ 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZMT', 'NZST', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT', 'NZST', 'NZDT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final Timezone nzChat = DynamicTimezone(
    'NZ-CHAT',
    DynamicTimezoneSpan(
      -1,
      44028000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -3192437628,
      dst: false,
    ),
    Int64List.fromList([ -3192437628, -757426500, 152632800, 162309600, 183477600, 194968800, 215532000, 226418400, 246981600, 257868000, 278431200, 289317600, 309880800, 320767200, 341330400, 352216800, 372780000, 384271200, 404834400, 415720800, 436284000, 447170400, 467733600, 478620000, 499183200, 510069600, 530632800, 541519200, 562082400, 573573600, 594136800, 605023200, 623772000, 637682400, 655221600, 669132000, 686671200, 700581600, 718120800, 732636000, 749570400, 764085600, 781020000, 795535200, 812469600, 826984800, 844524000, 858434400, 875973600, 889884000, 907423200, 921938400, 938872800, 953388000, 970322400, 984837600, 1002376800, 1016287200, 1033826400, 1047736800, 1065276000, 1079791200, 1096725600, 1111240800, 1128175200, 1142690400, 1159624800, 1174140000, 1191074400, 1207404000, 1222524000, 1238853600, 1253973600, 1270303200, 1285423200, 1301752800, 1316872800, 1333202400, 1348927200, 1365256800, 1380376800, 1396706400, 1411826400, 1428156000, 1443276000, 1459605600, 1474725600, 1491055200, 1506175200, 1522504800, 1538229600, 1554559200, 1569679200, 1586008800, 1601128800, 1617458400, 1632578400, 1648908000, 1664028000, 1680357600, 1695477600, 1712412000, 1727532000, 1743861600, 1758981600, 1775311200, 1790431200, 1806760800, 1821880800, 1838210400, 1853330400, 1869660000, 1885384800, 1901714400, 1916834400, 1933164000, 1948284000, 1964613600, 1979733600, 1996063200, 2011183200, 2027512800, 2042632800, 2058962400, 2074687200, 2091016800, 2106136800, 2122466400, 2137586400 ]),
    Int16List.fromList([ 735, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825, 765, 825 ]),
    60000000,

    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true ],
  );

  static final Timezone navajo = DynamicTimezone(
    'Navajo',
    DynamicTimezoneSpan(
      -1,
      -25196000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2717643600,
      dst: false,
    ),
    Int64List.fromList([ -2717643600, -1633273200, -1615132800, -1601823600, -1583683200, -1570374000, -1551628800, -1538924400, -1534089600, -880210800, -769395600, -765388800, -147884400, -131558400, -116434800, -100108800, -84380400, -68659200, -52930800, -37209600, -21481200, -5760000, 9968400, 25689600, 41418000, 57744000, 73472400, 89193600, 104922000, 120643200, 126694800, 152092800, 162378000, 183542400, 199270800, 215596800, 230720400, 247046400, 262774800, 278496000, 294224400, 309945600, 325674000, 341395200, 357123600, 372844800, 388573200, 404899200, 420022800, 436348800, 452077200, 467798400, 483526800, 499248000, 514976400, 530697600, 544611600, 562147200, 576061200, 594201600, 607510800, 625651200, 638960400, 657100800, 671014800, 688550400, 702464400, 720000000, 733914000, 752054400, 765363600, 783504000, 796813200, 814953600, 828867600, 846403200, 860317200, 877852800, 891766800, 909302400, 923216400, 941356800, 954666000, 972806400, 986115600, 1004256000, 1018170000, 1035705600, 1049619600, 1067155200, 1081069200, 1099209600, 1112518800, 1130659200, 1143968400, 1162108800, 1173603600, 1194163200, 1205053200, 1225612800, 1236502800, 1257062400, 1268557200, 1289116800, 1300006800, 1320566400, 1331456400, 1352016000, 1362906000, 1383465600, 1394355600, 1414915200, 1425805200, 1446364800, 1457859600, 1478419200, 1489309200, 1509868800, 1520758800, 1541318400, 1552208400, 1572768000, 1583658000, 1604217600, 1615712400, 1636272000, 1647162000, 1667721600, 1678611600, 1699171200, 1710061200, 1730620800, 1741510800, 1762070400, 1772960400, 1793520000, 1805014800, 1825574400, 1836464400, 1857024000, 1867914000, 1888473600, 1899363600, 1919923200, 1930813200, 1951372800, 1962867600, 1983427200, 1994317200, 2014876800, 2025766800, 2046326400, 2057216400, 2077776000, 2088666000, 2109225600, 2120115600, 2140675200 ]),
    Int8List.fromList([ -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7, -6, -7 ]),
    3600000000,
    [ 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MWT', 'MPT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST', 'MDT', 'MST' ],
    [ false, true, false, true, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone prc = DynamicTimezone(
    'PRC',
    DynamicTimezoneSpan(
      -1,
      29143000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2177481943,
      dst: false,
    ),
    Int64List.fromList([ -2177481943, -1600675200, -1585904400, -933667200, -922093200, -908870400, -888829200, -881049600, -767869200, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -650019600, 515527200, 527014800, 545162400, 558464400, 577216800, 589914000, 608666400, 621968400, 640116000, 653418000, 671565600, 684867600 ]),
    Int8List.fromList([ 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone pst8pdt = DynamicTimezone(
    'PST8PDT',
    DynamicTimezoneSpan(
      -1,
      -28800000000,
      'PST',
      TimezoneSpan.range.min.value,
      -1633269600,
      dst: false,
    ),
    Int64List.fromList([ -1633269600, -1615129200, -1601820000, -1583679600, -880207200, -769395600, -765385200, -84376800, -68655600, -52927200, -37206000, -21477600, -5756400, 9972000, 25693200, 41421600, 57747600, 73476000, 89197200, 104925600, 120646800, 126698400, 152096400, 162381600, 183546000, 199274400, 215600400, 230724000, 247050000, 262778400, 278499600, 294228000, 309949200, 325677600, 341398800, 357127200, 372848400, 388576800, 404902800, 420026400, 436352400, 452080800, 467802000, 483530400, 499251600, 514980000, 530701200, 544615200, 562150800, 576064800, 594205200, 607514400, 625654800, 638964000, 657104400, 671018400, 688554000, 702468000, 720003600, 733917600, 752058000, 765367200, 783507600, 796816800, 814957200, 828871200, 846406800, 860320800, 877856400, 891770400, 909306000, 923220000, 941360400, 954669600, 972810000, 986119200, 1004259600, 1018173600, 1035709200, 1049623200, 1067158800, 1081072800, 1099213200, 1112522400, 1130662800, 1143972000, 1162112400, 1173607200, 1194166800, 1205056800, 1225616400, 1236506400, 1257066000, 1268560800, 1289120400, 1300010400, 1320570000, 1331460000, 1352019600, 1362909600, 1383469200, 1394359200, 1414918800, 1425808800, 1446368400, 1457863200, 1478422800, 1489312800, 1509872400, 1520762400, 1541322000, 1552212000, 1572771600, 1583661600, 1604221200, 1615716000, 1636275600, 1647165600, 1667725200, 1678615200, 1699174800, 1710064800, 1730624400, 1741514400, 1762074000, 1772964000, 1793523600, 1805018400, 1825578000, 1836468000, 1857027600, 1867917600, 1888477200, 1899367200, 1919926800, 1930816800, 1951376400, 1962871200, 1983430800, 1994320800, 2014880400, 2025770400, 2046330000, 2057220000, 2077779600, 2088669600, 2109229200, 2120119200, 2140678800 ]),
    Int8List.fromList([ -7, -8, -7, -8, -7, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8, -7, -8 ]),
    3600000000,
    [ 'PDT', 'PST', 'PDT', 'PST', 'PWT', 'PPT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST', 'PDT', 'PST' ],
    [ true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone poland = DynamicTimezone(
    'Poland',
    DynamicTimezoneSpan(
      -1,
      5040000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2840145840,
      dst: false,
    ),
    Int64List.fromList([ -2840145840, -1717032240, -1693706400, -1680483600, -1663455600, -1650150000, -1632006000, -1618700400, -1600473600, -1587168000, -1501725600, -931734000, -857257200, -844556400, -828226800, -812502000, -796874400, -796608000, -778726800, -762660000, -748486800, -733273200, -715215600, -701910000, -684975600, -670460400, -654130800, -639010800, -397094400, -386812800, -371088000, -355363200, -334195200, -323308800, -307584000, -291859200, -271296000, -260409600, -239846400, -228960000, -208396800, -197510400, -176342400, -166060800, 220921200, 228873600, 243993600, 260323200, 276048000, 291772800, 307497600, 323827200, 338947200, 354672000, 370396800, 386121600, 401846400, 417571200, 433296000, 449020800, 465350400, 481075200, 496800000, 512524800, 528249600, 543974400, 559699200, 567990000, 575427600, 591152400, 606877200, 622602000, 638326800, 654656400, 670381200, 686106000, 701830800, 717555600, 733280400, 749005200, 764730000, 780454800, 796179600, 811904400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int16List.fromList([ 84, 60, 120, 60, 120, 60, 120, 120, 180, 120, 60, 120, 60, 120, 60, 120, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60, 120, 60 ]),
    60000000,
    [ 'WMT', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'EET', 'EEST', 'EET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET' ],
    [ false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone portugal = DynamicTimezone(
    'Portugal',
    DynamicTimezoneSpan(
      -1,
      -2205000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -1830384000,
      dst: false,
    ),
    Int64List.fromList([ -1830384000, -1689555600, -1677801600, -1667437200, -1647738000, -1635814800, -1616202000, -1604365200, -1584666000, -1572742800, -1553043600, -1541206800, -1521507600, -1442451600, -1426813200, -1379293200, -1364778000, -1348448400, -1333328400, -1316394000, -1301274000, -1284339600, -1269824400, -1221440400, -1206925200, -1191200400, -1175475600, -1127696400, -1111971600, -1096851600, -1080522000, -1063587600, -1049072400, -1033347600, -1017622800, -1002502800, -986173200, -969238800, -950490000, -942022800, -922669200, -906944400, -891133200, -877309200, -873684000, -864007200, -857955600, -845859600, -842839200, -831348000, -825901200, -814410000, -810784800, -799898400, -794451600, -782960400, -779335200, -768448800, -763002000, -749091600, -733366800, -717631200, -701906400, -686181600, -670456800, -654732000, -639007200, -623282400, -607557600, -591832800, -575503200, -559778400, -544053600, -528328800, -512604000, -496879200, -481154400, -465429600, -449704800, -433980000, -417650400, -401925600, -386200800, -370476000, -354751200, -339026400, -323301600, -307576800, -291852000, -276127200, -260402400, -244677600, -228348000, -212623200, -196898400, -181173600, -165448800, -149724000, -133999200, -118274400, 212544000, 228268800, 243993600, 260323200, 276048000, 291772800, 307501200, 323222400, 338950800, 354675600, 370400400, 386125200, 401850000, 417578400, 433299600, 449024400, 465354000, 481078800, 496803600, 512528400, 528253200, 543978000, 559702800, 575427600, 591152400, 606877200, 622602000, 638326800, 654656400, 670381200, 686106000, 701830800, 717555600, 733280400, 749005200, 764730000, 780454800, 796179600, 811904400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 2, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 2, 1, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ]),
    3600000000,

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, true, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone roc = DynamicTimezone(
    'ROC',
    DynamicTimezoneSpan(
      -1,
      29160000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2335248360,
      dst: false,
    ),
    Int64List.fromList([ -2335248360, -1017820800, -766224000, -745833600, -733827600, -716889600, -699613200, -683884800, -670669200, -652348800, -639133200, -620812800, -607597200, -589276800, -576061200, -562924800, -541760400, -528710400, -510224400, -497174400, -478688400, -465638400, -449830800, -434016000, -418208400, -402480000, -386672400, -370944000, -355136400, -339408000, -323600400, -302515200, -291978000, -270979200, -260442000, 133977600, 149785200, 165513600, 181321200, 299606400, 307551600 ]),
    Int8List.fromList([ 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8, 9, 8 ]),
    3600000000,
    [ 'CST', 'JST', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST', 'CDT', 'CST' ],
    [ false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone rok = DynamicTimezone(
    'ROK',
    DynamicTimezoneSpan(
      -1,
      30472000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -1948782472,
      dst: false,
    ),
    Int64List.fromList([ -1948782472, -1830414600, -767350800, -681210000, -672228000, -654771600, -640864800, -623408400, -609415200, -588848400, -577965600, -498128400, -462702600, -451733400, -429784200, -418296600, -399544200, -387451800, -368094600, -356002200, -336645000, -324552600, -305195400, -293103000, -264933000, 547578000, 560883600, 579027600, 592333200 ]),
    Int16List.fromList([ 510, 540, 540, 600, 540, 600, 540, 600, 540, 600, 540, 510, 570, 510, 570, 510, 570, 510, 570, 510, 570, 510, 570, 510, 540, 600, 540, 600, 540 ]),
    60000000,
    [ 'KST', 'JST', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KDT', 'KST', 'KST', 'KDT', 'KST', 'KDT', 'KST' ],
    [ false, false, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false ],
  );

  static final Timezone singapore = DynamicTimezone(
    'Singapore',
    DynamicTimezoneSpan(
      -1,
      24925000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2177477725,
      dst: false,
    ),
    Int64List.fromList([ -2177477725, -2038200925, -1167634800, -1073028000, -894180000, -879665400, -767005200, 378662400 ]),
    Int32List.fromList([ 24925, 25200, 26400, 26400, 27000, 32400, 27000, 28800 ]),
    1000000,
    [ 'SMT', '+07', '+0720', '+0720', '+0730', '+09', '+0730', '+08' ],
    [ false, false, true, false, false, false, false, false ],
  );

  static final Timezone turkey = DynamicTimezone(
    'Turkey',
    DynamicTimezoneSpan(
      -1,
      6952000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2840147752,
      dst: false,
    ),
    Int64List.fromList([ -2840147752, -1869875816, -1693706400, -1680490800, -1570413600, -1552186800, -1538359200, -1522551600, -1507514400, -1490583600, -1440208800, -1428030000, -1409709600, -1396494000, -931053600, -922676400, -917834400, -892436400, -875844000, -764737200, -744343200, -733806000, -716436000, -701924400, -684986400, -670474800, -654141600, -639025200, -622087200, -606970800, -590032800, -575521200, -235620000, -194842800, -177732000, -165726000, 107910000, 121215600, 133920000, 152665200, 164678400, 184114800, 196214400, 215564400, 228873600, 245804400, 260323200, 267915600, 428454000, 433893600, 468111600, 482799600, 496710000, 512521200, 528246000, 543970800, 559695600, 575420400, 591145200, 606870000, 622594800, 638319600, 654649200, 670374000, 686098800, 701823600, 717548400, 733273200, 748998000, 764118000, 780447600, 796172400, 811897200, 828226800, 846370800, 859676400, 877820400, 891126000, 909270000, 922575600, 941324400, 954025200, 972774000, 985474800, 1004223600, 1017529200, 1035673200, 1048978800, 1067122800, 1080428400, 1099177200, 1111878000, 1130626800, 1143327600, 1162076400, 1167602400, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301274000, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396227600, 1414285200, 1427590800, 1446944400, 1459040400, 1473195600 ]),
    Int32List.fromList([ 7016, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 10800, 14400, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 7200, 10800, 10800 ]),
    1000000,
    [ 'IMT', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', '+03', '+04', '+03', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', 'EET', 'EEST', '+03' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone uct = FixedTimezone(
    'UCT',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'UTC',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone utc = FixedTimezone(
    'UTC',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'UTC',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone universal = FixedTimezone(
    'Universal',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'UTC',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

  static final Timezone wSu = DynamicTimezone(
    'W-SU',
    DynamicTimezoneSpan(
      -1,
      9017000000,
      'LMT',
      TimezoneSpan.range.min.value,
      -2840149817,
      dst: false,
    ),
    Int64List.fromList([ -2840149817, -1688265017, -1656819079, -1641353479, -1627965079, -1618716679, -1596429079, -1593820800, -1589860800, -1542427200, -1539493200, -1525323600, -1522728000, -1491188400, -1247536800, 354920400, 370728000, 386456400, 402264000, 417992400, 433800000, 449614800, 465346800, 481071600, 496796400, 512521200, 528246000, 543970800, 559695600, 575420400, 591145200, 606870000, 622594800, 638319600, 654649200, 670374000, 686102400, 695779200, 701823600, 717548400, 733273200, 748998000, 764722800, 780447600, 796172400, 811897200, 828226800, 846370800, 859676400, 877820400, 891126000, 909270000, 922575600, 941324400, 954025200, 972774000, 985474800, 1004223600, 1017529200, 1035673200, 1048978800, 1067122800, 1080428400, 1099177200, 1111878000, 1130626800, 1143327600, 1162076400, 1174777200, 1193526000, 1206831600, 1224975600, 1238281200, 1256425200, 1269730800, 1288479600, 1301180400, 1414274400 ]),
    Int32List.fromList([ 9017, 9079, 12679, 9079, 16279, 12679, 16279, 14400, 10800, 14400, 18000, 14400, 10800, 7200, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 10800, 7200, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800, 14400, 10800 ]),
    1000000,
    [ 'MMT', 'MMT', 'MST', 'MMT', 'MDST', 'MST', 'MDST', 'MSD', 'MSK', 'MSD', '+05', 'MSD', 'MSK', 'EET', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'EEST', 'EET', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSD', 'MSK', 'MSK', 'MSK' ],
    [ false, false, true, false, true, true, true, true, false, true, true, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone wet = DynamicTimezone(
    'WET',
    DynamicTimezoneSpan(
      -1,
      0,
      'WET',
      TimezoneSpan.range.min.value,
      228877200,
      dst: false,
    ),
    Int64List.fromList([ 228877200, 243997200, 260326800, 276051600, 291776400, 307501200, 323830800, 338950800, 354675600, 370400400, 386125200, 401850000, 417574800, 433299600, 449024400, 465354000, 481078800, 496803600, 512528400, 528253200, 543978000, 559702800, 575427600, 591152400, 606877200, 622602000, 638326800, 654656400, 670381200, 686106000, 701830800, 717555600, 733280400, 749005200, 764730000, 780454800, 796179600, 811904400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int8List.fromList([ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ]),
    3600000000,

    [ true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone zulu = FixedTimezone(
    'Zulu',
    FixedTimezoneSpan(
      const LiteralOffset('Z', 0),
      'UTC',
      TimezoneSpan.range.min.value,
      TimezoneSpan.range.max.value,
      dst: false,
    ),
  );

}


