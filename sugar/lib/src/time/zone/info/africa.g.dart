// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/generate_timezones.dart
// **************************************************************************
// 
// ignore_for_file: type=lint

import 'dart:typed_data';

import 'package:sugar/src/time/offset.dart';
import 'package:sugar/src/time/zone/dynamic_timezone.dart';
import 'package:sugar/src/time/zone/fixed_timezone.dart';
import 'package:sugar/src/time/zone/timezone.dart';
import 'package:sugar/src/time/zone/timezone_span.dart';

extension Africa on Never {
  static final Timezone abidjan = DynamicTimezone(
    'Africa/Abidjan',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone accra = DynamicTimezone(
    'Africa/Accra',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone addisAbaba = DynamicTimezone(
    'Africa/Addis_Ababa',
    DynamicTimezoneSpan(
      -1,
      8836000,
      'LMT',
      TimezoneSpan.range.min,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836000, -1309746600000, -1261969200000, -1041388200000, -865305900000 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final Timezone algiers = DynamicTimezone(
    'Africa/Algiers',
    DynamicTimezoneSpan(
      -1,
      732000,
      'LMT',
      TimezoneSpan.range.min,
      -2486592732,
      dst: false,
    ),
    Int64List.fromList([ -2486592732000, -1855958961000, -1689814800000, -1680397200000, -1665363600000, -1648342800000, -1635123600000, -1616893200000, -1604278800000, -1585443600000, -1574038800000, -1552266000000, -1539997200000, -1531443600000, -956365200000, -950486400000, -942012000000, -812502000000, -796262400000, -781052400000, -766630800000, -733280400000, -439430400000, -212029200000, 41468400000, 54774000000, 231724800000, 246236400000, 259545600000, 275274000000, 309740400000, 325468800000, 341802000000, 357523200000 ]),
    Int32List.fromList([ 561000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 7200000, 3600000, 7200000, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 3600000, 7200000, 3600000, 0, 3600000, 0, 3600000 ]),
    [ 'PMT', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'WET', 'CET', 'WET', 'WEST', 'WET', 'WEST', 'CET', 'CEST', 'CET', 'WET', 'WEST', 'WET', 'CET' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false ],
  );

  static final Timezone asmara = DynamicTimezone(
    'Africa/Asmara',
    DynamicTimezoneSpan(
      -1,
      8836000,
      'LMT',
      TimezoneSpan.range.min,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836000, -1309746600000, -1261969200000, -1041388200000, -865305900000 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final Timezone asmera = DynamicTimezone(
    'Africa/Asmera',
    DynamicTimezoneSpan(
      -1,
      8836000,
      'LMT',
      TimezoneSpan.range.min,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836000, -1309746600000, -1261969200000, -1041388200000, -865305900000 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final Timezone bamako = DynamicTimezone(
    'Africa/Bamako',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone bangui = DynamicTimezone(
    'Africa/Bangui',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone banjul = DynamicTimezone(
    'Africa/Banjul',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone bissau = DynamicTimezone(
    'Africa/Bissau',
    DynamicTimezoneSpan(
      -1,
      -3740000,
      'LMT',
      TimezoneSpan.range.min,
      -1830380400,
      dst: false,
    ),
    Int64List.fromList([ -1830380400000, 157770000000 ]),
    Int32List.fromList([ -3600000, 0 ]),
    [ '-01', 'GMT' ],
    [ false, false ],
  );

  static final Timezone blantyre = DynamicTimezone(
    'Africa/Blantyre',
    DynamicTimezoneSpan(
      -1,
      7820000,
      'LMT',
      TimezoneSpan.range.min,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020000 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final Timezone brazzaville = DynamicTimezone(
    'Africa/Brazzaville',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone bujumbura = DynamicTimezone(
    'Africa/Bujumbura',
    DynamicTimezoneSpan(
      -1,
      7820000,
      'LMT',
      TimezoneSpan.range.min,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020000 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final Timezone cairo = DynamicTimezone(
    'Africa/Cairo',
    DynamicTimezoneSpan(
      -1,
      7509000,
      'LMT',
      TimezoneSpan.range.min,
      -2185409109,
      dst: false,
    ),
    Int64List.fromList([ -2185409109000, -929844000000, -923108400000, -906170400000, -892868400000, -875844000000, -857790000000, -844308000000, -825822000000, -812685600000, -794199600000, -779853600000, -762663600000, -399088800000, -386650800000, -368330400000, -355114800000, -336790800000, -323654400000, -305168400000, -292032000000, -273632400000, -260496000000, -242096400000, -228960000000, -210560400000, -197424000000, -178938000000, -165801600000, -147402000000, -134265600000, -115866000000, -102643200000, -84330000000, -71107200000, -52707600000, -39484800000, -21171600000, -7948800000, 10364400000, 23587200000, 41900400000, 55123200000, 73522800000, 86745600000, 105058800000, 118281600000, 136594800000, 149817600000, 168130800000, 181353600000, 199753200000, 212976000000, 231289200000, 244512000000, 262825200000, 276048000000, 294361200000, 307584000000, 325983600000, 339206400000, 357519600000, 370742400000, 396399600000, 402278400000, 426812400000, 433814400000, 452214000000, 465436800000, 483750000000, 496972800000, 515286000000, 528508800000, 546822000000, 560044800000, 578444400000, 591667200000, 610412400000, 623203200000, 641516400000, 654739200000, 673052400000, 686275200000, 704674800000, 717897600000, 736210800000, 749433600000, 767746800000, 780969600000, 799020000000, 812322000000, 830469600000, 843771600000, 861919200000, 875221200000, 893368800000, 906670800000, 925423200000, 938725200000, 956872800000, 970174800000, 988322400000, 1001624400000, 1019772000000, 1033074000000, 1051221600000, 1064523600000, 1083276000000, 1096578000000, 1114725600000, 1128027600000, 1146175200000, 1158872400000, 1177624800000, 1189112400000, 1209074400000, 1219957200000, 1240524000000, 1250802000000, 1272578400000, 1281474000000, 1284069600000, 1285880400000, 1400191200000, 1403816400000, 1406844000000, 1411678800000, 1682632800000, 1698354000000, 1714082400000, 1730408400000, 1745532000000, 1761858000000, 1776981600000, 1793307600000, 1809036000000, 1824757200000, 1840485600000, 1856206800000, 1871935200000, 1887656400000, 1903384800000, 1919710800000, 1934834400000, 1951160400000, 1966888800000, 1982610000000, 1998338400000, 2014059600000, 2029788000000, 2045509200000, 2061237600000, 2076958800000, 2092687200000, 2109013200000, 2124136800000, 2140462800000, 2156191200000, 2171912400000, 2187640800000, 2203362000000, 2219090400000, 2234811600000, 2250540000000, 2266866000000, 2281989600000, 2298315600000, 2313439200000, 2329765200000, 2345493600000, 2361214800000, 2376943200000, 2392664400000, 2408392800000, 2424114000000, 2439842400000, 2456168400000, 2471292000000, 2487618000000, 2503346400000, 2519067600000, 2534796000000, 2550517200000, 2566245600000, 2581966800000, 2597695200000, 2614021200000, 2629144800000, 2645470800000, 2660594400000, 2676920400000, 2692648800000, 2708370000000, 2724098400000, 2739819600000, 2755548000000, 2771269200000, 2786997600000, 2803323600000, 2818447200000, 2834773200000, 2850501600000, 2866222800000, 2881951200000, 2897672400000, 2913400800000, 2929122000000, 2944850400000, 2960571600000, 2976300000000, 2992626000000, 3007749600000, 3024075600000, 3039804000000, 3055525200000, 3071253600000, 3086974800000, 3102703200000, 3118424400000, 3134152800000, 3150478800000, 3165602400000, 3181928400000, 3197052000000, 3213378000000, 3229106400000, 3244827600000, 3260556000000, 3276277200000, 3292005600000, 3307726800000, 3323455200000, 3339781200000, 3354904800000, 3371230800000, 3386959200000, 3402680400000, 3418408800000, 3434130000000, 3449858400000, 3465579600000, 3481308000000, 3497634000000, 3512757600000, 3529083600000, 3544207200000, 3560533200000, 3576261600000, 3591982800000, 3607711200000, 3623432400000, 3639160800000, 3654882000000, 3670610400000, 3686936400000, 3702060000000, 3718386000000, 3734114400000, 3749835600000, 3765564000000, 3781285200000, 3797013600000, 3812734800000, 3828463200000, 3844184400000, 3859912800000, 3876238800000, 3891362400000, 3907688400000, 3923416800000, 3939138000000, 3954866400000, 3970587600000, 3986316000000, 4002037200000, 4017765600000, 4034091600000, 4049215200000, 4065541200000, 4080664800000, 4096990800000, 4112719200000, 4128440400000, 4144168800000, 4159890000000, 4175618400000, 4191339600000, 4207068000000, 4222789200000, 4238517600000, 4254843600000, 4269967200000, 4286293200000, 4302021600000, 4317742800000, 4333471200000, 4349192400000, 4364920800000, 4380642000000, 4396370400000, 4412696400000, 4427820000000, 4444146000000, 4459269600000, 4475595600000, 4491324000000, 4507045200000, 4522773600000, 4538494800000, 4554223200000, 4569944400000, 4585672800000, 4601998800000, 4617122400000, 4633448400000, 4649176800000, 4664898000000, 4680626400000, 4696347600000, 4712076000000, 4727797200000, 4743525600000, 4759851600000, 4774975200000, 4791301200000, 4806424800000, 4822750800000, 4838479200000, 4854200400000, 4869928800000, 4885650000000, 4901378400000, 4917099600000, 4932828000000, 4949154000000, 4964277600000, 4980603600000, 4996332000000, 5012053200000, 5027781600000, 5043502800000, 5059231200000, 5074952400000, 5090680800000, 5106402000000, 5122130400000, 5138456400000, 5153580000000, 5169906000000, 5185634400000, 5201355600000, 5217084000000, 5232805200000, 5248533600000, 5264254800000, 5279983200000, 5296309200000, 5311432800000, 5327758800000, 5342882400000, 5359208400000, 5374936800000, 5390658000000, 5406386400000, 5422107600000, 5437836000000, 5453557200000, 5469285600000, 5485611600000, 5500735200000, 5517061200000, 5532789600000, 5548510800000, 5564239200000, 5579960400000, 5595688800000, 5611410000000, 5627138400000, 5643464400000, 5658588000000, 5674914000000, 5690037600000, 5706363600000, 5722092000000, 5737813200000, 5753541600000, 5769262800000, 5784991200000, 5800712400000, 5816440800000, 5832766800000, 5847890400000, 5864216400000, 5879944800000, 5895666000000, 5911394400000, 5927115600000, 5942844000000, 5958565200000, 5974293600000, 5990014800000, 6005743200000, 6022069200000, 6037192800000, 6053518800000, 6069247200000, 6084968400000, 6100696800000, 6116418000000, 6132146400000, 6147867600000, 6163596000000, 6179922000000, 6195045600000, 6211371600000, 6226495200000, 6242821200000, 6258549600000, 6274270800000, 6289999200000, 6305720400000, 6321448800000, 6337170000000, 6352898400000, 6369224400000, 6384348000000, 6400674000000, 6416402400000, 6432123600000, 6447852000000, 6463573200000, 6479301600000, 6495022800000, 6510751200000, 6527077200000, 6542200800000, 6558526800000, 6573650400000, 6589976400000, 6605704800000, 6621426000000, 6637154400000, 6652875600000, 6668604000000, 6684325200000, 6700053600000, 6716379600000, 6731503200000, 6747829200000, 6763557600000, 6779278800000, 6795007200000, 6810728400000, 6826456800000, 6842178000000, 6857906400000, 6873627600000, 6889356000000, 6905682000000, 6920805600000, 6937131600000, 6952860000000, 6968581200000, 6984309600000, 7000030800000, 7015759200000, 7031480400000, 7047208800000, 7063534800000, 7078658400000, 7094984400000, 7110108000000, 7126434000000, 7142162400000, 7157883600000, 7173612000000, 7189333200000, 7205061600000, 7220782800000, 7236511200000, 7252837200000, 7267960800000, 7284286800000, 7299410400000, 7315736400000, 7331464800000, 7347186000000, 7362914400000, 7378635600000, 7394364000000, 7410085200000, 7425813600000, 7442139600000, 7457263200000, 7473589200000, 7488712800000, 7505038800000, 7520767200000, 7536488400000, 7552216800000, 7567938000000, 7583666400000, 7599387600000, 7615116000000, 7631442000000, 7646565600000, 7662891600000, 7678620000000, 7694341200000, 7710069600000, 7725790800000, 7741519200000, 7757240400000, 7772968800000, 7789294800000, 7804418400000, 7820744400000, 7835868000000, 7852194000000, 7867922400000, 7883643600000, 7899372000000, 7915093200000, 7930821600000, 7946542800000, 7962271200000, 7978597200000, 7993720800000, 8010046800000, 8025775200000, 8041496400000, 8057224800000, 8072946000000, 8088674400000, 8104395600000, 8120124000000, 8135845200000, 8151573600000, 8167899600000, 8183023200000, 8199349200000, 8215077600000, 8230798800000, 8246527200000, 8262248400000, 8277976800000, 8293698000000, 8309426400000, 8325752400000, 8340876000000, 8357202000000, 8372325600000, 8388651600000, 8404380000000, 8420101200000, 8435829600000, 8451550800000, 8467279200000, 8483000400000, 8498728800000, 8515054800000, 8530178400000, 8546504400000, 8562232800000, 8577954000000, 8593682400000, 8609403600000, 8625132000000, 8640853200000, 8656581600000, 8672907600000, 8688031200000, 8704357200000, 8719480800000, 8735806800000, 8751535200000, 8767256400000, 8782984800000, 8798706000000, 8814434400000, 8830155600000, 8845884000000, 8862210000000, 8877333600000, 8893659600000, 8909388000000, 8925109200000, 8940837600000, 8956558800000, 8972287200000, 8988008400000, 9003736800000, 9019458000000, 9035186400000, 9051512400000, 9066636000000, 9082962000000, 9098690400000, 9114411600000, 9130140000000, 9145861200000, 9161589600000, 9177310800000, 9193039200000, 9209365200000, 9224488800000, 9240814800000, 9255938400000, 9272264400000, 9287992800000, 9303714000000, 9319442400000, 9335163600000, 9350892000000, 9366613200000, 9382341600000, 9398667600000, 9413791200000, 9430117200000, 9445845600000, 9461566800000, 9477295200000, 9493016400000, 9508744800000, 9524466000000, 9540194400000, 9556520400000, 9571644000000, 9587970000000, 9603093600000, 9619419600000, 9635148000000, 9650869200000, 9666597600000, 9682318800000, 9698047200000, 9713768400000, 9729496800000, 9745822800000, 9760946400000, 9777272400000, 9793000800000, 9808722000000, 9824450400000, 9840171600000, 9855900000000, 9871621200000, 9887349600000, 9903070800000, 9918799200000, 9935125200000, 9950248800000, 9966574800000, 9982303200000, 9998024400000, 10013752800000, 10029474000000, 10045202400000, 10060923600000, 10076652000000, 10092978000000, 10108101600000, 10124427600000, 10139551200000, 10155877200000, 10171605600000, 10187326800000, 10203055200000, 10218776400000, 10234504800000, 10250226000000, 10265954400000, 10282280400000, 10297404000000, 10313730000000, 10329458400000, 10345179600000, 10360908000000, 10376629200000, 10392357600000, 10408078800000, 10423807200000, 10439528400000, 10455256800000, 10471582800000, 10486706400000, 10503032400000, 10518156000000, 10534482000000, 10550210400000, 10565931600000, 10581660000000, 10597381200000, 10613109600000, 10628830800000, 10644559200000, 10660885200000, 10676008800000, 10692334800000, 10708063200000, 10723784400000, 10739512800000, 10755234000000, 10770962400000, 10786683600000, 10802412000000, 10818738000000, 10833861600000, 10850187600000, 10865311200000, 10881637200000, 10897365600000, 10913086800000, 10928815200000, 10944536400000, 10960264800000, 10975986000000, 10991714400000, 11008040400000, 11023164000000, 11039490000000, 11055218400000, 11070939600000, 11086668000000, 11102389200000, 11118117600000, 11133838800000, 11149567200000, 11165288400000, 11181016800000, 11197342800000, 11212466400000, 11228792400000, 11244520800000, 11260242000000, 11275970400000, 11291691600000, 11307420000000, 11323141200000, 11338869600000, 11355195600000, 11370319200000, 11386645200000, 11401768800000, 11418094800000, 11433823200000, 11449544400000, 11465272800000, 11480994000000, 11496722400000, 11512443600000, 11528172000000, 11544498000000, 11559621600000, 11575947600000, 11591676000000, 11607397200000, 11623125600000, 11638846800000, 11654575200000, 11670296400000, 11686024800000, 11702350800000, 11717474400000, 11733800400000, 11748924000000, 11765250000000, 11780978400000, 11796699600000, 11812428000000, 11828149200000, 11843877600000, 11859598800000, 11875327200000, 11891653200000, 11906776800000, 11923102800000, 11938831200000, 11954552400000, 11970280800000, 11986002000000, 12001730400000, 12017451600000, 12033180000000, 12048901200000, 12064629600000, 12080955600000, 12096079200000, 12112405200000, 12128133600000, 12143854800000, 12159583200000, 12175304400000, 12191032800000, 12206754000000, 12222482400000, 12238808400000, 12253932000000, 12270258000000, 12285381600000, 12301707600000, 12317436000000, 12333157200000, 12348885600000, 12364606800000, 12380335200000, 12396056400000, 12411784800000, 12428110800000, 12443234400000, 12459560400000, 12475288800000, 12491010000000, 12506738400000, 12522459600000, 12538188000000, 12553909200000, 12569637600000, 12585963600000, 12601087200000, 12617413200000, 12632536800000, 12648862800000, 12664591200000, 12680312400000, 12696040800000, 12711762000000, 12727490400000, 12743211600000, 12758940000000, 12775266000000, 12790389600000, 12806715600000, 12822444000000, 12838165200000, 12853893600000, 12869614800000, 12885343200000, 12901064400000, 12916792800000, 12932514000000, 12948242400000, 12964568400000, 12979692000000, 12996018000000, 13011746400000, 13027467600000, 13043196000000, 13058917200000, 13074645600000, 13090366800000, 13106095200000, 13122421200000, 13137544800000, 13153870800000, 13168994400000, 13185320400000, 13201048800000, 13216770000000, 13232498400000, 13248219600000, 13263948000000, 13279669200000, 13295397600000, 13311723600000, 13326847200000, 13343173200000, 13358901600000, 13374622800000, 13390351200000, 13406072400000, 13421800800000, 13437522000000, 13453250400000, 13469576400000, 13484700000000, 13501026000000, 13516149600000, 13532475600000, 13548204000000, 13563925200000, 13579653600000, 13595374800000, 13611103200000, 13626824400000, 13642552800000, 13658878800000, 13674002400000, 13690328400000, 13706056800000, 13721778000000, 13737506400000, 13753227600000, 13768956000000, 13784677200000, 13800405600000, 13816126800000, 13831855200000, 13848181200000, 13863304800000, 13879630800000, 13895359200000, 13911080400000, 13926808800000, 13942530000000, 13958258400000, 13973979600000, 13989708000000, 14006034000000, 14021157600000, 14037483600000, 14052607200000, 14068933200000, 14084661600000, 14100382800000, 14116111200000, 14131832400000, 14147560800000, 14163282000000, 14179010400000, 14195336400000, 14210460000000, 14226786000000, 14242514400000, 14258235600000, 14273964000000, 14289685200000, 14305413600000, 14321134800000 ]),
    Int32List.fromList

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone casablanca = DynamicTimezone(
    'Africa/Casablanca',
    DynamicTimezoneSpan(
      -1,
      -1820000,
      'LMT',
      TimezoneSpan.range.min,
      -1773012580,
      dst: false,
    ),
    Int64List.fromList([ -1773012580000, -956361600000, -950490000000, -942019200000, -761187600000, -617241600000, -605149200000, -81432000000, -71110800000, 141264000000, 147222000000, 199756800000, 207702000000, 231292800000, 244249200000, 265507200000, 271033200000, 448243200000, 504918000000, 1212278400000, 1220223600000, 1243814400000, 1250809200000, 1272758400000, 1281222000000, 1301788800000, 1312066800000, 1335664800000, 1342749600000, 1345428000000, 1348970400000, 1367114400000, 1373162400000, 1376100000000, 1382839200000, 1396144800000, 1403920800000, 1406944800000, 1414288800000, 1427594400000, 1434247200000, 1437271200000, 1445738400000, 1459044000000, 1465092000000, 1468116000000, 1477792800000, 1490493600000, 1495332000000, 1498960800000, 1509242400000, 1521943200000, 1526176800000, 1529200800000, 1540692000000, 1557021600000, 1560045600000, 1587261600000, 1590890400000, 1618106400000, 1621130400000, 1648346400000, 1651975200000, 1679191200000, 1682215200000, 1710036000000, 1713060000000, 1740276000000, 1743904800000, 1771120800000, 1774144800000, 1801965600000, 1804989600000, 1832205600000, 1835834400000, 1863050400000, 1866074400000, 1893290400000, 1896919200000, 1924135200000, 1927159200000, 1954980000000, 1958004000000, 1985220000000, 1988848800000, 2016064800000, 2019088800000, 2046304800000, 2049933600000, 2077149600000, 2080778400000, 2107994400000, 2111018400000, 2138234400000, 2141863200000, 2169079200000, 2172103200000, 2199924000000, 2202948000000, 2230164000000, 2233792800000, 2261008800000, 2264032800000, 2291248800000, 2294877600000, 2322093600000, 2325722400000, 2352938400000, 2355962400000, 2383178400000, 2386807200000, 2414023200000, 2417047200000, 2444868000000, 2447892000000, 2475108000000, 2478736800000, 2505952800000, 2508976800000, 2536192800000, 2539821600000, 2567037600000, 2570666400000, 2597882400000, 2600906400000, 2628122400000, 2631751200000, 2658967200000, 2661991200000, 2689812000000, 2692836000000, 2720052000000, 2723680800000, 2750896800000, 2753920800000, 2781136800000, 2784765600000, 2811981600000, 2815610400000, 2842826400000, 2845850400000, 2873066400000, 2876695200000, 2903911200000, 2906935200000, 2934756000000, 2937780000000, 2964996000000, 2968624800000, 2995840800000, 2998864800000, 3026080800000, 3029709600000, 3056925600000, 3060554400000, 3087770400000, 3090794400000, 3118010400000, 3121639200000, 3148855200000, 3151879200000, 3179700000000, 3182724000000, 3209940000000, 3213568800000, 3240784800000, 3243808800000, 3271024800000, 3274653600000, 3301869600000, 3305498400000, 3332714400000, 3335738400000, 3362954400000, 3366583200000, 3393799200000, 3396823200000, 3424644000000, 3427668000000, 3454884000000, 3458512800000, 3485728800000, 3488752800000, 3515968800000, 3519597600000, 3546813600000, 3549837600000, 3577658400000, 3580682400000, 3607898400000, 3611527200000, 3638743200000, 3641767200000, 3669588000000, 3672612000000, 3699828000000, 3703456800000 ]),
    Int32List.fromList

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone ceuta = DynamicTimezone(
    'Africa/Ceuta',
    DynamicTimezoneSpan(
      -1,
      -1276000,
      'LMT',
      TimezoneSpan.range.min,
      -2177452800,
      dst: false,
    ),
    Int64List.fromList([ -2177452800000, -1630112400000, -1616810400000, -1442451600000, -1427673600000, -1379293200000, -1364774400000, -1348448400000, -1333324800000, -1316390400000, -1301270400000, -1293840000000, -81432000000, -71110800000, 141264000000, 147222000000, 199756800000, 207702000000, 231292800000, 244249200000, 265507200000, 271033200000, 448243200000, 512528400000, 528253200000, 543978000000, 559702800000, 575427600000, 591152400000, 606877200000, 622602000000, 638326800000, 654656400000, 670381200000, 686106000000, 701830800000, 717555600000, 733280400000, 749005200000, 764730000000, 780454800000, 796179600000, 811904400000, 828234000000, 846378000000, 859683600000, 877827600000, 891133200000, 909277200000, 922582800000, 941331600000, 954032400000, 972781200000, 985482000000, 1004230800000, 1017536400000, 1035680400000, 1048986000000, 1067130000000, 1080435600000, 1099184400000, 1111885200000, 1130634000000, 1143334800000, 1162083600000, 1174784400000, 1193533200000, 1206838800000, 1224982800000, 1238288400000, 1256432400000, 1269738000000, 1288486800000, 1301187600000, 1319936400000, 1332637200000, 1351386000000, 1364691600000, 1382835600000, 1396141200000, 1414285200000, 1427590800000, 1445734800000, 1459040400000, 1477789200000, 1490490000000, 1509238800000, 1521939600000, 1540688400000, 1553994000000, 1572138000000, 1585443600000, 1603587600000, 1616893200000, 1635642000000, 1648342800000, 1667091600000, 1679792400000, 1698541200000, 1711846800000, 1729990800000, 1743296400000, 1761440400000, 1774746000000, 1792890000000, 1806195600000, 1824944400000, 1837645200000, 1856394000000, 1869094800000, 1887843600000, 1901149200000, 1919293200000, 1932598800000, 1950742800000, 1964048400000, 1982797200000, 1995498000000, 2014246800000, 2026947600000, 2045696400000, 2058397200000, 2077146000000, 2090451600000, 2108595600000, 2121901200000, 2140045200000 ]),
    Int32List.fromList([ 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000 ]),
    [ 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET' ],
    [ false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone conakry = DynamicTimezone(
    'Africa/Conakry',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone dakar = DynamicTimezone(
    'Africa/Dakar',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone darEsSalaam = DynamicTimezone(
    'Africa/Dar_es_Salaam',
    DynamicTimezoneSpan(
      -1,
      8836000,
      'LMT',
      TimezoneSpan.range.min,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836000, -1309746600000, -1261969200000, -1041388200000, -865305900000 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final Timezone djibouti = DynamicTimezone(
    'Africa/Djibouti',
    DynamicTimezoneSpan(
      -1,
      8836000,
      'LMT',
      TimezoneSpan.range.min,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836000, -1309746600000, -1261969200000, -1041388200000, -865305900000 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final Timezone douala = DynamicTimezone(
    'Africa/Douala',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone elAaiun = DynamicTimezone(
    'Africa/El_Aaiun',
    DynamicTimezoneSpan(
      -1,
      -3168000,
      'LMT',
      TimezoneSpan.range.min,
      -1136070432,
      dst: false,
    ),
    Int64List.fromList([ -1136070432000, 198291600000, 199756800000, 207702000000, 231292800000, 244249200000, 265507200000, 271033200000, 1212278400000, 1220223600000, 1243814400000, 1250809200000, 1272758400000, 1281222000000, 1301788800000, 1312066800000, 1335664800000, 1342749600000, 1345428000000, 1348970400000, 1367114400000, 1373162400000, 1376100000000, 1382839200000, 1396144800000, 1403920800000, 1406944800000, 1414288800000, 1427594400000, 1434247200000, 1437271200000, 1445738400000, 1459044000000, 1465092000000, 1468116000000, 1477792800000, 1490493600000, 1495332000000, 1498960800000, 1509242400000, 1521943200000, 1526176800000, 1529200800000, 1540692000000, 1557021600000, 1560045600000, 1587261600000, 1590890400000, 1618106400000, 1621130400000, 1648346400000, 1651975200000, 1679191200000, 1682215200000, 1710036000000, 1713060000000, 1740276000000, 1743904800000, 1771120800000, 1774144800000, 1801965600000, 1804989600000, 1832205600000, 1835834400000, 1863050400000, 1866074400000, 1893290400000, 1896919200000, 1924135200000, 1927159200000, 1954980000000, 1958004000000, 1985220000000, 1988848800000, 2016064800000, 2019088800000, 2046304800000, 2049933600000, 2077149600000, 2080778400000, 2107994400000, 2111018400000, 2138234400000, 2141863200000, 2169079200000, 2172103200000, 2199924000000, 2202948000000, 2230164000000, 2233792800000, 2261008800000, 2264032800000, 2291248800000, 2294877600000, 2322093600000, 2325722400000, 2352938400000, 2355962400000, 2383178400000, 2386807200000, 2414023200000, 2417047200000, 2444868000000, 2447892000000, 2475108000000, 2478736800000, 2505952800000, 2508976800000, 2536192800000, 2539821600000, 2567037600000, 2570666400000, 2597882400000, 2600906400000, 2628122400000, 2631751200000, 2658967200000, 2661991200000, 2689812000000, 2692836000000, 2720052000000, 2723680800000, 2750896800000, 2753920800000, 2781136800000, 2784765600000, 2811981600000, 2815610400000, 2842826400000, 2845850400000, 2873066400000, 2876695200000, 2903911200000, 2906935200000, 2934756000000, 2937780000000, 2964996000000, 2968624800000, 2995840800000, 2998864800000, 3026080800000, 3029709600000, 3056925600000, 3060554400000, 3087770400000, 3090794400000, 3118010400000, 3121639200000, 3148855200000, 3151879200000, 3179700000000, 3182724000000, 3209940000000, 3213568800000, 3240784800000, 3243808800000, 3271024800000, 3274653600000, 3301869600000, 3305498400000, 3332714400000, 3335738400000, 3362954400000, 3366583200000, 3393799200000, 3396823200000, 3424644000000, 3427668000000, 3454884000000, 3458512800000, 3485728800000, 3488752800000, 3515968800000, 3519597600000, 3546813600000, 3549837600000, 3577658400000, 3580682400000, 3607898400000, 3611527200000, 3638743200000, 3641767200000, 3669588000000, 3672612000000, 3699828000000, 3703456800000 ]),
    Int32List.fromList

    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone freetown = DynamicTimezone(
    'Africa/Freetown',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone gaborone = DynamicTimezone(
    'Africa/Gaborone',
    DynamicTimezoneSpan(
      -1,
      7820000,
      'LMT',
      TimezoneSpan.range.min,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020000 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final Timezone harare = DynamicTimezone(
    'Africa/Harare',
    DynamicTimezoneSpan(
      -1,
      7820000,
      'LMT',
      TimezoneSpan.range.min,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020000 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final Timezone johannesburg = DynamicTimezone(
    'Africa/Johannesburg',
    DynamicTimezoneSpan(
      -1,
      6720000,
      'LMT',
      TimezoneSpan.range.min,
      -2458173120,
      dst: false,
    ),
    Int64List.fromList([ -2458173120000, -2109288600000, -860976000000, -845254800000, -829526400000, -813805200000 ]),
    Int32List.fromList([ 5400000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'SAST', 'SAST', 'SAST', 'SAST', 'SAST', 'SAST' ],
    [ false, false, true, false, true, false ],
  );

  static final Timezone juba = DynamicTimezone(
    'Africa/Juba',
    DynamicTimezoneSpan(
      -1,
      7588000,
      'LMT',
      TimezoneSpan.range.min,
      -1230775588,
      dst: false,
    ),
    Int64List.fromList([ -1230775588000, 10360800000, 24786000000, 41810400000, 56322000000, 73432800000, 87944400000, 104882400000, 119480400000, 136332000000, 151016400000, 167781600000, 182552400000, 199231200000, 214174800000, 230680800000, 245710800000, 262735200000, 277246800000, 294184800000, 308782800000, 325634400000, 340405200000, 357084000000, 371941200000, 388533600000, 403477200000, 419983200000, 435013200000, 452037600000, 466635600000, 483487200000, 498171600000, 947930400000, 1612126800000 ]),
    Int32List.fromList([ 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'EAT', 'CAT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone kampala = DynamicTimezone(
    'Africa/Kampala',
    DynamicTimezoneSpan(
      -1,
      8836000,
      'LMT',
      TimezoneSpan.range.min,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836000, -1309746600000, -1261969200000, -1041388200000, -865305900000 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final Timezone khartoum = DynamicTimezone(
    'Africa/Khartoum',
    DynamicTimezoneSpan(
      -1,
      7808000,
      'LMT',
      TimezoneSpan.range.min,
      -1230775808,
      dst: false,
    ),
    Int64List.fromList([ -1230775808000, 10360800000, 24786000000, 41810400000, 56322000000, 73432800000, 87944400000, 104882400000, 119480400000, 136332000000, 151016400000, 167781600000, 182552400000, 199231200000, 214174800000, 230680800000, 245710800000, 262735200000, 277246800000, 294184800000, 308782800000, 325634400000, 340405200000, 357084000000, 371941200000, 388533600000, 403477200000, 419983200000, 435013200000, 452037600000, 466635600000, 483487200000, 498171600000, 947930400000, 1509483600000 ]),
    Int32List.fromList([ 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'EAT', 'CAT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final Timezone kigali = DynamicTimezone(
    'Africa/Kigali',
    DynamicTimezoneSpan(
      -1,
      7820000,
      'LMT',
      TimezoneSpan.range.min,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020000 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final Timezone kinshasa = DynamicTimezone(
    'Africa/Kinshasa',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone lagos = DynamicTimezone(
    'Africa/Lagos',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone libreville = DynamicTimezone(
    'Africa/Libreville',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone lome = DynamicTimezone(
    'Africa/Lome',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone luanda = DynamicTimezone(
    'Africa/Luanda',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone lubumbashi = DynamicTimezone(
    'Africa/Lubumbashi',
    DynamicTimezoneSpan(
      -1,
      7820000,
      'LMT',
      TimezoneSpan.range.min,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020000 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final Timezone lusaka = DynamicTimezone(
    'Africa/Lusaka',
    DynamicTimezoneSpan(
      -1,
      7820000,
      'LMT',
      TimezoneSpan.range.min,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020000 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final Timezone malabo = DynamicTimezone(
    'Africa/Malabo',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone maputo = DynamicTimezone(
    'Africa/Maputo',
    DynamicTimezoneSpan(
      -1,
      7820000,
      'LMT',
      TimezoneSpan.range.min,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020000 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final Timezone maseru = DynamicTimezone(
    'Africa/Maseru',
    DynamicTimezoneSpan(
      -1,
      6720000,
      'LMT',
      TimezoneSpan.range.min,
      -2458173120,
      dst: false,
    ),
    Int64List.fromList([ -2458173120000, -2109288600000, -860976000000, -845254800000, -829526400000, -813805200000 ]),
    Int32List.fromList([ 5400000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'SAST', 'SAST', 'SAST', 'SAST', 'SAST', 'SAST' ],
    [ false, false, true, false, true, false ],
  );

  static final Timezone mbabane = DynamicTimezone(
    'Africa/Mbabane',
    DynamicTimezoneSpan(
      -1,
      6720000,
      'LMT',
      TimezoneSpan.range.min,
      -2458173120,
      dst: false,
    ),
    Int64List.fromList([ -2458173120000, -2109288600000, -860976000000, -845254800000, -829526400000, -813805200000 ]),
    Int32List.fromList([ 5400000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'SAST', 'SAST', 'SAST', 'SAST', 'SAST', 'SAST' ],
    [ false, false, true, false, true, false ],
  );

  static final Timezone mogadishu = DynamicTimezone(
    'Africa/Mogadishu',
    DynamicTimezoneSpan(
      -1,
      8836000,
      'LMT',
      TimezoneSpan.range.min,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836000, -1309746600000, -1261969200000, -1041388200000, -865305900000 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final Timezone monrovia = DynamicTimezone(
    'Africa/Monrovia',
    DynamicTimezoneSpan(
      -1,
      -2588000,
      'LMT',
      TimezoneSpan.range.min,
      -2776979812,
      dst: false,
    ),
    Int64List.fromList([ -2776979812000, -1604359012000, 63593070000 ]),
    Int32List.fromList([ -2588000, -2670000, 0 ]),
    [ 'MMT', 'MMT', 'GMT' ],
    [ false, false, false ],
  );

  static final Timezone nairobi = DynamicTimezone(
    'Africa/Nairobi',
    DynamicTimezoneSpan(
      -1,
      8836000,
      'LMT',
      TimezoneSpan.range.min,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836000, -1309746600000, -1261969200000, -1041388200000, -865305900000 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final Timezone ndjamena = DynamicTimezone(
    'Africa/Ndjamena',
    DynamicTimezoneSpan(
      -1,
      3612000,
      'LMT',
      TimezoneSpan.range.min,
      -1830387612,
      dst: false,
    ),
    Int64List.fromList([ -1830387612000, 308703600000, 321314400000 ]),
    Int32List.fromList([ 3600000, 7200000, 3600000 ]),
    [ 'WAT', 'WAST', 'WAT' ],
    [ false, true, false ],
  );

  static final Timezone niamey = DynamicTimezone(
    'Africa/Niamey',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone nouakchott = DynamicTimezone(
    'Africa/Nouakchott',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone ouagadougou = DynamicTimezone(
    'Africa/Ouagadougou',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone portoNovo = DynamicTimezone(
    'Africa/Porto-Novo',
    DynamicTimezoneSpan(
      -1,
      0,
      'GMT',
      TimezoneSpan.range.min,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815000, -1940889600000, -1767226415000, -1588465800000 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final Timezone saoTome = DynamicTimezone(
    'Africa/Sao_Tome',
    DynamicTimezoneSpan(
      -1,
      1616000,
      'LMT',
      TimezoneSpan.range.min,
      -2713912016,
      dst: false,
    ),
    Int64List.fromList([ -2713912016000, -1830384000000, 1514768400000, 1546304400000 ]),
    Int32List.fromList([ -2205000, 0, 3600000, 0 ]),
    [ 'LMT', 'GMT', 'WAT', 'GMT' ],
    [ false, false, false, false ],
  );

  static final Timezone timbuktu = DynamicTimezone(
    'Africa/Timbuktu',
    DynamicTimezoneSpan(
      -1,
      -968000,
      'LMT',
      TimezoneSpan.range.min,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032000 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final Timezone tripoli = DynamicTimezone(
    'Africa/Tripoli',
    DynamicTimezoneSpan(
      -1,
      3164000,
      'LMT',
      TimezoneSpan.range.min,
      -1577926364,
      dst: false,
    ),
    Int64List.fromList([ -1577926364000, -574902000000, -568087200000, -512175600000, -504928800000, -449888400000, -441856800000, -347158800000, 378684000000, 386463600000, 402271200000, 417999600000, 433807200000, 449622000000, 465429600000, 481590000000, 496965600000, 512953200000, 528674400000, 544230000000, 560037600000, 575852400000, 591660000000, 607388400000, 623196000000, 641775600000, 844034400000, 860108400000, 875916000000, 1352505600000, 1364515200000, 1382659200000 ]),
    Int32List.fromList([ 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 7200000, 3600000, 7200000, 7200000 ]),
    [ 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'EET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'EET', 'CET', 'CEST', 'EET', 'CET', 'CEST', 'EET' ],
    [ false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false ],
  );

  static final Timezone tunis = DynamicTimezone(
    'Africa/Tunis',
    DynamicTimezoneSpan(
      -1,
      2444000,
      'LMT',
      TimezoneSpan.range.min,
      -2797202444,
      dst: false,
    ),
    Int64List.fromList([ -2797202444000, -1855958961000, -969242400000, -950493600000, -941940000000, -891136800000, -877827600000, -857257200000, -844556400000, -842918400000, -842223600000, -828230400000, -812502000000, -796269600000, -781052400000, -766634400000, 231202800000, 243903600000, 262825200000, 276044400000, 581122800000, 591145200000, 606870000000, 622594800000, 641516400000, 654649200000, 1114902000000, 1128038400000, 1143334800000, 1162083600000, 1174784400000, 1193533200000, 1206838800000, 1224982800000 ]),
    Int32List.fromList([ 561000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000 ]),
    [ 'PMT', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final Timezone windhoek = DynamicTimezone(
    'Africa/Windhoek',
    DynamicTimezoneSpan(
      -1,
      4104000,
      'LMT',
      TimezoneSpan.range.min,
      -2458170504,
      dst: false,
    ),
    Int64List.fromList([ -2458170504000, -2109288600000, -860976000000, -845254800000, 637970400000, 764200800000, 778640400000, 796780800000, 810090000000, 828835200000, 841539600000, 860284800000, 873594000000, 891734400000, 905043600000, 923184000000, 936493200000, 954633600000, 967942800000, 986083200000, 999392400000, 1018137600000, 1030842000000, 1049587200000, 1062896400000, 1081036800000, 1094346000000, 1112486400000, 1125795600000, 1143936000000, 1157245200000, 1175385600000, 1188694800000, 1207440000000, 1220749200000, 1238889600000, 1252198800000, 1270339200000, 1283648400000, 1301788800000, 1315098000000, 1333238400000, 1346547600000, 1365292800000, 1377997200000, 1396742400000, 1410051600000, 1428192000000, 1441501200000, 1459641600000, 1472950800000, 1491091200000, 1504400400000 ]),
    Int32List.fromList([ 5400000, 7200000, 10800000, 7200000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000 ]),
    [ '+0130', 'SAST', 'SAST', 'SAST', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT' ],
    [ false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

}


