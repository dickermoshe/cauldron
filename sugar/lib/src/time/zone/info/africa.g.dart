// GENERATED CODE - DO NOT MODIFY BY HAND
//
// **************************************************************************
// Generated by: sugar/tool/timezone/main.dart
// **************************************************************************
// 
// ignore_for_file: type=lint

import 'dart:typed_data';

import 'package:sugar/src/time/offset.dart';
import 'package:sugar/src/time/zone/dynamic_timezone_rules.dart';
import 'package:sugar/src/time/zone/fixed_timezone_rules.dart';
import 'package:sugar/src/time/zone/timezone_rules.dart';

extension Africa on Never {
  static final TimezoneRules abidjan = DynamicTimezoneRules(
    'Africa/Abidjan',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Abidjan',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules accra = DynamicTimezoneRules(
    'Africa/Accra',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Accra',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules addisAbaba = DynamicTimezoneRules(
    'Africa/Addis_Ababa',
    DynamicTimezone(
      -1,
      8836000,
      'Africa/Addis_Ababa',
      'LMT',
      null,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836, -1309746600, -1261969200, -1041388200, -865305900 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules algiers = DynamicTimezoneRules(
    'Africa/Algiers',
    DynamicTimezone(
      -1,
      732000,
      'Africa/Algiers',
      'LMT',
      null,
      -2486592732,
      dst: false,
    ),
    Int64List.fromList([ -2486592732, -1855958961, -1689814800, -1680397200, -1665363600, -1648342800, -1635123600, -1616893200, -1604278800, -1585443600, -1574038800, -1552266000, -1539997200, -1531443600, -956365200, -950486400, -942012000, -812502000, -796262400, -781052400, -766630800, -733280400, -439430400, -212029200, 41468400, 54774000, 231724800, 246236400, 259545600, 275274000, 309740400, 325468800, 341802000, 357523200 ]),
    Int32List.fromList([ 561000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 7200000, 3600000, 7200000, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 3600000, 7200000, 3600000, 0, 3600000, 0, 3600000 ]),
    [ 'PMT', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'WET', 'CET', 'WET', 'WEST', 'WET', 'WEST', 'CET', 'CEST', 'CET', 'WET', 'WEST', 'WET', 'CET' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, false, false, false, true, false, true, false, true, false, false, true, false, false ],
  );

  static final TimezoneRules asmara = DynamicTimezoneRules(
    'Africa/Asmara',
    DynamicTimezone(
      -1,
      8836000,
      'Africa/Asmara',
      'LMT',
      null,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836, -1309746600, -1261969200, -1041388200, -865305900 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules asmera = DynamicTimezoneRules(
    'Africa/Asmera',
    DynamicTimezone(
      -1,
      8836000,
      'Africa/Asmera',
      'LMT',
      null,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836, -1309746600, -1261969200, -1041388200, -865305900 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules bamako = DynamicTimezoneRules(
    'Africa/Bamako',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Bamako',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules bangui = DynamicTimezoneRules(
    'Africa/Bangui',
    DynamicTimezone(
      -1,
      0,
      'Africa/Bangui',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules banjul = DynamicTimezoneRules(
    'Africa/Banjul',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Banjul',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules bissau = DynamicTimezoneRules(
    'Africa/Bissau',
    DynamicTimezone(
      -1,
      -3740000,
      'Africa/Bissau',
      'LMT',
      null,
      -1830380400,
      dst: false,
    ),
    Int64List.fromList([ -1830380400, 157770000 ]),
    Int32List.fromList([ -3600000, 0 ]),
    [ '-01', 'GMT' ],
    [ false, false ],
  );

  static final TimezoneRules blantyre = DynamicTimezoneRules(
    'Africa/Blantyre',
    DynamicTimezone(
      -1,
      7820000,
      'Africa/Blantyre',
      'LMT',
      null,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final TimezoneRules brazzaville = DynamicTimezoneRules(
    'Africa/Brazzaville',
    DynamicTimezone(
      -1,
      0,
      'Africa/Brazzaville',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules bujumbura = DynamicTimezoneRules(
    'Africa/Bujumbura',
    DynamicTimezone(
      -1,
      7820000,
      'Africa/Bujumbura',
      'LMT',
      null,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final TimezoneRules cairo = DynamicTimezoneRules(
    'Africa/Cairo',
    DynamicTimezone(
      -1,
      7509000,
      'Africa/Cairo',
      'LMT',
      null,
      -2185409109,
      dst: false,
    ),
    Int64List.fromList([ -2185409109, -929844000, -923108400, -906170400, -892868400, -875844000, -857790000, -844308000, -825822000, -812685600, -794199600, -779853600, -762663600, -399088800, -386650800, -368330400, -355114800, -336790800, -323654400, -305168400, -292032000, -273632400, -260496000, -242096400, -228960000, -210560400, -197424000, -178938000, -165801600, -147402000, -134265600, -115866000, -102643200, -84330000, -71107200, -52707600, -39484800, -21171600, -7948800, 10364400, 23587200, 41900400, 55123200, 73522800, 86745600, 105058800, 118281600, 136594800, 149817600, 168130800, 181353600, 199753200, 212976000, 231289200, 244512000, 262825200, 276048000, 294361200, 307584000, 325983600, 339206400, 357519600, 370742400, 396399600, 402278400, 426812400, 433814400, 452214000, 465436800, 483750000, 496972800, 515286000, 528508800, 546822000, 560044800, 578444400, 591667200, 610412400, 623203200, 641516400, 654739200, 673052400, 686275200, 704674800, 717897600, 736210800, 749433600, 767746800, 780969600, 799020000, 812322000, 830469600, 843771600, 861919200, 875221200, 893368800, 906670800, 925423200, 938725200, 956872800, 970174800, 988322400, 1001624400, 1019772000, 1033074000, 1051221600, 1064523600, 1083276000, 1096578000, 1114725600, 1128027600, 1146175200, 1158872400, 1177624800, 1189112400, 1209074400, 1219957200, 1240524000, 1250802000, 1272578400, 1281474000, 1284069600, 1285880400, 1400191200, 1403816400, 1406844000, 1411678800, 1682632800, 1698354000, 1714082400, 1730408400, 1745532000, 1761858000, 1776981600, 1793307600, 1809036000, 1824757200, 1840485600, 1856206800, 1871935200, 1887656400, 1903384800, 1919710800, 1934834400, 1951160400, 1966888800, 1982610000, 1998338400, 2014059600, 2029788000, 2045509200, 2061237600, 2076958800, 2092687200, 2109013200, 2124136800, 2140462800, 2156191200, 2171912400, 2187640800, 2203362000, 2219090400, 2234811600, 2250540000, 2266866000, 2281989600, 2298315600, 2313439200, 2329765200, 2345493600, 2361214800, 2376943200, 2392664400, 2408392800, 2424114000, 2439842400, 2456168400, 2471292000, 2487618000, 2503346400, 2519067600, 2534796000, 2550517200, 2566245600, 2581966800, 2597695200, 2614021200, 2629144800, 2645470800, 2660594400, 2676920400, 2692648800, 2708370000, 2724098400, 2739819600, 2755548000, 2771269200, 2786997600, 2803323600, 2818447200, 2834773200, 2850501600, 2866222800, 2881951200, 2897672400, 2913400800, 2929122000, 2944850400, 2960571600, 2976300000, 2992626000, 3007749600, 3024075600, 3039804000, 3055525200, 3071253600, 3086974800, 3102703200, 3118424400, 3134152800, 3150478800, 3165602400, 3181928400, 3197052000, 3213378000, 3229106400, 3244827600, 3260556000, 3276277200, 3292005600, 3307726800, 3323455200, 3339781200, 3354904800, 3371230800, 3386959200, 3402680400, 3418408800, 3434130000, 3449858400, 3465579600, 3481308000, 3497634000, 3512757600, 3529083600, 3544207200, 3560533200, 3576261600, 3591982800, 3607711200, 3623432400, 3639160800, 3654882000, 3670610400, 3686936400, 3702060000, 3718386000, 3734114400, 3749835600, 3765564000, 3781285200, 3797013600, 3812734800, 3828463200, 3844184400, 3859912800, 3876238800, 3891362400, 3907688400, 3923416800, 3939138000, 3954866400, 3970587600, 3986316000, 4002037200, 4017765600, 4034091600, 4049215200, 4065541200, 4080664800, 4096990800, 4112719200, 4128440400, 4144168800, 4159890000, 4175618400, 4191339600, 4207068000, 4222789200, 4238517600, 4254843600, 4269967200, 4286293200, 4302021600, 4317742800, 4333471200, 4349192400, 4364920800, 4380642000, 4396370400, 4412696400, 4427820000, 4444146000, 4459269600, 4475595600, 4491324000, 4507045200, 4522773600, 4538494800, 4554223200, 4569944400, 4585672800, 4601998800, 4617122400, 4633448400, 4649176800, 4664898000, 4680626400, 4696347600, 4712076000, 4727797200, 4743525600, 4759851600, 4774975200, 4791301200, 4806424800, 4822750800, 4838479200, 4854200400, 4869928800, 4885650000, 4901378400, 4917099600, 4932828000, 4949154000, 4964277600, 4980603600, 4996332000, 5012053200, 5027781600, 5043502800, 5059231200, 5074952400, 5090680800, 5106402000, 5122130400, 5138456400, 5153580000, 5169906000, 5185634400, 5201355600, 5217084000, 5232805200, 5248533600, 5264254800, 5279983200, 5296309200, 5311432800, 5327758800, 5342882400, 5359208400, 5374936800, 5390658000, 5406386400, 5422107600, 5437836000, 5453557200, 5469285600, 5485611600, 5500735200, 5517061200, 5532789600, 5548510800, 5564239200, 5579960400, 5595688800, 5611410000, 5627138400, 5643464400, 5658588000, 5674914000, 5690037600, 5706363600, 5722092000, 5737813200, 5753541600, 5769262800, 5784991200, 5800712400, 5816440800, 5832766800, 5847890400, 5864216400, 5879944800, 5895666000, 5911394400, 5927115600, 5942844000, 5958565200, 5974293600, 5990014800, 6005743200, 6022069200, 6037192800, 6053518800, 6069247200, 6084968400, 6100696800, 6116418000, 6132146400, 6147867600, 6163596000, 6179922000, 6195045600, 6211371600, 6226495200, 6242821200, 6258549600, 6274270800, 6289999200, 6305720400, 6321448800, 6337170000, 6352898400, 6369224400, 6384348000, 6400674000, 6416402400, 6432123600, 6447852000, 6463573200, 6479301600, 6495022800, 6510751200, 6527077200, 6542200800, 6558526800, 6573650400, 6589976400, 6605704800, 6621426000, 6637154400, 6652875600, 6668604000, 6684325200, 6700053600, 6716379600, 6731503200, 6747829200, 6763557600, 6779278800, 6795007200, 6810728400, 6826456800, 6842178000, 6857906400, 6873627600, 6889356000, 6905682000, 6920805600, 6937131600, 6952860000, 6968581200, 6984309600, 7000030800, 7015759200, 7031480400, 7047208800, 7063534800, 7078658400, 7094984400, 7110108000, 7126434000, 7142162400, 7157883600, 7173612000, 7189333200, 7205061600, 7220782800, 7236511200, 7252837200, 7267960800, 7284286800, 7299410400, 7315736400, 7331464800, 7347186000, 7362914400, 7378635600, 7394364000, 7410085200, 7425813600, 7442139600, 7457263200, 7473589200, 7488712800, 7505038800, 7520767200, 7536488400, 7552216800, 7567938000, 7583666400, 7599387600, 7615116000, 7631442000, 7646565600, 7662891600, 7678620000, 7694341200, 7710069600, 7725790800, 7741519200, 7757240400, 7772968800, 7789294800, 7804418400, 7820744400, 7835868000, 7852194000, 7867922400, 7883643600, 7899372000, 7915093200, 7930821600, 7946542800, 7962271200, 7978597200, 7993720800, 8010046800, 8025775200, 8041496400, 8057224800, 8072946000, 8088674400, 8104395600, 8120124000, 8135845200, 8151573600, 8167899600, 8183023200, 8199349200, 8215077600, 8230798800, 8246527200, 8262248400, 8277976800, 8293698000, 8309426400, 8325752400, 8340876000, 8357202000, 8372325600, 8388651600, 8404380000, 8420101200, 8435829600, 8451550800, 8467279200, 8483000400, 8498728800, 8515054800, 8530178400, 8546504400, 8562232800, 8577954000, 8593682400, 8609403600, 8625132000, 8640853200, 8656581600, 8672907600, 8688031200, 8704357200, 8719480800, 8735806800, 8751535200, 8767256400, 8782984800, 8798706000, 8814434400, 8830155600, 8845884000, 8862210000, 8877333600, 8893659600, 8909388000, 8925109200, 8940837600, 8956558800, 8972287200, 8988008400, 9003736800, 9019458000, 9035186400, 9051512400, 9066636000, 9082962000, 9098690400, 9114411600, 9130140000, 9145861200, 9161589600, 9177310800, 9193039200, 9209365200, 9224488800, 9240814800, 9255938400, 9272264400, 9287992800, 9303714000, 9319442400, 9335163600, 9350892000, 9366613200, 9382341600, 9398667600, 9413791200, 9430117200, 9445845600, 9461566800, 9477295200, 9493016400, 9508744800, 9524466000, 9540194400, 9556520400, 9571644000, 9587970000, 9603093600, 9619419600, 9635148000, 9650869200, 9666597600, 9682318800, 9698047200, 9713768400, 9729496800, 9745822800, 9760946400, 9777272400, 9793000800, 9808722000, 9824450400, 9840171600, 9855900000, 9871621200, 9887349600, 9903070800, 9918799200, 9935125200, 9950248800, 9966574800, 9982303200, 9998024400, 10013752800, 10029474000, 10045202400, 10060923600, 10076652000, 10092978000, 10108101600, 10124427600, 10139551200, 10155877200, 10171605600, 10187326800, 10203055200, 10218776400, 10234504800, 10250226000, 10265954400, 10282280400, 10297404000, 10313730000, 10329458400, 10345179600, 10360908000, 10376629200, 10392357600, 10408078800, 10423807200, 10439528400, 10455256800, 10471582800, 10486706400, 10503032400, 10518156000, 10534482000, 10550210400, 10565931600, 10581660000, 10597381200, 10613109600, 10628830800, 10644559200, 10660885200, 10676008800, 10692334800, 10708063200, 10723784400, 10739512800, 10755234000, 10770962400, 10786683600, 10802412000, 10818738000, 10833861600, 10850187600, 10865311200, 10881637200, 10897365600, 10913086800, 10928815200, 10944536400, 10960264800, 10975986000, 10991714400, 11008040400, 11023164000, 11039490000, 11055218400, 11070939600, 11086668000, 11102389200, 11118117600, 11133838800, 11149567200, 11165288400, 11181016800, 11197342800, 11212466400, 11228792400, 11244520800, 11260242000, 11275970400, 11291691600, 11307420000, 11323141200, 11338869600, 11355195600, 11370319200, 11386645200, 11401768800, 11418094800, 11433823200, 11449544400, 11465272800, 11480994000, 11496722400, 11512443600, 11528172000, 11544498000, 11559621600, 11575947600, 11591676000, 11607397200, 11623125600, 11638846800, 11654575200, 11670296400, 11686024800, 11702350800, 11717474400, 11733800400, 11748924000, 11765250000, 11780978400, 11796699600, 11812428000, 11828149200, 11843877600, 11859598800, 11875327200, 11891653200, 11906776800, 11923102800, 11938831200, 11954552400, 11970280800, 11986002000, 12001730400, 12017451600, 12033180000, 12048901200, 12064629600, 12080955600, 12096079200, 12112405200, 12128133600, 12143854800, 12159583200, 12175304400, 12191032800, 12206754000, 12222482400, 12238808400, 12253932000, 12270258000, 12285381600, 12301707600, 12317436000, 12333157200, 12348885600, 12364606800, 12380335200, 12396056400, 12411784800, 12428110800, 12443234400, 12459560400, 12475288800, 12491010000, 12506738400, 12522459600, 12538188000, 12553909200, 12569637600, 12585963600, 12601087200, 12617413200, 12632536800, 12648862800, 12664591200, 12680312400, 12696040800, 12711762000, 12727490400, 12743211600, 12758940000, 12775266000, 12790389600, 12806715600, 12822444000, 12838165200, 12853893600, 12869614800, 12885343200, 12901064400, 12916792800, 12932514000, 12948242400, 12964568400, 12979692000, 12996018000, 13011746400, 13027467600, 13043196000, 13058917200, 13074645600, 13090366800, 13106095200, 13122421200, 13137544800, 13153870800, 13168994400, 13185320400, 13201048800, 13216770000, 13232498400, 13248219600, 13263948000, 13279669200, 13295397600, 13311723600, 13326847200, 13343173200, 13358901600, 13374622800, 13390351200, 13406072400, 13421800800, 13437522000, 13453250400, 13469576400, 13484700000, 13501026000, 13516149600, 13532475600, 13548204000, 13563925200, 13579653600, 13595374800, 13611103200, 13626824400, 13642552800, 13658878800, 13674002400, 13690328400, 13706056800, 13721778000, 13737506400, 13753227600, 13768956000, 13784677200, 13800405600, 13816126800, 13831855200, 13848181200, 13863304800, 13879630800, 13895359200, 13911080400, 13926808800, 13942530000, 13958258400, 13973979600, 13989708000, 14006034000, 14021157600, 14037483600, 14052607200, 14068933200, 14084661600, 14100382800, 14116111200, 14131832400, 14147560800, 14163282000, 14179010400, 14195336400, 14210460000, 14226786000, 14242514400, 14258235600, 14273964000, 14289685200, 14305413600, 14321134800 ]),
    Int32List.fromList

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules casablanca = DynamicTimezoneRules(
    'Africa/Casablanca',
    DynamicTimezone(
      -1,
      -1820000,
      'Africa/Casablanca',
      'LMT',
      null,
      -1773012580,
      dst: false,
    ),
    Int64List.fromList([ -1773012580, -956361600, -950490000, -942019200, -761187600, -617241600, -605149200, -81432000, -71110800, 141264000, 147222000, 199756800, 207702000, 231292800, 244249200, 265507200, 271033200, 448243200, 504918000, 1212278400, 1220223600, 1243814400, 1250809200, 1272758400, 1281222000, 1301788800, 1312066800, 1335664800, 1342749600, 1345428000, 1348970400, 1367114400, 1373162400, 1376100000, 1382839200, 1396144800, 1403920800, 1406944800, 1414288800, 1427594400, 1434247200, 1437271200, 1445738400, 1459044000, 1465092000, 1468116000, 1477792800, 1490493600, 1495332000, 1498960800, 1509242400, 1521943200, 1526176800, 1529200800, 1540692000, 1557021600, 1560045600, 1587261600, 1590890400, 1618106400, 1621130400, 1648346400, 1651975200, 1679191200, 1682215200, 1710036000, 1713060000, 1740276000, 1743904800, 1771120800, 1774144800, 1801965600, 1804989600, 1832205600, 1835834400, 1863050400, 1866074400, 1893290400, 1896919200, 1924135200, 1927159200, 1954980000, 1958004000, 1985220000, 1988848800, 2016064800, 2019088800, 2046304800, 2049933600, 2077149600, 2080778400, 2107994400, 2111018400, 2138234400, 2141863200, 2169079200, 2172103200, 2199924000, 2202948000, 2230164000, 2233792800, 2261008800, 2264032800, 2291248800, 2294877600, 2322093600, 2325722400, 2352938400, 2355962400, 2383178400, 2386807200, 2414023200, 2417047200, 2444868000, 2447892000, 2475108000, 2478736800, 2505952800, 2508976800, 2536192800, 2539821600, 2567037600, 2570666400, 2597882400, 2600906400, 2628122400, 2631751200, 2658967200, 2661991200, 2689812000, 2692836000, 2720052000, 2723680800, 2750896800, 2753920800, 2781136800, 2784765600, 2811981600, 2815610400, 2842826400, 2845850400, 2873066400, 2876695200, 2903911200, 2906935200, 2934756000, 2937780000, 2964996000, 2968624800, 2995840800, 2998864800, 3026080800, 3029709600, 3056925600, 3060554400, 3087770400, 3090794400, 3118010400, 3121639200, 3148855200, 3151879200, 3179700000, 3182724000, 3209940000, 3213568800, 3240784800, 3243808800, 3271024800, 3274653600, 3301869600, 3305498400, 3332714400, 3335738400, 3362954400, 3366583200, 3393799200, 3396823200, 3424644000, 3427668000, 3454884000, 3458512800, 3485728800, 3488752800, 3515968800, 3519597600, 3546813600, 3549837600, 3577658400, 3580682400, 3607898400, 3611527200, 3638743200, 3641767200, 3669588000, 3672612000, 3699828000, 3703456800 ]),
    Int32List.fromList

    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules ceuta = DynamicTimezoneRules(
    'Africa/Ceuta',
    DynamicTimezone(
      -1,
      -1276000,
      'Africa/Ceuta',
      'LMT',
      null,
      -2177452800,
      dst: false,
    ),
    Int64List.fromList([ -2177452800, -1630112400, -1616810400, -1442451600, -1427673600, -1379293200, -1364774400, -1348448400, -1333324800, -1316390400, -1301270400, -1293840000, -81432000, -71110800, 141264000, 147222000, 199756800, 207702000, 231292800, 244249200, 265507200, 271033200, 448243200, 512528400, 528253200, 543978000, 559702800, 575427600, 591152400, 606877200, 622602000, 638326800, 654656400, 670381200, 686106000, 701830800, 717555600, 733280400, 749005200, 764730000, 780454800, 796179600, 811904400, 828234000, 846378000, 859683600, 877827600, 891133200, 909277200, 922582800, 941331600, 954032400, 972781200, 985482000, 1004230800, 1017536400, 1035680400, 1048986000, 1067130000, 1080435600, 1099184400, 1111885200, 1130634000, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800, 1238288400, 1256432400, 1269738000, 1288486800, 1301187600, 1319936400, 1332637200, 1351386000, 1364691600, 1382835600, 1396141200, 1414285200, 1427590800, 1445734800, 1459040400, 1477789200, 1490490000, 1509238800, 1521939600, 1540688400, 1553994000, 1572138000, 1585443600, 1603587600, 1616893200, 1635642000, 1648342800, 1667091600, 1679792400, 1698541200, 1711846800, 1729990800, 1743296400, 1761440400, 1774746000, 1792890000, 1806195600, 1824944400, 1837645200, 1856394000, 1869094800, 1887843600, 1901149200, 1919293200, 1932598800, 1950742800, 1964048400, 1982797200, 1995498000, 2014246800, 2026947600, 2045696400, 2058397200, 2077146000, 2090451600, 2108595600, 2121901200, 2140045200 ]),
    Int32List.fromList([ 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 0, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000 ]),
    [ 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'WEST', 'WET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET' ],
    [ false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules conakry = DynamicTimezoneRules(
    'Africa/Conakry',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Conakry',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules dakar = DynamicTimezoneRules(
    'Africa/Dakar',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Dakar',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules darEsSalaam = DynamicTimezoneRules(
    'Africa/Dar_es_Salaam',
    DynamicTimezone(
      -1,
      8836000,
      'Africa/Dar_es_Salaam',
      'LMT',
      null,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836, -1309746600, -1261969200, -1041388200, -865305900 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules djibouti = DynamicTimezoneRules(
    'Africa/Djibouti',
    DynamicTimezone(
      -1,
      8836000,
      'Africa/Djibouti',
      'LMT',
      null,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836, -1309746600, -1261969200, -1041388200, -865305900 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules douala = DynamicTimezoneRules(
    'Africa/Douala',
    DynamicTimezone(
      -1,
      0,
      'Africa/Douala',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules elAaiun = DynamicTimezoneRules(
    'Africa/El_Aaiun',
    DynamicTimezone(
      -1,
      -3168000,
      'Africa/El_Aaiun',
      'LMT',
      null,
      -1136070432,
      dst: false,
    ),
    Int64List.fromList([ -1136070432, 198291600, 199756800, 207702000, 231292800, 244249200, 265507200, 271033200, 1212278400, 1220223600, 1243814400, 1250809200, 1272758400, 1281222000, 1301788800, 1312066800, 1335664800, 1342749600, 1345428000, 1348970400, 1367114400, 1373162400, 1376100000, 1382839200, 1396144800, 1403920800, 1406944800, 1414288800, 1427594400, 1434247200, 1437271200, 1445738400, 1459044000, 1465092000, 1468116000, 1477792800, 1490493600, 1495332000, 1498960800, 1509242400, 1521943200, 1526176800, 1529200800, 1540692000, 1557021600, 1560045600, 1587261600, 1590890400, 1618106400, 1621130400, 1648346400, 1651975200, 1679191200, 1682215200, 1710036000, 1713060000, 1740276000, 1743904800, 1771120800, 1774144800, 1801965600, 1804989600, 1832205600, 1835834400, 1863050400, 1866074400, 1893290400, 1896919200, 1924135200, 1927159200, 1954980000, 1958004000, 1985220000, 1988848800, 2016064800, 2019088800, 2046304800, 2049933600, 2077149600, 2080778400, 2107994400, 2111018400, 2138234400, 2141863200, 2169079200, 2172103200, 2199924000, 2202948000, 2230164000, 2233792800, 2261008800, 2264032800, 2291248800, 2294877600, 2322093600, 2325722400, 2352938400, 2355962400, 2383178400, 2386807200, 2414023200, 2417047200, 2444868000, 2447892000, 2475108000, 2478736800, 2505952800, 2508976800, 2536192800, 2539821600, 2567037600, 2570666400, 2597882400, 2600906400, 2628122400, 2631751200, 2658967200, 2661991200, 2689812000, 2692836000, 2720052000, 2723680800, 2750896800, 2753920800, 2781136800, 2784765600, 2811981600, 2815610400, 2842826400, 2845850400, 2873066400, 2876695200, 2903911200, 2906935200, 2934756000, 2937780000, 2964996000, 2968624800, 2995840800, 2998864800, 3026080800, 3029709600, 3056925600, 3060554400, 3087770400, 3090794400, 3118010400, 3121639200, 3148855200, 3151879200, 3179700000, 3182724000, 3209940000, 3213568800, 3240784800, 3243808800, 3271024800, 3274653600, 3301869600, 3305498400, 3332714400, 3335738400, 3362954400, 3366583200, 3393799200, 3396823200, 3424644000, 3427668000, 3454884000, 3458512800, 3485728800, 3488752800, 3515968800, 3519597600, 3546813600, 3549837600, 3577658400, 3580682400, 3607898400, 3611527200, 3638743200, 3641767200, 3669588000, 3672612000, 3699828000, 3703456800 ]),
    Int32List.fromList
    [ '-01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01', '+00', '+01' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules freetown = DynamicTimezoneRules(
    'Africa/Freetown',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Freetown',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules gaborone = DynamicTimezoneRules(
    'Africa/Gaborone',
    DynamicTimezone(
      -1,
      7820000,
      'Africa/Gaborone',
      'LMT',
      null,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final TimezoneRules harare = DynamicTimezoneRules(
    'Africa/Harare',
    DynamicTimezone(
      -1,
      7820000,
      'Africa/Harare',
      'LMT',
      null,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final TimezoneRules johannesburg = DynamicTimezoneRules(
    'Africa/Johannesburg',
    DynamicTimezone(
      -1,
      6720000,
      'Africa/Johannesburg',
      'LMT',
      null,
      -2458173120,
      dst: false,
    ),
    Int64List.fromList([ -2458173120, -2109288600, -860976000, -845254800, -829526400, -813805200 ]),
    Int32List.fromList([ 5400000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'SAST', 'SAST', 'SAST', 'SAST', 'SAST', 'SAST' ],
    [ false, false, true, false, true, false ],
  );

  static final TimezoneRules juba = DynamicTimezoneRules(
    'Africa/Juba',
    DynamicTimezone(
      -1,
      7588000,
      'Africa/Juba',
      'LMT',
      null,
      -1230775588,
      dst: false,
    ),
    Int64List.fromList([ -1230775588, 10360800, 24786000, 41810400, 56322000, 73432800, 87944400, 104882400, 119480400, 136332000, 151016400, 167781600, 182552400, 199231200, 214174800, 230680800, 245710800, 262735200, 277246800, 294184800, 308782800, 325634400, 340405200, 357084000, 371941200, 388533600, 403477200, 419983200, 435013200, 452037600, 466635600, 483487200, 498171600, 947930400, 1612126800 ]),
    Int32List.fromList([ 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'EAT', 'CAT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final TimezoneRules kampala = DynamicTimezoneRules(
    'Africa/Kampala',
    DynamicTimezone(
      -1,
      8836000,
      'Africa/Kampala',
      'LMT',
      null,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836, -1309746600, -1261969200, -1041388200, -865305900 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules khartoum = DynamicTimezoneRules(
    'Africa/Khartoum',
    DynamicTimezone(
      -1,
      7808000,
      'Africa/Khartoum',
      'LMT',
      null,
      -1230775808,
      dst: false,
    ),
    Int64List.fromList([ -1230775808, 10360800, 24786000, 41810400, 56322000, 73432800, 87944400, 104882400, 119480400, 136332000, 151016400, 167781600, 182552400, 199231200, 214174800, 230680800, 245710800, 262735200, 277246800, 294184800, 308782800, 325634400, 340405200, 357084000, 371941200, 388533600, 403477200, 419983200, 435013200, 452037600, 466635600, 483487200, 498171600, 947930400, 1509483600 ]),
    Int32List.fromList([ 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'CAST', 'CAT', 'EAT', 'CAT' ],
    [ false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false ],
  );

  static final TimezoneRules kigali = DynamicTimezoneRules(
    'Africa/Kigali',
    DynamicTimezone(
      -1,
      7820000,
      'Africa/Kigali',
      'LMT',
      null,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final TimezoneRules kinshasa = DynamicTimezoneRules(
    'Africa/Kinshasa',
    DynamicTimezone(
      -1,
      0,
      'Africa/Kinshasa',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules lagos = DynamicTimezoneRules(
    'Africa/Lagos',
    DynamicTimezone(
      -1,
      0,
      'Africa/Lagos',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules libreville = DynamicTimezoneRules(
    'Africa/Libreville',
    DynamicTimezone(
      -1,
      0,
      'Africa/Libreville',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules lome = DynamicTimezoneRules(
    'Africa/Lome',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Lome',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules luanda = DynamicTimezoneRules(
    'Africa/Luanda',
    DynamicTimezone(
      -1,
      0,
      'Africa/Luanda',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules lubumbashi = DynamicTimezoneRules(
    'Africa/Lubumbashi',
    DynamicTimezone(
      -1,
      7820000,
      'Africa/Lubumbashi',
      'LMT',
      null,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final TimezoneRules lusaka = DynamicTimezoneRules(
    'Africa/Lusaka',
    DynamicTimezone(
      -1,
      7820000,
      'Africa/Lusaka',
      'LMT',
      null,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final TimezoneRules malabo = DynamicTimezoneRules(
    'Africa/Malabo',
    DynamicTimezone(
      -1,
      0,
      'Africa/Malabo',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules maputo = DynamicTimezoneRules(
    'Africa/Maputo',
    DynamicTimezone(
      -1,
      7820000,
      'Africa/Maputo',
      'LMT',
      null,
      -2109291020,
      dst: false,
    ),
    Int64List.fromList([ -2109291020 ]),
    Int32List.fromList([ 7200000 ]),
    [ 'CAT' ],
    [ false ],
  );

  static final TimezoneRules maseru = DynamicTimezoneRules(
    'Africa/Maseru',
    DynamicTimezone(
      -1,
      6720000,
      'Africa/Maseru',
      'LMT',
      null,
      -2458173120,
      dst: false,
    ),
    Int64List.fromList([ -2458173120, -2109288600, -860976000, -845254800, -829526400, -813805200 ]),
    Int32List.fromList([ 5400000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'SAST', 'SAST', 'SAST', 'SAST', 'SAST', 'SAST' ],
    [ false, false, true, false, true, false ],
  );

  static final TimezoneRules mbabane = DynamicTimezoneRules(
    'Africa/Mbabane',
    DynamicTimezone(
      -1,
      6720000,
      'Africa/Mbabane',
      'LMT',
      null,
      -2458173120,
      dst: false,
    ),
    Int64List.fromList([ -2458173120, -2109288600, -860976000, -845254800, -829526400, -813805200 ]),
    Int32List.fromList([ 5400000, 7200000, 10800000, 7200000, 10800000, 7200000 ]),
    [ 'SAST', 'SAST', 'SAST', 'SAST', 'SAST', 'SAST' ],
    [ false, false, true, false, true, false ],
  );

  static final TimezoneRules mogadishu = DynamicTimezoneRules(
    'Africa/Mogadishu',
    DynamicTimezone(
      -1,
      8836000,
      'Africa/Mogadishu',
      'LMT',
      null,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836, -1309746600, -1261969200, -1041388200, -865305900 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules monrovia = DynamicTimezoneRules(
    'Africa/Monrovia',
    DynamicTimezone(
      -1,
      -2588000,
      'Africa/Monrovia',
      'LMT',
      null,
      -2776979812,
      dst: false,
    ),
    Int64List.fromList([ -2776979812, -1604359012, 63593070 ]),
    Int32List.fromList([ -2588000, -2670000, 0 ]),
    [ 'MMT', 'MMT', 'GMT' ],
    [ false, false, false ],
  );

  static final TimezoneRules nairobi = DynamicTimezoneRules(
    'Africa/Nairobi',
    DynamicTimezone(
      -1,
      8836000,
      'Africa/Nairobi',
      'LMT',
      null,
      -1946168836,
      dst: false,
    ),
    Int64List.fromList([ -1946168836, -1309746600, -1261969200, -1041388200, -865305900 ]),
    Int32List.fromList([ 9000000, 10800000, 9000000, 9900000, 10800000 ]),
    [ '+0230', 'EAT', '+0230', '+0245', 'EAT' ],
    [ false, false, false, false, false ],
  );

  static final TimezoneRules ndjamena = DynamicTimezoneRules(
    'Africa/Ndjamena',
    DynamicTimezone(
      -1,
      3612000,
      'Africa/Ndjamena',
      'LMT',
      null,
      -1830387612,
      dst: false,
    ),
    Int64List.fromList([ -1830387612, 308703600, 321314400 ]),
    Int32List.fromList([ 3600000, 7200000, 3600000 ]),
    [ 'WAT', 'WAST', 'WAT' ],
    [ false, true, false ],
  );

  static final TimezoneRules niamey = DynamicTimezoneRules(
    'Africa/Niamey',
    DynamicTimezone(
      -1,
      0,
      'Africa/Niamey',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules nouakchott = DynamicTimezoneRules(
    'Africa/Nouakchott',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Nouakchott',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules ouagadougou = DynamicTimezoneRules(
    'Africa/Ouagadougou',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Ouagadougou',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules portoNovo = DynamicTimezoneRules(
    'Africa/Porto-Novo',
    DynamicTimezone(
      -1,
      0,
      'Africa/Porto-Novo',
      'GMT',
      null,
      -2035584815,
      dst: false,
    ),
    Int64List.fromList([ -2035584815, -1940889600, -1767226415, -1588465800 ]),
    Int32List.fromList([ 0, 815000, 1800000, 3600000 ]),
    [ 'GMT', 'LMT', '+0030', 'WAT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules saoTome = DynamicTimezoneRules(
    'Africa/Sao_Tome',
    DynamicTimezone(
      -1,
      1616000,
      'Africa/Sao_Tome',
      'LMT',
      null,
      -2713912016,
      dst: false,
    ),
    Int64List.fromList([ -2713912016, -1830384000, 1514768400, 1546304400 ]),
    Int32List.fromList([ -2205000, 0, 3600000, 0 ]),
    [ 'LMT', 'GMT', 'WAT', 'GMT' ],
    [ false, false, false, false ],
  );

  static final TimezoneRules timbuktu = DynamicTimezoneRules(
    'Africa/Timbuktu',
    DynamicTimezone(
      -1,
      -968000,
      'Africa/Timbuktu',
      'LMT',
      null,
      -1830383032,
      dst: false,
    ),
    Int64List.fromList([ -1830383032 ]),
    Int32List.fromList([ 0 ]),
    [ 'GMT' ],
    [ false ],
  );

  static final TimezoneRules tripoli = DynamicTimezoneRules(
    'Africa/Tripoli',
    DynamicTimezone(
      -1,
      3164000,
      'Africa/Tripoli',
      'LMT',
      null,
      -1577926364,
      dst: false,
    ),
    Int64List.fromList([ -1577926364, -574902000, -568087200, -512175600, -504928800, -449888400, -441856800, -347158800, 378684000, 386463600, 402271200, 417999600, 433807200, 449622000, 465429600, 481590000, 496965600, 512953200, 528674400, 544230000, 560037600, 575852400, 591660000, 607388400, 623196000, 641775600, 844034400, 860108400, 875916000, 1352505600, 1364515200, 1382659200 ]),
    Int32List.fromList([ 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 7200000, 3600000, 7200000, 7200000 ]),
    [ 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'EET', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'EET', 'CET', 'CEST', 'EET', 'CET', 'CEST', 'EET' ],
    [ false, true, false, true, false, true, false, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, false, false, true, false, false, true, false ],
  );

  static final TimezoneRules tunis = DynamicTimezoneRules(
    'Africa/Tunis',
    DynamicTimezone(
      -1,
      2444000,
      'Africa/Tunis',
      'LMT',
      null,
      -2797202444,
      dst: false,
    ),
    Int64List.fromList([ -2797202444, -1855958961, -969242400, -950493600, -941940000, -891136800, -877827600, -857257200, -844556400, -842918400, -842223600, -828230400, -812502000, -796269600, -781052400, -766634400, 231202800, 243903600, 262825200, 276044400, 581122800, 591145200, 606870000, 622594800, 641516400, 654649200, 1114902000, 1128038400, 1143334800, 1162083600, 1174784400, 1193533200, 1206838800, 1224982800 ]),
    Int32List.fromList([ 561000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000 ]),
    [ 'PMT', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET', 'CEST', 'CET' ],
    [ false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

  static final TimezoneRules windhoek = DynamicTimezoneRules(
    'Africa/Windhoek',
    DynamicTimezone(
      -1,
      4104000,
      'Africa/Windhoek',
      'LMT',
      null,
      -2458170504,
      dst: false,
    ),
    Int64List.fromList([ -2458170504, -2109288600, -860976000, -845254800, 637970400, 764200800, 778640400, 796780800, 810090000, 828835200, 841539600, 860284800, 873594000, 891734400, 905043600, 923184000, 936493200, 954633600, 967942800, 986083200, 999392400, 1018137600, 1030842000, 1049587200, 1062896400, 1081036800, 1094346000, 1112486400, 1125795600, 1143936000, 1157245200, 1175385600, 1188694800, 1207440000, 1220749200, 1238889600, 1252198800, 1270339200, 1283648400, 1301788800, 1315098000, 1333238400, 1346547600, 1365292800, 1377997200, 1396742400, 1410051600, 1428192000, 1441501200, 1459641600, 1472950800, 1491091200, 1504400400 ]),
    Int32List.fromList([ 5400000, 7200000, 10800000, 7200000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000, 3600000, 7200000 ]),
    [ '+0130', 'SAST', 'SAST', 'SAST', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT', 'WAT', 'CAT' ],
    [ false, false, true, false, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false ],
  );

}


